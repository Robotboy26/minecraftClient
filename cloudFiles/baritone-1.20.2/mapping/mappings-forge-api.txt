baritone.Baritone -> baritone.a:
    java.util.concurrent.ThreadPoolExecutor threadPool -> a
    net.minecraft.client.Minecraft mc -> a
    java.nio.file.Path directory -> a
    baritone.event.GameEventHandler gameEventHandler -> a
    baritone.behavior.PathingBehavior pathingBehavior -> a
    baritone.behavior.LookBehavior lookBehavior -> a
    baritone.behavior.InventoryBehavior inventoryBehavior -> a
    baritone.utils.InputOverrideHandler inputOverrideHandler -> a
    baritone.process.FollowProcess followProcess -> a
    baritone.process.MineProcess mineProcess -> a
    baritone.process.GetToBlockProcess getToBlockProcess -> a
    baritone.process.CustomGoalProcess customGoalProcess -> a
    baritone.process.BuilderProcess builderProcess -> a
    baritone.process.ExploreProcess exploreProcess -> a
    baritone.process.FarmProcess farmProcess -> a
    baritone.process.InventoryPauserProcess inventoryPauserProcess -> a
    baritone.process.ElytraProcess elytraProcess -> a
    baritone.utils.PathingControlManager pathingControlManager -> a
    baritone.selection.SelectionManager selectionManager -> a
    baritone.command.manager.CommandManager commandManager -> a
    baritone.api.utils.IPlayerContext playerContext -> a
    baritone.cache.WorldProvider worldProvider -> a
    baritone.utils.BlockStateInterface bsi -> a
    void <init>(net.minecraft.client.Minecraft) -> <init>
    void registerBehavior(baritone.api.behavior.IBehavior) -> a
    baritone.api.behavior.IBehavior registerBehavior(java.util.function.Function) -> a
    baritone.api.process.IBaritoneProcess registerProcess(java.util.function.Function) -> a
    baritone.api.utils.IPlayerContext getPlayerContext() -> getPlayerContext
    baritone.api.event.listener.IEventBus getGameEventHandler() -> getGameEventHandler
    baritone.api.process.IElytraProcess getElytraProcess() -> getElytraProcess
    void openClick() -> openClick
    baritone.api.Settings settings() -> a
    java.util.concurrent.Executor getExecutor() -> a
    baritone.api.command.manager.ICommandManager getCommandManager() -> getCommandManager
    baritone.api.selection.ISelectionManager getSelectionManager() -> getSelectionManager
    baritone.api.utils.IInputOverrideHandler getInputOverrideHandler() -> getInputOverrideHandler
    baritone.api.pathing.calc.IPathingControlManager getPathingControlManager() -> getPathingControlManager
    baritone.api.cache.IWorldProvider getWorldProvider() -> getWorldProvider
    baritone.api.process.IGetToBlockProcess getGetToBlockProcess() -> getGetToBlockProcess
    baritone.api.process.ICustomGoalProcess getCustomGoalProcess() -> getCustomGoalProcess
    baritone.api.process.IFarmProcess getFarmProcess() -> getFarmProcess
    baritone.api.process.IExploreProcess getExploreProcess() -> getExploreProcess
    baritone.api.process.IBuilderProcess getBuilderProcess() -> getBuilderProcess
    baritone.api.process.IMineProcess getMineProcess() -> getMineProcess
    baritone.api.process.IFollowProcess getFollowProcess() -> getFollowProcess
    baritone.api.behavior.ILookBehavior getLookBehavior() -> getLookBehavior
    baritone.api.behavior.IPathingBehavior getPathingBehavior() -> getPathingBehavior
    void lambda$openClick$1() -> a
    void lambda$openClick$0() -> b
    void <clinit>() -> <clinit>
baritone.BaritoneProvider -> baritone.BaritoneProvider:
    java.util.List all -> a
    java.util.List allView -> b
    void <init>() -> <init>
    baritone.api.IBaritone getPrimaryBaritone() -> getPrimaryBaritone
    java.util.List getAllBaritones() -> getAllBaritones
    baritone.api.IBaritone createBaritone(net.minecraft.client.Minecraft) -> createBaritone
    boolean destroyBaritone(baritone.api.IBaritone) -> destroyBaritone
    baritone.api.cache.IWorldScanner getWorldScanner() -> getWorldScanner
    baritone.api.command.ICommandSystem getCommandSystem() -> getCommandSystem
    baritone.api.schematic.ISchematicSystem getSchematicSystem() -> getSchematicSystem
baritone.KeepName -> baritone.b:
baritone.api.BaritoneAPI -> baritone.api.BaritoneAPI:
    baritone.api.IBaritoneProvider provider -> provider
    baritone.api.Settings settings -> settings
    void <init>() -> <init>
    baritone.api.IBaritoneProvider getProvider() -> getProvider
    baritone.api.Settings getSettings() -> getSettings
    void <clinit>() -> <clinit>
baritone.api.IBaritone -> baritone.api.IBaritone:
    baritone.api.behavior.IPathingBehavior getPathingBehavior() -> getPathingBehavior
    baritone.api.behavior.ILookBehavior getLookBehavior() -> getLookBehavior
    baritone.api.process.IFollowProcess getFollowProcess() -> getFollowProcess
    baritone.api.process.IMineProcess getMineProcess() -> getMineProcess
    baritone.api.process.IBuilderProcess getBuilderProcess() -> getBuilderProcess
    baritone.api.process.IExploreProcess getExploreProcess() -> getExploreProcess
    baritone.api.process.IFarmProcess getFarmProcess() -> getFarmProcess
    baritone.api.process.ICustomGoalProcess getCustomGoalProcess() -> getCustomGoalProcess
    baritone.api.process.IGetToBlockProcess getGetToBlockProcess() -> getGetToBlockProcess
    baritone.api.process.IElytraProcess getElytraProcess() -> getElytraProcess
    baritone.api.cache.IWorldProvider getWorldProvider() -> getWorldProvider
    baritone.api.pathing.calc.IPathingControlManager getPathingControlManager() -> getPathingControlManager
    baritone.api.utils.IInputOverrideHandler getInputOverrideHandler() -> getInputOverrideHandler
    baritone.api.utils.IPlayerContext getPlayerContext() -> getPlayerContext
    baritone.api.event.listener.IEventBus getGameEventHandler() -> getGameEventHandler
    baritone.api.selection.ISelectionManager getSelectionManager() -> getSelectionManager
    baritone.api.command.manager.ICommandManager getCommandManager() -> getCommandManager
    void openClick() -> openClick
baritone.api.IBaritoneProvider -> baritone.api.IBaritoneProvider:
    baritone.api.IBaritone getPrimaryBaritone() -> getPrimaryBaritone
    java.util.List getAllBaritones() -> getAllBaritones
    baritone.api.IBaritone getBaritoneForPlayer(net.minecraft.client.player.LocalPlayer) -> getBaritoneForPlayer
    baritone.api.IBaritone getBaritoneForMinecraft(net.minecraft.client.Minecraft) -> getBaritoneForMinecraft
    baritone.api.IBaritone getBaritoneForConnection(net.minecraft.client.multiplayer.ClientPacketListener) -> getBaritoneForConnection
    baritone.api.IBaritone createBaritone(net.minecraft.client.Minecraft) -> createBaritone
    boolean destroyBaritone(baritone.api.IBaritone) -> destroyBaritone
    baritone.api.cache.IWorldScanner getWorldScanner() -> getWorldScanner
    baritone.api.command.ICommandSystem getCommandSystem() -> getCommandSystem
    baritone.api.schematic.ISchematicSystem getSchematicSystem() -> getSchematicSystem
baritone.api.Settings -> baritone.api.Settings:
    baritone.api.Settings$Setting allowBreak -> allowBreak
    baritone.api.Settings$Setting allowBreakAnyway -> allowBreakAnyway
    baritone.api.Settings$Setting allowSprint -> allowSprint
    baritone.api.Settings$Setting allowPlace -> allowPlace
    baritone.api.Settings$Setting allowInventory -> allowInventory
    baritone.api.Settings$Setting ticksBetweenInventoryMoves -> ticksBetweenInventoryMoves
    baritone.api.Settings$Setting inventoryMoveOnlyIfStationary -> inventoryMoveOnlyIfStationary
    baritone.api.Settings$Setting assumeExternalAutoTool -> assumeExternalAutoTool
    baritone.api.Settings$Setting autoTool -> autoTool
    baritone.api.Settings$Setting blockPlacementPenalty -> blockPlacementPenalty
    baritone.api.Settings$Setting blockBreakAdditionalPenalty -> blockBreakAdditionalPenalty
    baritone.api.Settings$Setting jumpPenalty -> jumpPenalty
    baritone.api.Settings$Setting walkOnWaterOnePenalty -> walkOnWaterOnePenalty
    baritone.api.Settings$Setting strictLiquidCheck -> strictLiquidCheck
    baritone.api.Settings$Setting allowWaterBucketFall -> allowWaterBucketFall
    baritone.api.Settings$Setting assumeWalkOnWater -> assumeWalkOnWater
    baritone.api.Settings$Setting assumeWalkOnLava -> assumeWalkOnLava
    baritone.api.Settings$Setting assumeStep -> assumeStep
    baritone.api.Settings$Setting assumeSafeWalk -> assumeSafeWalk
    baritone.api.Settings$Setting allowJumpAt256 -> allowJumpAt256
    baritone.api.Settings$Setting allowParkourAscend -> allowParkourAscend
    baritone.api.Settings$Setting allowDiagonalDescend -> allowDiagonalDescend
    baritone.api.Settings$Setting allowDiagonalAscend -> allowDiagonalAscend
    baritone.api.Settings$Setting allowDownward -> allowDownward
    baritone.api.Settings$Setting acceptableThrowawayItems -> acceptableThrowawayItems
    baritone.api.Settings$Setting blocksToAvoid -> blocksToAvoid
    baritone.api.Settings$Setting blocksToDisallowBreaking -> blocksToDisallowBreaking
    baritone.api.Settings$Setting blocksToAvoidBreaking -> blocksToAvoidBreaking
    baritone.api.Settings$Setting avoidBreakingMultiplier -> avoidBreakingMultiplier
    baritone.api.Settings$Setting buildIgnoreBlocks -> buildIgnoreBlocks
    baritone.api.Settings$Setting buildSkipBlocks -> buildSkipBlocks
    baritone.api.Settings$Setting buildValidSubstitutes -> buildValidSubstitutes
    baritone.api.Settings$Setting buildSubstitutes -> buildSubstitutes
    baritone.api.Settings$Setting okIfAir -> okIfAir
    baritone.api.Settings$Setting buildIgnoreExisting -> buildIgnoreExisting
    baritone.api.Settings$Setting buildIgnoreDirection -> buildIgnoreDirection
    baritone.api.Settings$Setting buildIgnoreProperties -> buildIgnoreProperties
    baritone.api.Settings$Setting avoidUpdatingFallingBlocks -> avoidUpdatingFallingBlocks
    baritone.api.Settings$Setting allowVines -> allowVines
    baritone.api.Settings$Setting allowWalkOnBottomSlab -> allowWalkOnBottomSlab
    baritone.api.Settings$Setting allowParkour -> allowParkour
    baritone.api.Settings$Setting allowParkourPlace -> allowParkourPlace
    baritone.api.Settings$Setting considerPotionEffects -> considerPotionEffects
    baritone.api.Settings$Setting sprintAscends -> sprintAscends
    baritone.api.Settings$Setting overshootTraverse -> overshootTraverse
    baritone.api.Settings$Setting pauseMiningForFallingBlocks -> pauseMiningForFallingBlocks
    baritone.api.Settings$Setting rightClickSpeed -> rightClickSpeed
    baritone.api.Settings$Setting randomLooking113 -> randomLooking113
    baritone.api.Settings$Setting blockReachDistance -> blockReachDistance
    baritone.api.Settings$Setting randomLooking -> randomLooking
    baritone.api.Settings$Setting costHeuristic -> costHeuristic
    baritone.api.Settings$Setting pathingMaxChunkBorderFetch -> pathingMaxChunkBorderFetch
    baritone.api.Settings$Setting backtrackCostFavoringCoefficient -> backtrackCostFavoringCoefficient
    baritone.api.Settings$Setting avoidance -> avoidance
    baritone.api.Settings$Setting mobSpawnerAvoidanceCoefficient -> mobSpawnerAvoidanceCoefficient
    baritone.api.Settings$Setting mobSpawnerAvoidanceRadius -> mobSpawnerAvoidanceRadius
    baritone.api.Settings$Setting mobAvoidanceCoefficient -> mobAvoidanceCoefficient
    baritone.api.Settings$Setting mobAvoidanceRadius -> mobAvoidanceRadius
    baritone.api.Settings$Setting rightClickContainerOnArrival -> rightClickContainerOnArrival
    baritone.api.Settings$Setting enterPortal -> enterPortal
    baritone.api.Settings$Setting minimumImprovementRepropagation -> minimumImprovementRepropagation
    baritone.api.Settings$Setting cutoffAtLoadBoundary -> cutoffAtLoadBoundary
    baritone.api.Settings$Setting maxCostIncrease -> maxCostIncrease
    baritone.api.Settings$Setting costVerificationLookahead -> costVerificationLookahead
    baritone.api.Settings$Setting pathCutoffFactor -> pathCutoffFactor
    baritone.api.Settings$Setting pathCutoffMinimumLength -> pathCutoffMinimumLength
    baritone.api.Settings$Setting planningTickLookahead -> planningTickLookahead
    baritone.api.Settings$Setting pathingMapDefaultSize -> pathingMapDefaultSize
    baritone.api.Settings$Setting pathingMapLoadFactor -> pathingMapLoadFactor
    baritone.api.Settings$Setting maxFallHeightNoWater -> maxFallHeightNoWater
    baritone.api.Settings$Setting maxFallHeightBucket -> maxFallHeightBucket
    baritone.api.Settings$Setting allowOvershootDiagonalDescend -> allowOvershootDiagonalDescend
    baritone.api.Settings$Setting simplifyUnloadedYCoord -> simplifyUnloadedYCoord
    baritone.api.Settings$Setting repackOnAnyBlockChange -> repackOnAnyBlockChange
    baritone.api.Settings$Setting movementTimeoutTicks -> movementTimeoutTicks
    baritone.api.Settings$Setting primaryTimeoutMS -> primaryTimeoutMS
    baritone.api.Settings$Setting failureTimeoutMS -> failureTimeoutMS
    baritone.api.Settings$Setting planAheadPrimaryTimeoutMS -> planAheadPrimaryTimeoutMS
    baritone.api.Settings$Setting planAheadFailureTimeoutMS -> planAheadFailureTimeoutMS
    baritone.api.Settings$Setting slowPath -> slowPath
    baritone.api.Settings$Setting slowPathTimeDelayMS -> slowPathTimeDelayMS
    baritone.api.Settings$Setting slowPathTimeoutMS -> slowPathTimeoutMS
    baritone.api.Settings$Setting doBedWaypoints -> doBedWaypoints
    baritone.api.Settings$Setting doDeathWaypoints -> doDeathWaypoints
    baritone.api.Settings$Setting chunkCaching -> chunkCaching
    baritone.api.Settings$Setting pruneRegionsFromRAM -> pruneRegionsFromRAM
    baritone.api.Settings$Setting chunkPackerQueueMaxSize -> chunkPackerQueueMaxSize
    baritone.api.Settings$Setting backfill -> backfill
    baritone.api.Settings$Setting logAsToast -> logAsToast
    baritone.api.Settings$Setting toastTimer -> toastTimer
    baritone.api.Settings$Setting chatDebug -> chatDebug
    baritone.api.Settings$Setting chatControl -> chatControl
    baritone.api.Settings$Setting chatControlAnyway -> chatControlAnyway
    baritone.api.Settings$Setting renderPath -> renderPath
    baritone.api.Settings$Setting renderPathAsLine -> renderPathAsLine
    baritone.api.Settings$Setting renderGoal -> renderGoal
    baritone.api.Settings$Setting renderGoalAnimated -> renderGoalAnimated
    baritone.api.Settings$Setting renderSelectionBoxes -> renderSelectionBoxes
    baritone.api.Settings$Setting renderGoalIgnoreDepth -> renderGoalIgnoreDepth
    baritone.api.Settings$Setting renderGoalXZBeacon -> renderGoalXZBeacon
    baritone.api.Settings$Setting renderSelectionBoxesIgnoreDepth -> renderSelectionBoxesIgnoreDepth
    baritone.api.Settings$Setting renderPathIgnoreDepth -> renderPathIgnoreDepth
    baritone.api.Settings$Setting pathRenderLineWidthPixels -> pathRenderLineWidthPixels
    baritone.api.Settings$Setting goalRenderLineWidthPixels -> goalRenderLineWidthPixels
    baritone.api.Settings$Setting fadePath -> fadePath
    baritone.api.Settings$Setting freeLook -> freeLook
    baritone.api.Settings$Setting blockFreeLook -> blockFreeLook
    baritone.api.Settings$Setting elytraFreeLook -> elytraFreeLook
    baritone.api.Settings$Setting smoothLook -> smoothLook
    baritone.api.Settings$Setting elytraSmoothLook -> elytraSmoothLook
    baritone.api.Settings$Setting smoothLookTicks -> smoothLookTicks
    baritone.api.Settings$Setting remainWithExistingLookDirection -> remainWithExistingLookDirection
    baritone.api.Settings$Setting antiCheatCompatibility -> antiCheatCompatibility
    baritone.api.Settings$Setting pathThroughCachedOnly -> pathThroughCachedOnly
    baritone.api.Settings$Setting sprintInWater -> sprintInWater
    baritone.api.Settings$Setting blacklistClosestOnFailure -> blacklistClosestOnFailure
    baritone.api.Settings$Setting renderCachedChunks -> renderCachedChunks
    baritone.api.Settings$Setting cachedChunksOpacity -> cachedChunksOpacity
    baritone.api.Settings$Setting prefixControl -> prefixControl
    baritone.api.Settings$Setting prefix -> prefix
    baritone.api.Settings$Setting shortBaritonePrefix -> shortBaritonePrefix
    baritone.api.Settings$Setting useMessageTag -> useMessageTag
    baritone.api.Settings$Setting echoCommands -> echoCommands
    baritone.api.Settings$Setting censorCoordinates -> censorCoordinates
    baritone.api.Settings$Setting censorRanCommands -> censorRanCommands
    baritone.api.Settings$Setting itemSaver -> itemSaver
    baritone.api.Settings$Setting itemSaverThreshold -> itemSaverThreshold
    baritone.api.Settings$Setting preferSilkTouch -> preferSilkTouch
    baritone.api.Settings$Setting walkWhileBreaking -> walkWhileBreaking
    baritone.api.Settings$Setting splicePath -> splicePath
    baritone.api.Settings$Setting maxPathHistoryLength -> maxPathHistoryLength
    baritone.api.Settings$Setting pathHistoryCutoffAmount -> pathHistoryCutoffAmount
    baritone.api.Settings$Setting mineGoalUpdateInterval -> mineGoalUpdateInterval
    baritone.api.Settings$Setting maxCachedWorldScanCount -> maxCachedWorldScanCount
    baritone.api.Settings$Setting minYLevelWhileMining -> minYLevelWhileMining
    baritone.api.Settings$Setting maxYLevelWhileMining -> maxYLevelWhileMining
    baritone.api.Settings$Setting allowOnlyExposedOres -> allowOnlyExposedOres
    baritone.api.Settings$Setting allowOnlyExposedOresDistance -> allowOnlyExposedOresDistance
    baritone.api.Settings$Setting exploreForBlocks -> exploreForBlocks
    baritone.api.Settings$Setting worldExploringChunkOffset -> worldExploringChunkOffset
    baritone.api.Settings$Setting exploreChunkSetMinimumSize -> exploreChunkSetMinimumSize
    baritone.api.Settings$Setting exploreMaintainY -> exploreMaintainY
    baritone.api.Settings$Setting replantCrops -> replantCrops
    baritone.api.Settings$Setting replantNetherWart -> replantNetherWart
    baritone.api.Settings$Setting extendCacheOnThreshold -> extendCacheOnThreshold
    baritone.api.Settings$Setting buildInLayers -> buildInLayers
    baritone.api.Settings$Setting layerOrder -> layerOrder
    baritone.api.Settings$Setting layerHeight -> layerHeight
    baritone.api.Settings$Setting startAtLayer -> startAtLayer
    baritone.api.Settings$Setting skipFailedLayers -> skipFailedLayers
    baritone.api.Settings$Setting buildOnlySelection -> buildOnlySelection
    baritone.api.Settings$Setting buildRepeat -> buildRepeat
    baritone.api.Settings$Setting buildRepeatCount -> buildRepeatCount
    baritone.api.Settings$Setting buildRepeatSneaky -> buildRepeatSneaky
    baritone.api.Settings$Setting breakFromAbove -> breakFromAbove
    baritone.api.Settings$Setting goalBreakFromAbove -> goalBreakFromAbove
    baritone.api.Settings$Setting mapArtMode -> mapArtMode
    baritone.api.Settings$Setting okIfWater -> okIfWater
    baritone.api.Settings$Setting incorrectSize -> incorrectSize
    baritone.api.Settings$Setting breakCorrectBlockPenaltyMultiplier -> breakCorrectBlockPenaltyMultiplier
    baritone.api.Settings$Setting schematicOrientationX -> schematicOrientationX
    baritone.api.Settings$Setting schematicOrientationY -> schematicOrientationY
    baritone.api.Settings$Setting schematicOrientationZ -> schematicOrientationZ
    baritone.api.Settings$Setting schematicFallbackExtension -> schematicFallbackExtension
    baritone.api.Settings$Setting builderTickScanRadius -> builderTickScanRadius
    baritone.api.Settings$Setting mineScanDroppedItems -> mineScanDroppedItems
    baritone.api.Settings$Setting mineDropLoiterDurationMSThanksLouca -> mineDropLoiterDurationMSThanksLouca
    baritone.api.Settings$Setting distanceTrim -> distanceTrim
    baritone.api.Settings$Setting cancelOnGoalInvalidation -> cancelOnGoalInvalidation
    baritone.api.Settings$Setting axisHeight -> axisHeight
    baritone.api.Settings$Setting disconnectOnArrival -> disconnectOnArrival
    baritone.api.Settings$Setting legitMine -> legitMine
    baritone.api.Settings$Setting legitMineYLevel -> legitMineYLevel
    baritone.api.Settings$Setting legitMineIncludeDiagonals -> legitMineIncludeDiagonals
    baritone.api.Settings$Setting forceInternalMining -> forceInternalMining
    baritone.api.Settings$Setting internalMiningAirException -> internalMiningAirException
    baritone.api.Settings$Setting followOffsetDistance -> followOffsetDistance
    baritone.api.Settings$Setting followOffsetDirection -> followOffsetDirection
    baritone.api.Settings$Setting followRadius -> followRadius
    baritone.api.Settings$Setting disableCompletionCheck -> disableCompletionCheck
    baritone.api.Settings$Setting cachedChunksExpirySeconds -> cachedChunksExpirySeconds
    baritone.api.Settings$Setting logger -> logger
    baritone.api.Settings$Setting notifier -> notifier
    baritone.api.Settings$Setting toaster -> toaster
    baritone.api.Settings$Setting verboseCommandExceptions -> verboseCommandExceptions
    baritone.api.Settings$Setting yLevelBoxSize -> yLevelBoxSize
    baritone.api.Settings$Setting colorCurrentPath -> colorCurrentPath
    baritone.api.Settings$Setting colorNextPath -> colorNextPath
    baritone.api.Settings$Setting colorBlocksToBreak -> colorBlocksToBreak
    baritone.api.Settings$Setting colorBlocksToPlace -> colorBlocksToPlace
    baritone.api.Settings$Setting colorBlocksToWalkInto -> colorBlocksToWalkInto
    baritone.api.Settings$Setting colorBestPathSoFar -> colorBestPathSoFar
    baritone.api.Settings$Setting colorMostRecentConsidered -> colorMostRecentConsidered
    baritone.api.Settings$Setting colorGoalBox -> colorGoalBox
    baritone.api.Settings$Setting colorInvertedGoalBox -> colorInvertedGoalBox
    baritone.api.Settings$Setting colorSelection -> colorSelection
    baritone.api.Settings$Setting colorSelectionPos1 -> colorSelectionPos1
    baritone.api.Settings$Setting colorSelectionPos2 -> colorSelectionPos2
    baritone.api.Settings$Setting selectionOpacity -> selectionOpacity
    baritone.api.Settings$Setting selectionLineWidth -> selectionLineWidth
    baritone.api.Settings$Setting renderSelection -> renderSelection
    baritone.api.Settings$Setting renderSelectionIgnoreDepth -> renderSelectionIgnoreDepth
    baritone.api.Settings$Setting renderSelectionCorners -> renderSelectionCorners
    baritone.api.Settings$Setting useSwordToMine -> useSwordToMine
    baritone.api.Settings$Setting desktopNotifications -> desktopNotifications
    baritone.api.Settings$Setting notificationOnPathComplete -> notificationOnPathComplete
    baritone.api.Settings$Setting notificationOnFarmFail -> notificationOnFarmFail
    baritone.api.Settings$Setting notificationOnBuildFinished -> notificationOnBuildFinished
    baritone.api.Settings$Setting notificationOnExploreFinished -> notificationOnExploreFinished
    baritone.api.Settings$Setting notificationOnMineFail -> notificationOnMineFail
    baritone.api.Settings$Setting elytraSimulationTicks -> elytraSimulationTicks
    baritone.api.Settings$Setting elytraPitchRange -> elytraPitchRange
    baritone.api.Settings$Setting elytraFireworkSpeed -> elytraFireworkSpeed
    baritone.api.Settings$Setting elytraFireworkSetbackUseDelay -> elytraFireworkSetbackUseDelay
    baritone.api.Settings$Setting elytraMinimumAvoidance -> elytraMinimumAvoidance
    baritone.api.Settings$Setting elytraConserveFireworks -> elytraConserveFireworks
    baritone.api.Settings$Setting elytraRenderRaytraces -> elytraRenderRaytraces
    baritone.api.Settings$Setting elytraRenderHitboxRaytraces -> elytraRenderHitboxRaytraces
    baritone.api.Settings$Setting elytraRenderSimulation -> elytraRenderSimulation
    baritone.api.Settings$Setting elytraAutoJump -> elytraAutoJump
    baritone.api.Settings$Setting elytraNetherSeed -> elytraNetherSeed
    baritone.api.Settings$Setting elytraPredictTerrain -> elytraPredictTerrain
    baritone.api.Settings$Setting elytraAutoSwap -> elytraAutoSwap
    baritone.api.Settings$Setting elytraMinimumDurability -> elytraMinimumDurability
    baritone.api.Settings$Setting elytraMinFireworksBeforeLanding -> elytraMinFireworksBeforeLanding
    baritone.api.Settings$Setting elytraAllowEmergencyLand -> elytraAllowEmergencyLand
    baritone.api.Settings$Setting elytraTimeBetweenCacheCullSecs -> elytraTimeBetweenCacheCullSecs
    baritone.api.Settings$Setting elytraCacheCullDistance -> elytraCacheCullDistance
    baritone.api.Settings$Setting elytraAllowLandOnNetherFortress -> elytraAllowLandOnNetherFortress
    baritone.api.Settings$Setting elytraTermsAccepted -> elytraTermsAccepted
    java.util.Map byLowerName -> byLowerName
    java.util.List allSettings -> allSettings
    java.util.Map settingTypes -> settingTypes
    void <init>() -> <init>
    java.util.List getAllValuesByType(java.lang.Class) -> getAllValuesByType
    void lambda$new$0(net.minecraft.network.chat.Component) -> lambda$new$0
baritone.api.Settings$JavaOnly -> baritone.api.Settings$JavaOnly:
baritone.api.Settings$Setting -> baritone.api.Settings$Setting:
    java.lang.Object value -> value
    java.lang.Object defaultValue -> defaultValue
    java.lang.String name -> name
    boolean javaOnly -> javaOnly
    baritone.api.Settings this$0 -> this$0
    void <init>(baritone.api.Settings,java.lang.Object) -> <init>
    java.lang.Object get() -> get
    java.lang.String getName() -> getName
    java.lang.Class getValueClass() -> getValueClass
    java.lang.String toString() -> toString
    void reset() -> reset
    java.lang.reflect.Type getType() -> getType
    boolean isJavaOnly() -> isJavaOnly
baritone.api.behavior.IBehavior -> baritone.api.behavior.IBehavior:
baritone.api.behavior.ILookBehavior -> baritone.api.behavior.ILookBehavior:
    void updateTarget(baritone.api.utils.Rotation,boolean) -> updateTarget
    baritone.api.behavior.look.IAimProcessor getAimProcessor() -> getAimProcessor
baritone.api.behavior.IPathingBehavior -> baritone.api.behavior.IPathingBehavior:
    java.util.Optional ticksRemainingInSegment() -> ticksRemainingInSegment
    java.util.Optional ticksRemainingInSegment(boolean) -> ticksRemainingInSegment
    java.util.Optional estimatedTicksToGoal() -> estimatedTicksToGoal
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    boolean isPathing() -> isPathing
    boolean hasPath() -> hasPath
    boolean cancelEverything() -> cancelEverything
    void forceCancel() -> forceCancel
    java.util.Optional getPath() -> getPath
    java.util.Optional getInProgress() -> getInProgress
    baritone.api.pathing.path.IPathExecutor getCurrent() -> getCurrent
    baritone.api.pathing.path.IPathExecutor getNext() -> getNext
baritone.api.behavior.look.IAimProcessor -> baritone.api.behavior.look.IAimProcessor:
    baritone.api.utils.Rotation peekRotation(baritone.api.utils.Rotation) -> peekRotation
    baritone.api.behavior.look.ITickableAimProcessor fork() -> fork
baritone.api.behavior.look.ITickableAimProcessor -> baritone.api.behavior.look.ITickableAimProcessor:
    void tick() -> tick
    void advance(int) -> advance
    baritone.api.utils.Rotation nextRotation(baritone.api.utils.Rotation) -> nextRotation
baritone.api.cache.IBlockTypeAccess -> baritone.api.cache.IBlockTypeAccess:
    net.minecraft.world.level.block.state.BlockState getBlock(int,int,int) -> getBlock
    net.minecraft.world.level.block.state.BlockState getBlock(net.minecraft.core.BlockPos) -> getBlock
baritone.api.cache.ICachedRegion -> baritone.api.cache.ICachedRegion:
    boolean isCached(int,int) -> isCached
    int getX() -> getX
    int getZ() -> getZ
baritone.api.cache.ICachedWorld -> baritone.api.cache.ICachedWorld:
    baritone.api.cache.ICachedRegion getRegion(int,int) -> getRegion
    void queueForPacking(net.minecraft.world.level.chunk.LevelChunk) -> queueForPacking
    boolean isCached(int,int) -> isCached
    java.util.ArrayList getLocationsOf(java.lang.String,int,int,int,int) -> getLocationsOf
    void reloadAllFromDisk() -> reloadAllFromDisk
    void save() -> save
baritone.api.cache.IWaypoint -> baritone.api.cache.IWaypoint:
    java.lang.String getName() -> getName
    baritone.api.cache.IWaypoint$Tag getTag() -> getTag
    long getCreationTimestamp() -> getCreationTimestamp
    baritone.api.utils.BetterBlockPos getLocation() -> getLocation
baritone.api.cache.IWaypoint$Tag -> baritone.api.cache.IWaypoint$Tag:
    baritone.api.cache.IWaypoint$Tag HOME -> HOME
    baritone.api.cache.IWaypoint$Tag DEATH -> DEATH
    baritone.api.cache.IWaypoint$Tag BED -> BED
    baritone.api.cache.IWaypoint$Tag USER -> USER
    java.util.List TAG_LIST -> TAG_LIST
    java.lang.String[] names -> names
    baritone.api.cache.IWaypoint$Tag[] $VALUES -> $VALUES
    baritone.api.cache.IWaypoint$Tag[] values() -> values
    baritone.api.cache.IWaypoint$Tag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    java.lang.String getName() -> getName
    baritone.api.cache.IWaypoint$Tag getByName(java.lang.String) -> getByName
    java.lang.String[] getAllNames() -> getAllNames
    baritone.api.cache.IWaypoint$Tag[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.cache.IWaypointCollection -> baritone.api.cache.IWaypointCollection:
    void addWaypoint(baritone.api.cache.IWaypoint) -> addWaypoint
    void removeWaypoint(baritone.api.cache.IWaypoint) -> removeWaypoint
    baritone.api.cache.IWaypoint getMostRecentByTag(baritone.api.cache.IWaypoint$Tag) -> getMostRecentByTag
    java.util.Set getByTag(baritone.api.cache.IWaypoint$Tag) -> getByTag
    java.util.Set getAllWaypoints() -> getAllWaypoints
baritone.api.cache.IWorldData -> baritone.api.cache.IWorldData:
    baritone.api.cache.ICachedWorld getCachedWorld() -> getCachedWorld
    baritone.api.cache.IWaypointCollection getWaypoints() -> getWaypoints
baritone.api.cache.IWorldProvider -> baritone.api.cache.IWorldProvider:
    baritone.api.cache.IWorldData getCurrentWorld() -> getCurrentWorld
    void ifWorldLoaded(java.util.function.Consumer) -> ifWorldLoaded
baritone.api.cache.IWorldScanner -> baritone.api.cache.IWorldScanner:
    java.util.List scanChunkRadius(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,int,int,int) -> scanChunkRadius
    java.util.List scanChunkRadius(baritone.api.utils.IPlayerContext,java.util.List,int,int,int) -> scanChunkRadius
    java.util.List scanChunk(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,net.minecraft.world.level.ChunkPos,int,int) -> scanChunk
    java.util.List scanChunk(baritone.api.utils.IPlayerContext,java.util.List,net.minecraft.world.level.ChunkPos,int,int) -> scanChunk
    int repack(baritone.api.utils.IPlayerContext) -> repack
    int repack(baritone.api.utils.IPlayerContext,int) -> repack
baritone.api.cache.Waypoint -> baritone.api.cache.Waypoint:
    java.lang.String name -> name
    baritone.api.cache.IWaypoint$Tag tag -> tag
    long creationTimestamp -> creationTimestamp
    baritone.api.utils.BetterBlockPos location -> location
    void <init>(java.lang.String,baritone.api.cache.IWaypoint$Tag,baritone.api.utils.BetterBlockPos) -> <init>
    void <init>(java.lang.String,baritone.api.cache.IWaypoint$Tag,baritone.api.utils.BetterBlockPos,long) -> <init>
    int hashCode() -> hashCode
    java.lang.String getName() -> getName
    baritone.api.cache.IWaypoint$Tag getTag() -> getTag
    long getCreationTimestamp() -> getCreationTimestamp
    baritone.api.utils.BetterBlockPos getLocation() -> getLocation
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
baritone.api.command.Command -> baritone.api.command.Command:
    baritone.api.IBaritone baritone -> baritone
    baritone.api.utils.IPlayerContext ctx -> ctx
    java.util.List names -> names
    void <init>(baritone.api.IBaritone,java.lang.String[]) -> <init>
    java.util.List getNames() -> getNames
    java.lang.String lambda$new$0(java.lang.String) -> lambda$new$0
baritone.api.command.IBaritoneChatControl -> baritone.api.command.IBaritoneChatControl:
    java.lang.String FORCE_COMMAND_PREFIX -> FORCE_COMMAND_PREFIX
    void <clinit>() -> <clinit>
baritone.api.command.ICommand -> baritone.api.command.ICommand:
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    java.util.List getNames() -> getNames
    boolean hiddenFromHelp() -> hiddenFromHelp
baritone.api.command.ICommandSystem -> baritone.api.command.ICommandSystem:
    baritone.api.command.argparser.IArgParserManager getParserManager() -> getParserManager
baritone.api.command.argparser.IArgParser -> baritone.api.command.argparser.IArgParser:
    java.lang.Class getTarget() -> getTarget
baritone.api.command.argparser.IArgParser$Stated -> baritone.api.command.argparser.IArgParser$Stated:
    java.lang.Class getStateType() -> getStateType
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument,java.lang.Object) -> parseArg
baritone.api.command.argparser.IArgParser$Stateless -> baritone.api.command.argparser.IArgParser$Stateless:
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> parseArg
baritone.api.command.argparser.IArgParserManager -> baritone.api.command.argparser.IArgParserManager:
    baritone.api.command.argparser.IArgParser$Stateless getParserStateless(java.lang.Class) -> getParserStateless
    baritone.api.command.argparser.IArgParser$Stated getParserStated(java.lang.Class,java.lang.Class) -> getParserStated
    java.lang.Object parseStateless(java.lang.Class,baritone.api.command.argument.ICommandArgument) -> parseStateless
    java.lang.Object parseStated(java.lang.Class,java.lang.Class,baritone.api.command.argument.ICommandArgument,java.lang.Object) -> parseStated
    baritone.api.command.registry.Registry getRegistry() -> getRegistry
baritone.api.command.argument.IArgConsumer -> baritone.api.command.argument.IArgConsumer:
    java.util.LinkedList getArgs() -> getArgs
    java.util.Deque getConsumed() -> getConsumed
    boolean has(int) -> has
    boolean hasAny() -> hasAny
    boolean hasAtMost(int) -> hasAtMost
    boolean hasAtMostOne() -> hasAtMostOne
    boolean hasExactly(int) -> hasExactly
    boolean hasExactlyOne() -> hasExactlyOne
    baritone.api.command.argument.ICommandArgument peek(int) -> peek
    baritone.api.command.argument.ICommandArgument peek() -> peek
    boolean is(java.lang.Class,int) -> is
    boolean is(java.lang.Class) -> is
    java.lang.String peekString(int) -> peekString
    java.lang.String peekString() -> peekString
    java.lang.Enum peekEnum(java.lang.Class,int) -> peekEnum
    java.lang.Enum peekEnum(java.lang.Class) -> peekEnum
    java.lang.Enum peekEnumOrNull(java.lang.Class,int) -> peekEnumOrNull
    java.lang.Enum peekEnumOrNull(java.lang.Class) -> peekEnumOrNull
    java.lang.Object peekAs(java.lang.Class,int) -> peekAs
    java.lang.Object peekAs(java.lang.Class) -> peekAs
    java.lang.Object peekAsOrDefault(java.lang.Class,java.lang.Object,int) -> peekAsOrDefault
    java.lang.Object peekAsOrDefault(java.lang.Class,java.lang.Object) -> peekAsOrDefault
    java.lang.Object peekAsOrNull(java.lang.Class,int) -> peekAsOrNull
    java.lang.Object peekAsOrNull(java.lang.Class) -> peekAsOrNull
    java.lang.Object peekDatatype(baritone.api.command.datatypes.IDatatypeFor) -> peekDatatype
    java.lang.Object peekDatatype(baritone.api.command.datatypes.IDatatypePost) -> peekDatatype
    java.lang.Object peekDatatype(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> peekDatatype
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypeFor) -> peekDatatypeOrNull
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypePost) -> peekDatatypeOrNull
    java.lang.Object peekDatatypePost(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> peekDatatypePost
    java.lang.Object peekDatatypePostOrDefault(baritone.api.command.datatypes.IDatatypePost,java.lang.Object,java.lang.Object) -> peekDatatypePostOrDefault
    java.lang.Object peekDatatypePostOrNull(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> peekDatatypePostOrNull
    java.lang.Object peekDatatypeFor(java.lang.Class) -> peekDatatypeFor
    java.lang.Object peekDatatypeForOrDefault(java.lang.Class,java.lang.Object) -> peekDatatypeForOrDefault
    java.lang.Object peekDatatypeForOrNull(java.lang.Class) -> peekDatatypeForOrNull
    baritone.api.command.argument.ICommandArgument get() -> get
    java.lang.String getString() -> getString
    java.lang.Enum getEnum(java.lang.Class) -> getEnum
    java.lang.Enum getEnumOrDefault(java.lang.Class,java.lang.Enum) -> getEnumOrDefault
    java.lang.Enum getEnumOrNull(java.lang.Class) -> getEnumOrNull
    java.lang.Object getAs(java.lang.Class) -> getAs
    java.lang.Object getAsOrDefault(java.lang.Class,java.lang.Object) -> getAsOrDefault
    java.lang.Object getAsOrNull(java.lang.Class) -> getAsOrNull
    java.lang.Object getDatatypePost(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> getDatatypePost
    java.lang.Object getDatatypePostOrDefault(baritone.api.command.datatypes.IDatatypePost,java.lang.Object,java.lang.Object) -> getDatatypePostOrDefault
    java.lang.Object getDatatypePostOrNull(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> getDatatypePostOrNull
    java.lang.Object getDatatypeFor(baritone.api.command.datatypes.IDatatypeFor) -> getDatatypeFor
    java.lang.Object getDatatypeForOrDefault(baritone.api.command.datatypes.IDatatypeFor,java.lang.Object) -> getDatatypeForOrDefault
    java.lang.Object getDatatypeForOrNull(baritone.api.command.datatypes.IDatatypeFor) -> getDatatypeForOrNull
    java.util.stream.Stream tabCompleteDatatype(baritone.api.command.datatypes.IDatatype) -> tabCompleteDatatype
    java.lang.String rawRest() -> rawRest
    void requireMin(int) -> requireMin
    void requireMax(int) -> requireMax
    void requireExactly(int) -> requireExactly
    boolean hasConsumed() -> hasConsumed
    baritone.api.command.argument.ICommandArgument consumed() -> consumed
    java.lang.String consumedString() -> consumedString
    baritone.api.command.argument.IArgConsumer copy() -> copy
baritone.api.command.argument.ICommandArgument -> baritone.api.command.argument.ICommandArgument:
    int getIndex() -> getIndex
    java.lang.String getValue() -> getValue
    java.lang.String getRawRest() -> getRawRest
    java.lang.Enum getEnum(java.lang.Class) -> getEnum
    java.lang.Object getAs(java.lang.Class) -> getAs
    boolean is(java.lang.Class) -> is
    java.lang.Object getAs(java.lang.Class,java.lang.Class,java.lang.Object) -> getAs
    boolean is(java.lang.Class,java.lang.Class,java.lang.Object) -> is
baritone.api.command.datatypes.BlockById -> baritone.api.command.datatypes.BlockById:
    baritone.api.command.datatypes.BlockById INSTANCE -> INSTANCE
    java.util.regex.Pattern PATTERN -> PATTERN
    baritone.api.command.datatypes.BlockById[] $VALUES -> $VALUES
    baritone.api.command.datatypes.BlockById[] values() -> values
    baritone.api.command.datatypes.BlockById valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    net.minecraft.world.level.block.Block get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
    baritone.api.command.datatypes.BlockById[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.EntityClassById -> baritone.api.command.datatypes.EntityClassById:
    baritone.api.command.datatypes.EntityClassById INSTANCE -> INSTANCE
    baritone.api.command.datatypes.EntityClassById[] $VALUES -> $VALUES
    baritone.api.command.datatypes.EntityClassById[] values() -> values
    baritone.api.command.datatypes.EntityClassById valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    net.minecraft.world.entity.EntityType get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
    baritone.api.command.datatypes.EntityClassById[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForAxis -> baritone.api.command.datatypes.ForAxis:
    baritone.api.command.datatypes.ForAxis INSTANCE -> INSTANCE
    baritone.api.command.datatypes.ForAxis[] $VALUES -> $VALUES
    baritone.api.command.datatypes.ForAxis[] values() -> values
    baritone.api.command.datatypes.ForAxis valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    net.minecraft.core.Direction$Axis get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
    baritone.api.command.datatypes.ForAxis[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForBlockOptionalMeta -> baritone.api.command.datatypes.ForBlockOptionalMeta:
    baritone.api.command.datatypes.ForBlockOptionalMeta INSTANCE -> INSTANCE
    java.util.regex.Pattern PATTERN -> PATTERN
    baritone.api.command.datatypes.ForBlockOptionalMeta[] $VALUES -> $VALUES
    baritone.api.command.datatypes.ForBlockOptionalMeta[] values() -> values
    baritone.api.command.datatypes.ForBlockOptionalMeta valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.utils.BlockOptionalMeta get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.String[] splitLast(java.lang.String,char) -> splitLast
    java.util.stream.Stream getValues(net.minecraft.world.level.block.state.properties.Property) -> getValues
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.lang.String lambda$tabComplete$3(java.lang.String,java.lang.String) -> lambda$tabComplete$3
    java.lang.String lambda$tabComplete$2(java.lang.String,java.lang.String) -> lambda$tabComplete$2
    boolean lambda$tabComplete$1(java.util.Set,java.lang.String) -> lambda$tabComplete$1
    java.lang.String lambda$tabComplete$0(java.lang.String) -> lambda$tabComplete$0
    baritone.api.command.datatypes.ForBlockOptionalMeta[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForDirection -> baritone.api.command.datatypes.ForDirection:
    baritone.api.command.datatypes.ForDirection INSTANCE -> INSTANCE
    baritone.api.command.datatypes.ForDirection[] $VALUES -> $VALUES
    baritone.api.command.datatypes.ForDirection[] values() -> values
    baritone.api.command.datatypes.ForDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    net.minecraft.core.Direction get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
    baritone.api.command.datatypes.ForDirection[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForWaypoints -> baritone.api.command.datatypes.ForWaypoints:
    baritone.api.command.datatypes.ForWaypoints INSTANCE -> INSTANCE
    baritone.api.command.datatypes.ForWaypoints[] $VALUES -> $VALUES
    baritone.api.command.datatypes.ForWaypoints[] values() -> values
    baritone.api.command.datatypes.ForWaypoints valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.cache.IWaypoint[] get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    baritone.api.cache.IWaypointCollection waypoints(baritone.api.IBaritone) -> waypoints
    baritone.api.cache.IWaypoint[] getWaypoints(baritone.api.IBaritone) -> getWaypoints
    java.lang.String[] getWaypointNames(baritone.api.IBaritone) -> getWaypointNames
    baritone.api.cache.IWaypoint[] getWaypointsByTag(baritone.api.IBaritone,baritone.api.cache.IWaypoint$Tag) -> getWaypointsByTag
    baritone.api.cache.IWaypoint[] getWaypointsByName(baritone.api.IBaritone,java.lang.String) -> getWaypointsByName
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
    baritone.api.cache.IWaypoint[] lambda$getWaypointsByName$5(int) -> lambda$getWaypointsByName$5
    boolean lambda$getWaypointsByName$4(java.lang.String,baritone.api.cache.IWaypoint) -> lambda$getWaypointsByName$4
    baritone.api.cache.IWaypoint[] lambda$getWaypointsByTag$3(int) -> lambda$getWaypointsByTag$3
    java.lang.String[] lambda$getWaypointNames$2(int) -> lambda$getWaypointNames$2
    boolean lambda$getWaypointNames$1(java.lang.String) -> lambda$getWaypointNames$1
    baritone.api.cache.IWaypoint[] lambda$getWaypoints$0(int) -> lambda$getWaypoints$0
    baritone.api.command.datatypes.ForWaypoints[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.IDatatype -> baritone.api.command.datatypes.IDatatype:
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
baritone.api.command.datatypes.IDatatypeContext -> baritone.api.command.datatypes.IDatatypeContext:
    baritone.api.IBaritone getBaritone() -> getBaritone
    baritone.api.command.argument.IArgConsumer getConsumer() -> getConsumer
baritone.api.command.datatypes.IDatatypeFor -> baritone.api.command.datatypes.IDatatypeFor:
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
baritone.api.command.datatypes.IDatatypePost -> baritone.api.command.datatypes.IDatatypePost:
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
baritone.api.command.datatypes.IDatatypePostFunction -> baritone.api.command.datatypes.IDatatypePostFunction:
    java.lang.Object apply(java.lang.Object) -> apply
baritone.api.command.datatypes.NearbyPlayer -> baritone.api.command.datatypes.NearbyPlayer:
    baritone.api.command.datatypes.NearbyPlayer INSTANCE -> INSTANCE
    baritone.api.command.datatypes.NearbyPlayer[] $VALUES -> $VALUES
    baritone.api.command.datatypes.NearbyPlayer[] values() -> values
    baritone.api.command.datatypes.NearbyPlayer valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    net.minecraft.world.entity.player.Player get(baritone.api.command.datatypes.IDatatypeContext) -> get
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.util.List getPlayers(baritone.api.command.datatypes.IDatatypeContext) -> getPlayers
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> get
    boolean lambda$get$0(java.lang.String,net.minecraft.world.entity.player.Player) -> lambda$get$0
    baritone.api.command.datatypes.NearbyPlayer[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeBlockPos -> baritone.api.command.datatypes.RelativeBlockPos:
    baritone.api.command.datatypes.RelativeBlockPos INSTANCE -> INSTANCE
    baritone.api.command.datatypes.RelativeBlockPos[] $VALUES -> $VALUES
    baritone.api.command.datatypes.RelativeBlockPos[] values() -> values
    baritone.api.command.datatypes.RelativeBlockPos valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.utils.BetterBlockPos apply(baritone.api.command.datatypes.IDatatypeContext,baritone.api.utils.BetterBlockPos) -> apply
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
    baritone.api.command.datatypes.RelativeBlockPos[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeCoordinate -> baritone.api.command.datatypes.RelativeCoordinate:
    baritone.api.command.datatypes.RelativeCoordinate INSTANCE -> INSTANCE
    java.lang.String ScalesAliasRegex -> ScalesAliasRegex
    java.util.regex.Pattern PATTERN -> PATTERN
    baritone.api.command.datatypes.RelativeCoordinate[] $VALUES -> $VALUES
    baritone.api.command.datatypes.RelativeCoordinate[] values() -> values
    baritone.api.command.datatypes.RelativeCoordinate valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.Double apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Double) -> apply
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
    baritone.api.command.datatypes.RelativeCoordinate[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeFile -> baritone.api.command.datatypes.RelativeFile:
    baritone.api.command.datatypes.RelativeFile INSTANCE -> INSTANCE
    baritone.api.command.datatypes.RelativeFile[] $VALUES -> $VALUES
    baritone.api.command.datatypes.RelativeFile[] values() -> values
    baritone.api.command.datatypes.RelativeFile valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.io.File apply(baritone.api.command.datatypes.IDatatypeContext,java.io.File) -> apply
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.io.File getCanonicalFileUnchecked(java.io.File) -> getCanonicalFileUnchecked
    java.util.stream.Stream tabComplete(baritone.api.command.argument.IArgConsumer,java.io.File) -> tabComplete
    java.io.File gameDir() -> gameDir
    java.io.File gameDir(net.minecraft.client.Minecraft) -> gameDir
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
    boolean lambda$tabComplete$2(java.lang.String) -> lambda$tabComplete$2
    boolean lambda$tabComplete$1(java.lang.String,java.lang.String) -> lambda$tabComplete$1
    java.lang.String lambda$tabComplete$0(java.nio.file.Path,java.nio.file.Path,java.io.File) -> lambda$tabComplete$0
    baritone.api.command.datatypes.RelativeFile[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoal -> baritone.api.command.datatypes.RelativeGoal:
    baritone.api.command.datatypes.RelativeGoal INSTANCE -> INSTANCE
    baritone.api.command.datatypes.RelativeGoal[] $VALUES -> $VALUES
    baritone.api.command.datatypes.RelativeGoal[] values() -> values
    baritone.api.command.datatypes.RelativeGoal valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.pathing.goals.Goal apply(baritone.api.command.datatypes.IDatatypeContext,baritone.api.utils.BetterBlockPos) -> apply
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
    baritone.api.command.datatypes.RelativeGoal[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoalBlock -> baritone.api.command.datatypes.RelativeGoalBlock:
    baritone.api.command.datatypes.RelativeGoalBlock INSTANCE -> INSTANCE
    baritone.api.command.datatypes.RelativeGoalBlock[] $VALUES -> $VALUES
    baritone.api.command.datatypes.RelativeGoalBlock[] values() -> values
    baritone.api.command.datatypes.RelativeGoalBlock valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.pathing.goals.GoalBlock apply(baritone.api.command.datatypes.IDatatypeContext,baritone.api.utils.BetterBlockPos) -> apply
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
    baritone.api.command.datatypes.RelativeGoalBlock[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoalXZ -> baritone.api.command.datatypes.RelativeGoalXZ:
    baritone.api.command.datatypes.RelativeGoalXZ INSTANCE -> INSTANCE
    baritone.api.command.datatypes.RelativeGoalXZ[] $VALUES -> $VALUES
    baritone.api.command.datatypes.RelativeGoalXZ[] values() -> values
    baritone.api.command.datatypes.RelativeGoalXZ valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.pathing.goals.GoalXZ apply(baritone.api.command.datatypes.IDatatypeContext,baritone.api.utils.BetterBlockPos) -> apply
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
    baritone.api.command.datatypes.RelativeGoalXZ[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoalYLevel -> baritone.api.command.datatypes.RelativeGoalYLevel:
    baritone.api.command.datatypes.RelativeGoalYLevel INSTANCE -> INSTANCE
    baritone.api.command.datatypes.RelativeGoalYLevel[] $VALUES -> $VALUES
    baritone.api.command.datatypes.RelativeGoalYLevel[] values() -> values
    baritone.api.command.datatypes.RelativeGoalYLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.pathing.goals.GoalYLevel apply(baritone.api.command.datatypes.IDatatypeContext,baritone.api.utils.BetterBlockPos) -> apply
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> tabComplete
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> apply
    baritone.api.command.datatypes.RelativeGoalYLevel[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.command.exception.CommandErrorMessageException -> baritone.api.command.exception.CommandErrorMessageException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
baritone.api.command.exception.CommandException -> baritone.api.command.exception.CommandException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
baritone.api.command.exception.CommandInvalidArgumentException -> baritone.api.command.exception.CommandInvalidArgumentException:
    baritone.api.command.argument.ICommandArgument arg -> arg
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String,java.lang.Throwable) -> <init>
    java.lang.String formatMessage(baritone.api.command.argument.ICommandArgument,java.lang.String) -> formatMessage
baritone.api.command.exception.CommandInvalidStateException -> baritone.api.command.exception.CommandInvalidStateException:
    void <init>(java.lang.String) -> <init>
baritone.api.command.exception.CommandInvalidTypeException -> baritone.api.command.exception.CommandInvalidTypeException:
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String,java.lang.Throwable) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String,java.lang.String) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String,java.lang.String,java.lang.Throwable) -> <init>
baritone.api.command.exception.CommandNoParserForTypeException -> baritone.api.command.exception.CommandNoParserForTypeException:
    void <init>(java.lang.Class) -> <init>
baritone.api.command.exception.CommandNotEnoughArgumentsException -> baritone.api.command.exception.CommandNotEnoughArgumentsException:
    void <init>(int) -> <init>
baritone.api.command.exception.CommandNotFoundException -> baritone.api.command.exception.CommandNotFoundException:
    java.lang.String command -> command
    void <init>(java.lang.String) -> <init>
    void handle(baritone.api.command.ICommand,java.util.List) -> handle
baritone.api.command.exception.CommandTooManyArgumentsException -> baritone.api.command.exception.CommandTooManyArgumentsException:
    void <init>(int) -> <init>
baritone.api.command.exception.CommandUnhandledException -> baritone.api.command.exception.CommandUnhandledException:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void handle(baritone.api.command.ICommand,java.util.List) -> handle
baritone.api.command.exception.ICommandException -> baritone.api.command.exception.ICommandException:
    java.lang.String getMessage() -> getMessage
    void handle(baritone.api.command.ICommand,java.util.List) -> handle
baritone.api.command.helpers.Paginator -> baritone.api.command.helpers.Paginator:
    java.util.List entries -> entries
    int pageSize -> pageSize
    int page -> page
    void <init>(java.util.List) -> <init>
    void <init>(java.lang.Object[]) -> <init>
    baritone.api.command.helpers.Paginator setPageSize(int) -> setPageSize
    int getMaxPage() -> getMaxPage
    boolean validPage(int) -> validPage
    baritone.api.command.helpers.Paginator skipPages(int) -> skipPages
    void display(java.util.function.Function,java.lang.String) -> display
    void display(java.util.function.Function) -> display
    void paginate(baritone.api.command.argument.IArgConsumer,baritone.api.command.helpers.Paginator,java.lang.Runnable,java.util.function.Function,java.lang.String) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.util.List,java.lang.Runnable,java.util.function.Function,java.lang.String) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.lang.Object[],java.lang.Runnable,java.util.function.Function,java.lang.String) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,baritone.api.command.helpers.Paginator,java.util.function.Function,java.lang.String) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.util.List,java.util.function.Function,java.lang.String) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.lang.Object[],java.util.function.Function,java.lang.String) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,baritone.api.command.helpers.Paginator,java.lang.Runnable,java.util.function.Function) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.util.List,java.lang.Runnable,java.util.function.Function) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.lang.Object[],java.lang.Runnable,java.util.function.Function) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,baritone.api.command.helpers.Paginator,java.util.function.Function) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.util.List,java.util.function.Function) -> paginate
    void paginate(baritone.api.command.argument.IArgConsumer,java.lang.Object[],java.util.function.Function) -> paginate
baritone.api.command.helpers.TabCompleteHelper -> baritone.api.command.helpers.TabCompleteHelper:
    java.util.stream.Stream stream -> stream
    void <init>(java.lang.String[]) -> <init>
    void <init>(java.util.List) -> <init>
    void <init>() -> <init>
    baritone.api.command.helpers.TabCompleteHelper append(java.util.stream.Stream) -> append
    baritone.api.command.helpers.TabCompleteHelper append(java.lang.String[]) -> append
    baritone.api.command.helpers.TabCompleteHelper append(java.lang.Class) -> append
    baritone.api.command.helpers.TabCompleteHelper prepend(java.util.stream.Stream) -> prepend
    baritone.api.command.helpers.TabCompleteHelper prepend(java.lang.String[]) -> prepend
    baritone.api.command.helpers.TabCompleteHelper prepend(java.lang.Class) -> prepend
    baritone.api.command.helpers.TabCompleteHelper map(java.util.function.Function) -> map
    baritone.api.command.helpers.TabCompleteHelper filter(java.util.function.Predicate) -> filter
    baritone.api.command.helpers.TabCompleteHelper sort(java.util.Comparator) -> sort
    baritone.api.command.helpers.TabCompleteHelper sortAlphabetically() -> sortAlphabetically
    baritone.api.command.helpers.TabCompleteHelper filterPrefix(java.lang.String) -> filterPrefix
    baritone.api.command.helpers.TabCompleteHelper filterPrefixNamespaced(java.lang.String) -> filterPrefixNamespaced
    java.lang.String[] build() -> build
    java.util.stream.Stream stream() -> stream
    baritone.api.command.helpers.TabCompleteHelper addCommands(baritone.api.command.manager.ICommandManager) -> addCommands
    baritone.api.command.helpers.TabCompleteHelper addSettings() -> addSettings
    baritone.api.command.helpers.TabCompleteHelper addModifiedSettings() -> addModifiedSettings
    baritone.api.command.helpers.TabCompleteHelper addToggleableSettings() -> addToggleableSettings
    boolean lambda$addSettings$3(baritone.api.Settings$Setting) -> lambda$addSettings$3
    java.util.stream.Stream lambda$addCommands$2(baritone.api.command.ICommand) -> lambda$addCommands$2
    java.lang.String[] lambda$build$1(int) -> lambda$build$1
    boolean lambda$filterPrefix$0(java.lang.String,java.lang.String) -> lambda$filterPrefix$0
baritone.api.command.manager.ICommandManager -> baritone.api.command.manager.ICommandManager:
    baritone.api.IBaritone getBaritone() -> getBaritone
    baritone.api.command.registry.Registry getRegistry() -> getRegistry
    baritone.api.command.ICommand getCommand(java.lang.String) -> getCommand
    boolean execute(java.lang.String) -> execute
    boolean execute(net.minecraft.util.Tuple) -> execute
    java.util.stream.Stream tabComplete(net.minecraft.util.Tuple) -> tabComplete
    java.util.stream.Stream tabComplete(java.lang.String) -> tabComplete
baritone.api.command.registry.Registry -> baritone.api.command.registry.Registry:
    java.util.Deque _entries -> _entries
    java.util.Set registered -> registered
    java.util.Collection entries -> entries
    void <init>() -> <init>
    boolean registered(java.lang.Object) -> registered
    boolean register(java.lang.Object) -> register
    void unregister(java.lang.Object) -> unregister
    java.util.Iterator iterator() -> iterator
    java.util.Iterator descendingIterator() -> descendingIterator
    java.util.stream.Stream stream() -> stream
    java.util.stream.Stream descendingStream() -> descendingStream
baritone.api.event.events.BlockChangeEvent -> baritone.api.event.events.BlockChangeEvent:
    net.minecraft.world.level.ChunkPos chunk -> chunk
    java.util.List blocks -> blocks
    void <init>(net.minecraft.world.level.ChunkPos,java.util.List) -> <init>
    net.minecraft.world.level.ChunkPos getChunkPos() -> getChunkPos
    java.util.List getBlocks() -> getBlocks
baritone.api.event.events.BlockInteractEvent -> baritone.api.event.events.BlockInteractEvent:
    net.minecraft.core.BlockPos pos -> pos
    baritone.api.event.events.BlockInteractEvent$Type type -> type
    void <init>(net.minecraft.core.BlockPos,baritone.api.event.events.BlockInteractEvent$Type) -> <init>
    net.minecraft.core.BlockPos getPos() -> getPos
    baritone.api.event.events.BlockInteractEvent$Type getType() -> getType
baritone.api.event.events.BlockInteractEvent$Type -> baritone.api.event.events.BlockInteractEvent$Type:
    baritone.api.event.events.BlockInteractEvent$Type START_BREAK -> START_BREAK
    baritone.api.event.events.BlockInteractEvent$Type USE -> USE
    baritone.api.event.events.BlockInteractEvent$Type[] $VALUES -> $VALUES
    baritone.api.event.events.BlockInteractEvent$Type[] values() -> values
    baritone.api.event.events.BlockInteractEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.event.events.BlockInteractEvent$Type[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.event.events.ChatEvent -> baritone.api.event.events.ChatEvent:
    java.lang.String message -> message
    void <init>(java.lang.String) -> <init>
    java.lang.String getMessage() -> getMessage
baritone.api.event.events.ChunkEvent -> baritone.api.event.events.ChunkEvent:
    baritone.api.event.events.type.EventState state -> state
    baritone.api.event.events.ChunkEvent$Type type -> type
    int x -> x
    int z -> z
    void <init>(baritone.api.event.events.type.EventState,baritone.api.event.events.ChunkEvent$Type,int,int) -> <init>
    baritone.api.event.events.type.EventState getState() -> getState
    baritone.api.event.events.ChunkEvent$Type getType() -> getType
    int getX() -> getX
    int getZ() -> getZ
    boolean isPostPopulate() -> isPostPopulate
baritone.api.event.events.ChunkEvent$Type -> baritone.api.event.events.ChunkEvent$Type:
    baritone.api.event.events.ChunkEvent$Type LOAD -> LOAD
    baritone.api.event.events.ChunkEvent$Type UNLOAD -> UNLOAD
    baritone.api.event.events.ChunkEvent$Type POPULATE_FULL -> POPULATE_FULL
    baritone.api.event.events.ChunkEvent$Type POPULATE_PARTIAL -> POPULATE_PARTIAL
    baritone.api.event.events.ChunkEvent$Type[] $VALUES -> $VALUES
    baritone.api.event.events.ChunkEvent$Type[] values() -> values
    baritone.api.event.events.ChunkEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    boolean isPopulate() -> isPopulate
    baritone.api.event.events.ChunkEvent$Type[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.event.events.PacketEvent -> baritone.api.event.events.PacketEvent:
    net.minecraft.network.Connection networkManager -> networkManager
    baritone.api.event.events.type.EventState state -> state
    net.minecraft.network.protocol.Packet packet -> packet
    void <init>(net.minecraft.network.Connection,baritone.api.event.events.type.EventState,net.minecraft.network.protocol.Packet) -> <init>
    net.minecraft.network.Connection getNetworkManager() -> getNetworkManager
    baritone.api.event.events.type.EventState getState() -> getState
    net.minecraft.network.protocol.Packet getPacket() -> getPacket
    net.minecraft.network.protocol.Packet cast() -> cast
baritone.api.event.events.PathEvent -> baritone.api.event.events.PathEvent:
    baritone.api.event.events.PathEvent CALC_STARTED -> CALC_STARTED
    baritone.api.event.events.PathEvent CALC_FINISHED_NOW_EXECUTING -> CALC_FINISHED_NOW_EXECUTING
    baritone.api.event.events.PathEvent CALC_FAILED -> CALC_FAILED
    baritone.api.event.events.PathEvent NEXT_SEGMENT_CALC_STARTED -> NEXT_SEGMENT_CALC_STARTED
    baritone.api.event.events.PathEvent NEXT_SEGMENT_CALC_FINISHED -> NEXT_SEGMENT_CALC_FINISHED
    baritone.api.event.events.PathEvent CONTINUING_ONTO_PLANNED_NEXT -> CONTINUING_ONTO_PLANNED_NEXT
    baritone.api.event.events.PathEvent SPLICING_ONTO_NEXT_EARLY -> SPLICING_ONTO_NEXT_EARLY
    baritone.api.event.events.PathEvent AT_GOAL -> AT_GOAL
    baritone.api.event.events.PathEvent PATH_FINISHED_NEXT_STILL_CALCULATING -> PATH_FINISHED_NEXT_STILL_CALCULATING
    baritone.api.event.events.PathEvent NEXT_CALC_FAILED -> NEXT_CALC_FAILED
    baritone.api.event.events.PathEvent DISCARD_NEXT -> DISCARD_NEXT
    baritone.api.event.events.PathEvent CANCELED -> CANCELED
    baritone.api.event.events.PathEvent[] $VALUES -> $VALUES
    baritone.api.event.events.PathEvent[] values() -> values
    baritone.api.event.events.PathEvent valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.event.events.PathEvent[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.event.events.PlayerUpdateEvent -> baritone.api.event.events.PlayerUpdateEvent:
    baritone.api.event.events.type.EventState state -> state
    void <init>(baritone.api.event.events.type.EventState) -> <init>
    baritone.api.event.events.type.EventState getState() -> getState
baritone.api.event.events.RenderEvent -> baritone.api.event.events.RenderEvent:
    float partialTicks -> partialTicks
    org.joml.Matrix4f projectionMatrix -> projectionMatrix
    com.mojang.blaze3d.vertex.PoseStack modelViewStack -> modelViewStack
    void <init>(float,com.mojang.blaze3d.vertex.PoseStack,org.joml.Matrix4f) -> <init>
    float getPartialTicks() -> getPartialTicks
    com.mojang.blaze3d.vertex.PoseStack getModelViewStack() -> getModelViewStack
    org.joml.Matrix4f getProjectionMatrix() -> getProjectionMatrix
baritone.api.event.events.RotationMoveEvent -> baritone.api.event.events.RotationMoveEvent:
    baritone.api.event.events.RotationMoveEvent$Type type -> type
    baritone.api.utils.Rotation original -> original
    float yaw -> yaw
    float pitch -> pitch
    void <init>(baritone.api.event.events.RotationMoveEvent$Type,float,float) -> <init>
    baritone.api.utils.Rotation getOriginal() -> getOriginal
    void setYaw(float) -> setYaw
    float getYaw() -> getYaw
    void setPitch(float) -> setPitch
    float getPitch() -> getPitch
    baritone.api.event.events.RotationMoveEvent$Type getType() -> getType
baritone.api.event.events.RotationMoveEvent$Type -> baritone.api.event.events.RotationMoveEvent$Type:
    baritone.api.event.events.RotationMoveEvent$Type MOTION_UPDATE -> MOTION_UPDATE
    baritone.api.event.events.RotationMoveEvent$Type JUMP -> JUMP
    baritone.api.event.events.RotationMoveEvent$Type[] $VALUES -> $VALUES
    baritone.api.event.events.RotationMoveEvent$Type[] values() -> values
    baritone.api.event.events.RotationMoveEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.event.events.RotationMoveEvent$Type[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.event.events.SprintStateEvent -> baritone.api.event.events.SprintStateEvent:
    java.lang.Boolean state -> state
    void <init>() -> <init>
    void setState(boolean) -> setState
    java.lang.Boolean getState() -> getState
baritone.api.event.events.TabCompleteEvent -> baritone.api.event.events.TabCompleteEvent:
    java.lang.String prefix -> prefix
    java.lang.String[] completions -> completions
    void <init>(java.lang.String) -> <init>
baritone.api.event.events.TickEvent -> baritone.api.event.events.TickEvent:
    int overallTickCount -> overallTickCount
    baritone.api.event.events.type.EventState state -> state
    baritone.api.event.events.TickEvent$Type type -> type
    int count -> count
    void <init>(baritone.api.event.events.type.EventState,baritone.api.event.events.TickEvent$Type,int) -> <init>
    int getCount() -> getCount
    baritone.api.event.events.TickEvent$Type getType() -> getType
    baritone.api.event.events.type.EventState getState() -> getState
    java.util.function.BiFunction createNextProvider() -> createNextProvider
    baritone.api.event.events.TickEvent lambda$createNextProvider$0(int,baritone.api.event.events.type.EventState,baritone.api.event.events.TickEvent$Type) -> lambda$createNextProvider$0
baritone.api.event.events.TickEvent$Type -> baritone.api.event.events.TickEvent$Type:
    baritone.api.event.events.TickEvent$Type IN -> IN
    baritone.api.event.events.TickEvent$Type OUT -> OUT
    baritone.api.event.events.TickEvent$Type[] $VALUES -> $VALUES
    baritone.api.event.events.TickEvent$Type[] values() -> values
    baritone.api.event.events.TickEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.event.events.TickEvent$Type[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.event.events.WorldEvent -> baritone.api.event.events.WorldEvent:
    net.minecraft.client.multiplayer.ClientLevel world -> world
    baritone.api.event.events.type.EventState state -> state
    void <init>(net.minecraft.client.multiplayer.ClientLevel,baritone.api.event.events.type.EventState) -> <init>
    net.minecraft.client.multiplayer.ClientLevel getWorld() -> getWorld
    baritone.api.event.events.type.EventState getState() -> getState
baritone.api.event.events.type.Cancellable -> baritone.api.event.events.type.Cancellable:
    boolean cancelled -> cancelled
    void <init>() -> <init>
    void cancel() -> cancel
    boolean isCancelled() -> isCancelled
baritone.api.event.events.type.EventState -> baritone.api.event.events.type.EventState:
    baritone.api.event.events.type.EventState PRE -> PRE
    baritone.api.event.events.type.EventState POST -> POST
    baritone.api.event.events.type.EventState[] $VALUES -> $VALUES
    baritone.api.event.events.type.EventState[] values() -> values
    baritone.api.event.events.type.EventState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.event.events.type.EventState[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.event.events.type.ICancellable -> baritone.api.event.events.type.ICancellable:
    void cancel() -> cancel
    boolean isCancelled() -> isCancelled
baritone.api.event.events.type.Overrideable -> baritone.api.event.events.type.Overrideable:
    java.lang.Object value -> value
    boolean modified -> modified
    void <init>(java.lang.Object) -> <init>
    java.lang.Object get() -> get
    void set(java.lang.Object) -> set
    boolean wasModified() -> wasModified
    java.lang.String toString() -> toString
baritone.api.event.listener.AbstractGameEventListener -> baritone.api.event.listener.AbstractGameEventListener:
    void onTick(baritone.api.event.events.TickEvent) -> onTick
    void onPostTick(baritone.api.event.events.TickEvent) -> onPostTick
    void onPlayerUpdate(baritone.api.event.events.PlayerUpdateEvent) -> onPlayerUpdate
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> onSendChatMessage
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> onPreTabComplete
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> onChunkEvent
    void onBlockChange(baritone.api.event.events.BlockChangeEvent) -> onBlockChange
    void onRenderPass(baritone.api.event.events.RenderEvent) -> onRenderPass
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> onWorldEvent
    void onSendPacket(baritone.api.event.events.PacketEvent) -> onSendPacket
    void onReceivePacket(baritone.api.event.events.PacketEvent) -> onReceivePacket
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> onPlayerRotationMove
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> onPlayerSprintState
    void onBlockInteract(baritone.api.event.events.BlockInteractEvent) -> onBlockInteract
    void onPlayerDeath() -> onPlayerDeath
    void onPathEvent(baritone.api.event.events.PathEvent) -> onPathEvent
baritone.api.event.listener.IEventBus -> baritone.api.event.listener.IEventBus:
    void registerEventListener(baritone.api.event.listener.IGameEventListener) -> registerEventListener
baritone.api.event.listener.IGameEventListener -> baritone.api.event.listener.IGameEventListener:
    void onTick(baritone.api.event.events.TickEvent) -> onTick
    void onPostTick(baritone.api.event.events.TickEvent) -> onPostTick
    void onPlayerUpdate(baritone.api.event.events.PlayerUpdateEvent) -> onPlayerUpdate
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> onSendChatMessage
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> onPreTabComplete
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> onChunkEvent
    void onBlockChange(baritone.api.event.events.BlockChangeEvent) -> onBlockChange
    void onRenderPass(baritone.api.event.events.RenderEvent) -> onRenderPass
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> onWorldEvent
    void onSendPacket(baritone.api.event.events.PacketEvent) -> onSendPacket
    void onReceivePacket(baritone.api.event.events.PacketEvent) -> onReceivePacket
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> onPlayerRotationMove
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> onPlayerSprintState
    void onBlockInteract(baritone.api.event.events.BlockInteractEvent) -> onBlockInteract
    void onPlayerDeath() -> onPlayerDeath
    void onPathEvent(baritone.api.event.events.PathEvent) -> onPathEvent
baritone.api.pathing.calc.IPath -> baritone.api.pathing.calc.IPath:
    java.util.List movements() -> movements
    java.util.List positions() -> positions
    baritone.api.pathing.calc.IPath postProcess() -> postProcess
    int length() -> length
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    int getNumNodesConsidered() -> getNumNodesConsidered
    baritone.api.utils.BetterBlockPos getSrc() -> getSrc
    baritone.api.utils.BetterBlockPos getDest() -> getDest
    double ticksRemainingFrom(int) -> ticksRemainingFrom
    baritone.api.pathing.calc.IPath cutoffAtLoadedChunks(java.lang.Object) -> cutoffAtLoadedChunks
    baritone.api.pathing.calc.IPath staticCutoff(baritone.api.pathing.goals.Goal) -> staticCutoff
    void sanityCheck() -> sanityCheck
baritone.api.pathing.calc.IPathFinder -> baritone.api.pathing.calc.IPathFinder:
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    baritone.api.utils.PathCalculationResult calculate(long,long) -> calculate
    boolean isFinished() -> isFinished
    java.util.Optional pathToMostRecentNodeConsidered() -> pathToMostRecentNodeConsidered
    java.util.Optional bestPathSoFar() -> bestPathSoFar
baritone.api.pathing.calc.IPathingControlManager -> baritone.api.pathing.calc.IPathingControlManager:
    void registerProcess(baritone.api.process.IBaritoneProcess) -> registerProcess
    java.util.Optional mostRecentInControl() -> mostRecentInControl
    java.util.Optional mostRecentCommand() -> mostRecentCommand
baritone.api.pathing.goals.Goal -> baritone.api.pathing.goals.Goal:
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean isInGoal(net.minecraft.core.BlockPos) -> isInGoal
    double heuristic(net.minecraft.core.BlockPos) -> heuristic
    double heuristic() -> heuristic
baritone.api.pathing.goals.GoalAxis -> baritone.api.pathing.goals.GoalAxis:
    double SQRT_2_OVER_2 -> SQRT_2_OVER_2
    void <init>() -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
baritone.api.pathing.goals.GoalBlock -> baritone.api.pathing.goals.GoalBlock:
    int x -> x
    int y -> y
    int z -> z
    void <init>(net.minecraft.core.BlockPos) -> <init>
    void <init>(int,int,int) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    net.minecraft.core.BlockPos getGoalPos() -> getGoalPos
    double calculate(double,int,double) -> calculate
baritone.api.pathing.goals.GoalComposite -> baritone.api.pathing.goals.GoalComposite:
    baritone.api.pathing.goals.Goal[] goals -> goals
    void <init>(baritone.api.pathing.goals.Goal[]) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    double heuristic() -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    baritone.api.pathing.goals.Goal[] goals() -> goals
baritone.api.pathing.goals.GoalGetToBlock -> baritone.api.pathing.goals.GoalGetToBlock:
    int x -> x
    int y -> y
    int z -> z
    void <init>(net.minecraft.core.BlockPos) -> <init>
    net.minecraft.core.BlockPos getGoalPos() -> getGoalPos
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalInverted -> baritone.api.pathing.goals.GoalInverted:
    baritone.api.pathing.goals.Goal origin -> origin
    void <init>(baritone.api.pathing.goals.Goal) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    double heuristic() -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalNear -> baritone.api.pathing.goals.GoalNear:
    int x -> x
    int y -> y
    int z -> z
    int rangeSq -> rangeSq
    void <init>(net.minecraft.core.BlockPos,int) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    double heuristic() -> heuristic
    net.minecraft.core.BlockPos getGoalPos() -> getGoalPos
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalRunAway -> baritone.api.pathing.goals.GoalRunAway:
    net.minecraft.core.BlockPos[] from -> from
    int distanceSq -> distanceSq
    java.lang.Integer maintainY -> maintainY
    void <init>(double,net.minecraft.core.BlockPos[]) -> <init>
    void <init>(double,java.lang.Integer,net.minecraft.core.BlockPos[]) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    double heuristic() -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalStrictDirection -> baritone.api.pathing.goals.GoalStrictDirection:
    int x -> x
    int y -> y
    int z -> z
    int dx -> dx
    int dz -> dz
    void <init>(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    double heuristic() -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalTwoBlocks -> baritone.api.pathing.goals.GoalTwoBlocks:
    int x -> x
    int y -> y
    int z -> z
    void <init>(net.minecraft.core.BlockPos) -> <init>
    void <init>(int,int,int) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    net.minecraft.core.BlockPos getGoalPos() -> getGoalPos
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalXZ -> baritone.api.pathing.goals.GoalXZ:
    double SQRT_2 -> SQRT_2
    int x -> x
    int z -> z
    void <init>(int,int) -> <init>
    void <init>(baritone.api.utils.BetterBlockPos) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double calculate(double,double) -> calculate
    baritone.api.pathing.goals.GoalXZ fromDirection(net.minecraft.world.phys.Vec3,float,double) -> fromDirection
    int getX() -> getX
    int getZ() -> getZ
    void <clinit>() -> <clinit>
baritone.api.pathing.goals.GoalYLevel -> baritone.api.pathing.goals.GoalYLevel:
    int level -> level
    void <init>(int) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    double calculate(int,int) -> calculate
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.movement.ActionCosts -> baritone.api.pathing.movement.ActionCosts:
    double WALK_ONE_BLOCK_COST -> WALK_ONE_BLOCK_COST
    double WALK_ONE_IN_WATER_COST -> WALK_ONE_IN_WATER_COST
    double WALK_ONE_OVER_SOUL_SAND_COST -> WALK_ONE_OVER_SOUL_SAND_COST
    double LADDER_UP_ONE_COST -> LADDER_UP_ONE_COST
    double LADDER_DOWN_ONE_COST -> LADDER_DOWN_ONE_COST
    double SNEAK_ONE_BLOCK_COST -> SNEAK_ONE_BLOCK_COST
    double SPRINT_ONE_BLOCK_COST -> SPRINT_ONE_BLOCK_COST
    double SPRINT_MULTIPLIER -> SPRINT_MULTIPLIER
    double WALK_OFF_BLOCK_COST -> WALK_OFF_BLOCK_COST
    double CENTER_AFTER_FALL_COST -> CENTER_AFTER_FALL_COST
    double COST_INF -> COST_INF
    double[] FALL_N_BLOCKS_COST -> FALL_N_BLOCKS_COST
    double FALL_1_25_BLOCKS_COST -> FALL_1_25_BLOCKS_COST
    double FALL_0_25_BLOCKS_COST -> FALL_0_25_BLOCKS_COST
    double JUMP_ONE_BLOCK_COST -> JUMP_ONE_BLOCK_COST
    double[] generateFallNBlocksCost() -> generateFallNBlocksCost
    double velocity(int) -> velocity
    double oldFormula(double) -> oldFormula
    double distanceToTicks(double) -> distanceToTicks
    void <clinit>() -> <clinit>
baritone.api.pathing.movement.IMovement -> baritone.api.pathing.movement.IMovement:
    double getCost() -> getCost
    baritone.api.pathing.movement.MovementStatus update() -> update
    void reset() -> reset
    void resetBlockCache() -> resetBlockCache
    boolean safeToCancel() -> safeToCancel
    boolean calculatedWhileLoaded() -> calculatedWhileLoaded
    baritone.api.utils.BetterBlockPos getSrc() -> getSrc
    baritone.api.utils.BetterBlockPos getDest() -> getDest
    net.minecraft.core.BlockPos getDirection() -> getDirection
baritone.api.pathing.movement.MovementStatus -> baritone.api.pathing.movement.MovementStatus:
    baritone.api.pathing.movement.MovementStatus PREPPING -> PREPPING
    baritone.api.pathing.movement.MovementStatus WAITING -> WAITING
    baritone.api.pathing.movement.MovementStatus RUNNING -> RUNNING
    baritone.api.pathing.movement.MovementStatus SUCCESS -> SUCCESS
    baritone.api.pathing.movement.MovementStatus UNREACHABLE -> UNREACHABLE
    baritone.api.pathing.movement.MovementStatus FAILED -> FAILED
    baritone.api.pathing.movement.MovementStatus CANCELED -> CANCELED
    boolean complete -> complete
    baritone.api.pathing.movement.MovementStatus[] $VALUES -> $VALUES
    baritone.api.pathing.movement.MovementStatus[] values() -> values
    baritone.api.pathing.movement.MovementStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean) -> <init>
    boolean isComplete() -> isComplete
    baritone.api.pathing.movement.MovementStatus[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.pathing.path.IPathExecutor -> baritone.api.pathing.path.IPathExecutor:
    baritone.api.pathing.calc.IPath getPath() -> getPath
    int getPosition() -> getPosition
baritone.api.process.IBaritoneProcess -> baritone.api.process.IBaritoneProcess:
    double DEFAULT_PRIORITY -> DEFAULT_PRIORITY
    boolean isActive() -> isActive
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    boolean isTemporary() -> isTemporary
    void onLostControl() -> onLostControl
    double priority() -> priority
    java.lang.String displayName() -> displayName
    java.lang.String displayName0() -> displayName0
baritone.api.process.IBuilderProcess -> baritone.api.process.IBuilderProcess:
    void build(java.lang.String,baritone.api.schematic.ISchematic,net.minecraft.core.Vec3i) -> build
    boolean build(java.lang.String,java.io.File,net.minecraft.core.Vec3i) -> build
    boolean build(java.lang.String,net.minecraft.core.BlockPos) -> build
    void buildOpenSchematic() -> buildOpenSchematic
    void buildOpenLitematic(int) -> buildOpenLitematic
    void pause() -> pause
    boolean isPaused() -> isPaused
    void resume() -> resume
    void clearArea(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> clearArea
    java.util.List getApproxPlaceable() -> getApproxPlaceable
baritone.api.process.ICustomGoalProcess -> baritone.api.process.ICustomGoalProcess:
    void setGoal(baritone.api.pathing.goals.Goal) -> setGoal
    void path() -> path
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    baritone.api.pathing.goals.Goal mostRecentGoal() -> mostRecentGoal
    void setGoalAndPath(baritone.api.pathing.goals.Goal) -> setGoalAndPath
baritone.api.process.IElytraProcess -> baritone.api.process.IElytraProcess:
    void repackChunks() -> repackChunks
    net.minecraft.core.BlockPos currentDestination() -> currentDestination
    void pathTo(net.minecraft.core.BlockPos) -> pathTo
    void pathTo(baritone.api.pathing.goals.Goal) -> pathTo
    void resetState() -> resetState
    boolean isLoaded() -> isLoaded
    boolean isSafeToCancel() -> isSafeToCancel
baritone.api.process.IExploreProcess -> baritone.api.process.IExploreProcess:
    void explore(int,int) -> explore
    void applyJsonFilter(java.nio.file.Path,boolean) -> applyJsonFilter
baritone.api.process.IFarmProcess -> baritone.api.process.IFarmProcess:
    void farm(int,net.minecraft.core.BlockPos) -> farm
    void farm() -> farm
    void farm(int) -> farm
baritone.api.process.IFollowProcess -> baritone.api.process.IFollowProcess:
    void follow(java.util.function.Predicate) -> follow
    java.util.List following() -> following
    java.util.function.Predicate currentFilter() -> currentFilter
    void cancel() -> cancel
baritone.api.process.IGetToBlockProcess -> baritone.api.process.IGetToBlockProcess:
    void getToBlock(baritone.api.utils.BlockOptionalMeta) -> getToBlock
    void getToBlock(net.minecraft.world.level.block.Block) -> getToBlock
    boolean blacklistClosest() -> blacklistClosest
baritone.api.process.IMineProcess -> baritone.api.process.IMineProcess:
    void mineByName(int,java.lang.String[]) -> mineByName
    void mine(int,baritone.api.utils.BlockOptionalMetaLookup) -> mine
    void mine(baritone.api.utils.BlockOptionalMetaLookup) -> mine
    void mineByName(java.lang.String[]) -> mineByName
    void mine(int,baritone.api.utils.BlockOptionalMeta[]) -> mine
    void mine(baritone.api.utils.BlockOptionalMeta[]) -> mine
    void mine(int,net.minecraft.world.level.block.Block[]) -> mine
    void mine(net.minecraft.world.level.block.Block[]) -> mine
    void cancel() -> cancel
    baritone.api.utils.BlockOptionalMeta[] lambda$mine$0(int) -> lambda$mine$0
baritone.api.process.PathingCommand -> baritone.api.process.PathingCommand:
    baritone.api.pathing.goals.Goal goal -> goal
    baritone.api.process.PathingCommandType commandType -> commandType
    void <init>(baritone.api.pathing.goals.Goal,baritone.api.process.PathingCommandType) -> <init>
    java.lang.String toString() -> toString
baritone.api.process.PathingCommandType -> baritone.api.process.PathingCommandType:
    baritone.api.process.PathingCommandType SET_GOAL_AND_PATH -> SET_GOAL_AND_PATH
    baritone.api.process.PathingCommandType REQUEST_PAUSE -> REQUEST_PAUSE
    baritone.api.process.PathingCommandType CANCEL_AND_SET_GOAL -> CANCEL_AND_SET_GOAL
    baritone.api.process.PathingCommandType REVALIDATE_GOAL_AND_PATH -> REVALIDATE_GOAL_AND_PATH
    baritone.api.process.PathingCommandType FORCE_REVALIDATE_GOAL_AND_PATH -> FORCE_REVALIDATE_GOAL_AND_PATH
    baritone.api.process.PathingCommandType DEFER -> DEFER
    baritone.api.process.PathingCommandType SET_GOAL_AND_PAUSE -> SET_GOAL_AND_PAUSE
    baritone.api.process.PathingCommandType[] $VALUES -> $VALUES
    baritone.api.process.PathingCommandType[] values() -> values
    baritone.api.process.PathingCommandType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.process.PathingCommandType[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.schematic.AbstractSchematic -> baritone.api.schematic.AbstractSchematic:
    int x -> x
    int y -> y
    int z -> z
    void <init>() -> <init>
    void <init>(int,int,int) -> <init>
    int widthX() -> widthX
    int heightY() -> heightY
    int lengthZ() -> lengthZ
baritone.api.schematic.CompositeSchematic -> baritone.api.schematic.CompositeSchematic:
    java.util.List schematics -> schematics
    baritone.api.schematic.CompositeSchematicEntry[] schematicArr -> schematicArr
    void recalcArr() -> recalcArr
    void <init>(int,int,int) -> <init>
    void put(baritone.api.schematic.ISchematic,int,int,int) -> put
    baritone.api.schematic.CompositeSchematicEntry getSchematic(int,int,int,net.minecraft.world.level.block.state.BlockState) -> getSchematic
    boolean inSchematic(int,int,int,net.minecraft.world.level.block.state.BlockState) -> inSchematic
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
    void reset() -> reset
baritone.api.schematic.CompositeSchematicEntry -> baritone.api.schematic.CompositeSchematicEntry:
    baritone.api.schematic.ISchematic schematic -> schematic
    int x -> x
    int y -> y
    int z -> z
    void <init>(baritone.api.schematic.ISchematic,int,int,int) -> <init>
baritone.api.schematic.FillSchematic -> baritone.api.schematic.FillSchematic:
    baritone.api.utils.BlockOptionalMeta bom -> bom
    void <init>(int,int,int,baritone.api.utils.BlockOptionalMeta) -> <init>
    void <init>(int,int,int,net.minecraft.world.level.block.state.BlockState) -> <init>
    baritone.api.utils.BlockOptionalMeta getBom() -> getBom
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
baritone.api.schematic.ISchematic -> baritone.api.schematic.ISchematic:
    boolean inSchematic(int,int,int,net.minecraft.world.level.block.state.BlockState) -> inSchematic
    int size(net.minecraft.core.Direction$Axis) -> size
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
    void reset() -> reset
    int widthX() -> widthX
    int heightY() -> heightY
    int lengthZ() -> lengthZ
baritone.api.schematic.ISchematic$1 -> baritone.api.schematic.ISchematic$1:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> $SwitchMap$net$minecraft$core$Direction$Axis
    void <clinit>() -> <clinit>
baritone.api.schematic.ISchematicSystem -> baritone.api.schematic.ISchematicSystem:
    baritone.api.command.registry.Registry getRegistry() -> getRegistry
    java.util.Optional getByFile(java.io.File) -> getByFile
baritone.api.schematic.IStaticSchematic -> baritone.api.schematic.IStaticSchematic:
    net.minecraft.world.level.block.state.BlockState getDirect(int,int,int) -> getDirect
    net.minecraft.world.level.block.state.BlockState[] getColumn(int,int) -> getColumn
baritone.api.schematic.MaskSchematic -> baritone.api.schematic.MaskSchematic:
    baritone.api.schematic.ISchematic schematic -> schematic
    void <init>(baritone.api.schematic.ISchematic) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
    boolean inSchematic(int,int,int,net.minecraft.world.level.block.state.BlockState) -> inSchematic
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
    baritone.api.schematic.MaskSchematic create(baritone.api.schematic.ISchematic,baritone.api.schematic.mask.Mask) -> create
baritone.api.schematic.MaskSchematic$1 -> baritone.api.schematic.MaskSchematic$1:
    baritone.api.schematic.mask.Mask val$function -> val$function
    void <init>(baritone.api.schematic.ISchematic,baritone.api.schematic.mask.Mask) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
baritone.api.schematic.ReplaceSchematic -> baritone.api.schematic.ReplaceSchematic:
    baritone.api.utils.BlockOptionalMetaLookup filter -> filter
    java.lang.Boolean[][][] cache -> cache
    void <init>(baritone.api.schematic.ISchematic,baritone.api.utils.BlockOptionalMetaLookup) -> <init>
    void reset() -> reset
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
baritone.api.schematic.ShellSchematic -> baritone.api.schematic.ShellSchematic:
    void <init>(baritone.api.schematic.ISchematic) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
baritone.api.schematic.SubstituteSchematic -> baritone.api.schematic.SubstituteSchematic:
    baritone.api.schematic.ISchematic schematic -> schematic
    java.util.Map substitutions -> substitutions
    java.util.Map blockStateCache -> blockStateCache
    void <init>(baritone.api.schematic.ISchematic,java.util.Map) -> <init>
    boolean inSchematic(int,int,int,net.minecraft.world.level.block.state.BlockState) -> inSchematic
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
    net.minecraft.world.level.block.state.BlockState withBlock(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.Block) -> withBlock
    net.minecraft.world.level.block.state.BlockState copySingleProp(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.properties.Property) -> copySingleProp
    java.util.Map lambda$withBlock$0(net.minecraft.world.level.block.state.BlockState) -> lambda$withBlock$0
baritone.api.schematic.WallsSchematic -> baritone.api.schematic.WallsSchematic:
    void <init>(baritone.api.schematic.ISchematic) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
baritone.api.schematic.format.ISchematicFormat -> baritone.api.schematic.format.ISchematicFormat:
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> parse
    boolean isFileType(java.io.File) -> isFileType
baritone.api.schematic.mask.AbstractMask -> baritone.api.schematic.mask.AbstractMask:
    int widthX -> widthX
    int heightY -> heightY
    int lengthZ -> lengthZ
    void <init>(int,int,int) -> <init>
    int widthX() -> widthX
    int heightY() -> heightY
    int lengthZ() -> lengthZ
baritone.api.schematic.mask.Mask -> baritone.api.schematic.mask.Mask:
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
    int widthX() -> widthX
    int heightY() -> heightY
    int lengthZ() -> lengthZ
    baritone.api.schematic.mask.Mask not() -> not
    baritone.api.schematic.mask.Mask union(baritone.api.schematic.mask.Mask) -> union
    baritone.api.schematic.mask.Mask intersection(baritone.api.schematic.mask.Mask) -> intersection
    baritone.api.schematic.mask.Mask xor(baritone.api.schematic.mask.Mask) -> xor
baritone.api.schematic.mask.PreComputedMask -> baritone.api.schematic.mask.PreComputedMask:
    boolean[][][] mask -> mask
    void <init>(baritone.api.schematic.mask.StaticMask) -> <init>
    boolean partOfMask(int,int,int) -> partOfMask
baritone.api.schematic.mask.StaticMask -> baritone.api.schematic.mask.StaticMask:
    boolean partOfMask(int,int,int) -> partOfMask
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
    baritone.api.schematic.mask.StaticMask not() -> not
    baritone.api.schematic.mask.StaticMask union(baritone.api.schematic.mask.StaticMask) -> union
    baritone.api.schematic.mask.StaticMask intersection(baritone.api.schematic.mask.StaticMask) -> intersection
    baritone.api.schematic.mask.StaticMask xor(baritone.api.schematic.mask.StaticMask) -> xor
    baritone.api.schematic.mask.StaticMask compute() -> compute
    baritone.api.schematic.mask.Mask not() -> not
baritone.api.schematic.mask.operator.BinaryOperatorMask -> baritone.api.schematic.mask.operator.BinaryOperatorMask:
    baritone.api.schematic.mask.Mask a -> a
    baritone.api.schematic.mask.Mask b -> b
    baritone.api.utils.BooleanBinaryOperator operator -> operator
    void <init>(baritone.api.schematic.mask.Mask,baritone.api.schematic.mask.Mask,baritone.api.utils.BooleanBinaryOperator) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
    boolean partOfMask(baritone.api.schematic.mask.Mask,int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
baritone.api.schematic.mask.operator.BinaryOperatorMask$Static -> baritone.api.schematic.mask.operator.BinaryOperatorMask$Static:
    baritone.api.schematic.mask.StaticMask a -> a
    baritone.api.schematic.mask.StaticMask b -> b
    baritone.api.utils.BooleanBinaryOperator operator -> operator
    void <init>(baritone.api.schematic.mask.StaticMask,baritone.api.schematic.mask.StaticMask,baritone.api.utils.BooleanBinaryOperator) -> <init>
    boolean partOfMask(int,int,int) -> partOfMask
    boolean partOfMask(baritone.api.schematic.mask.StaticMask,int,int,int) -> partOfMask
baritone.api.schematic.mask.operator.NotMask -> baritone.api.schematic.mask.operator.NotMask:
    baritone.api.schematic.mask.Mask source -> source
    void <init>(baritone.api.schematic.mask.Mask) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
baritone.api.schematic.mask.operator.NotMask$Static -> baritone.api.schematic.mask.operator.NotMask$Static:
    baritone.api.schematic.mask.StaticMask source -> source
    void <init>(baritone.api.schematic.mask.StaticMask) -> <init>
    boolean partOfMask(int,int,int) -> partOfMask
baritone.api.schematic.mask.shape.CylinderMask -> baritone.api.schematic.mask.shape.CylinderMask:
    double centerA -> centerA
    double centerB -> centerB
    double radiusSqA -> radiusSqA
    double radiusSqB -> radiusSqB
    boolean filled -> filled
    net.minecraft.core.Direction$Axis alignment -> alignment
    void <init>(int,int,int,boolean,net.minecraft.core.Direction$Axis) -> <init>
    boolean partOfMask(int,int,int) -> partOfMask
    boolean outside(double,double) -> outside
    int getA(int,int,net.minecraft.core.Direction$Axis) -> getA
    int getB(int,int,net.minecraft.core.Direction$Axis) -> getB
baritone.api.schematic.mask.shape.SphereMask -> baritone.api.schematic.mask.shape.SphereMask:
    double centerX -> centerX
    double centerY -> centerY
    double centerZ -> centerZ
    double radiusSqX -> radiusSqX
    double radiusSqY -> radiusSqY
    double radiusSqZ -> radiusSqZ
    boolean filled -> filled
    void <init>(int,int,int,boolean) -> <init>
    boolean partOfMask(int,int,int) -> partOfMask
    boolean outside(double,double,double) -> outside
baritone.api.selection.ISelection -> baritone.api.selection.ISelection:
    baritone.api.utils.BetterBlockPos pos1() -> pos1
    baritone.api.utils.BetterBlockPos pos2() -> pos2
    baritone.api.utils.BetterBlockPos min() -> min
    baritone.api.utils.BetterBlockPos max() -> max
    net.minecraft.core.Vec3i size() -> size
    net.minecraft.world.phys.AABB aabb() -> aabb
    baritone.api.selection.ISelection expand(net.minecraft.core.Direction,int) -> expand
    baritone.api.selection.ISelection contract(net.minecraft.core.Direction,int) -> contract
    baritone.api.selection.ISelection shift(net.minecraft.core.Direction,int) -> shift
baritone.api.selection.ISelectionManager -> baritone.api.selection.ISelectionManager:
    baritone.api.selection.ISelection addSelection(baritone.api.selection.ISelection) -> addSelection
    baritone.api.selection.ISelection addSelection(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> addSelection
    baritone.api.selection.ISelection removeSelection(baritone.api.selection.ISelection) -> removeSelection
    baritone.api.selection.ISelection[] removeAllSelections() -> removeAllSelections
    baritone.api.selection.ISelection[] getSelections() -> getSelections
    baritone.api.selection.ISelection getOnlySelection() -> getOnlySelection
    baritone.api.selection.ISelection getLastSelection() -> getLastSelection
    baritone.api.selection.ISelection expand(baritone.api.selection.ISelection,net.minecraft.core.Direction,int) -> expand
    baritone.api.selection.ISelection contract(baritone.api.selection.ISelection,net.minecraft.core.Direction,int) -> contract
    baritone.api.selection.ISelection shift(baritone.api.selection.ISelection,net.minecraft.core.Direction,int) -> shift
baritone.api.utils.BetterBlockPos -> baritone.api.utils.BetterBlockPos:
    int NUM_X_BITS -> NUM_X_BITS
    int NUM_Z_BITS -> NUM_Z_BITS
    int NUM_Y_BITS -> NUM_Y_BITS
    int Y_SHIFT -> Y_SHIFT
    int X_SHIFT -> X_SHIFT
    long X_MASK -> X_MASK
    long Y_MASK -> Y_MASK
    long Z_MASK -> Z_MASK
    baritone.api.utils.BetterBlockPos ORIGIN -> ORIGIN
    int x -> x
    int y -> y
    int z -> z
    void <init>(int,int,int) -> <init>
    void <init>(double,double,double) -> <init>
    void <init>(net.minecraft.core.BlockPos) -> <init>
    baritone.api.utils.BetterBlockPos from(net.minecraft.core.BlockPos) -> from
    int hashCode() -> hashCode
    long longHash(baritone.api.utils.BetterBlockPos) -> longHash
    long longHash(int,int,int) -> longHash
    boolean equals(java.lang.Object) -> equals
    baritone.api.utils.BetterBlockPos above() -> above
    baritone.api.utils.BetterBlockPos above(int) -> above
    baritone.api.utils.BetterBlockPos below() -> below
    baritone.api.utils.BetterBlockPos below(int) -> below
    baritone.api.utils.BetterBlockPos relative(net.minecraft.core.Direction) -> relative
    baritone.api.utils.BetterBlockPos relative(net.minecraft.core.Direction,int) -> relative
    baritone.api.utils.BetterBlockPos north() -> north
    baritone.api.utils.BetterBlockPos north(int) -> north
    baritone.api.utils.BetterBlockPos south() -> south
    baritone.api.utils.BetterBlockPos south(int) -> south
    baritone.api.utils.BetterBlockPos east() -> east
    baritone.api.utils.BetterBlockPos east(int) -> east
    baritone.api.utils.BetterBlockPos west() -> west
    baritone.api.utils.BetterBlockPos west(int) -> west
    double distanceSq(baritone.api.utils.BetterBlockPos) -> distanceSq
    double distanceTo(baritone.api.utils.BetterBlockPos) -> distanceTo
    java.lang.String toString() -> toString
    long serializeToLong(int,int,int) -> serializeToLong
    baritone.api.utils.BetterBlockPos deserializeFromLong(long) -> deserializeFromLong
    net.minecraft.core.BlockPos m_5484_(net.minecraft.core.Direction,int) -> m_5484_
    net.minecraft.core.BlockPos m_121945_(net.minecraft.core.Direction) -> m_121945_
    net.minecraft.core.BlockPos m_122030_(int) -> m_122030_
    net.minecraft.core.BlockPos m_122029_() -> m_122029_
    net.minecraft.core.BlockPos m_122025_(int) -> m_122025_
    net.minecraft.core.BlockPos m_122024_() -> m_122024_
    net.minecraft.core.BlockPos m_122020_(int) -> m_122020_
    net.minecraft.core.BlockPos m_122019_() -> m_122019_
    net.minecraft.core.BlockPos m_122013_(int) -> m_122013_
    net.minecraft.core.BlockPos m_122012_() -> m_122012_
    net.minecraft.core.BlockPos m_6625_(int) -> m_6625_
    net.minecraft.core.BlockPos m_7495_() -> m_7495_
    net.minecraft.core.BlockPos m_6630_(int) -> m_6630_
    net.minecraft.core.BlockPos m_7494_() -> m_7494_
    net.minecraft.core.Vec3i m_7724_(net.minecraft.core.Vec3i) -> m_7724_
    net.minecraft.core.Vec3i m_5487_(net.minecraft.core.Direction$Axis,int) -> m_5487_
    net.minecraft.core.Vec3i m_5484_(net.minecraft.core.Direction,int) -> m_5484_
    net.minecraft.core.Vec3i m_121945_(net.minecraft.core.Direction) -> m_121945_
    net.minecraft.core.Vec3i m_122030_(int) -> m_122030_
    net.minecraft.core.Vec3i m_122029_() -> m_122029_
    net.minecraft.core.Vec3i m_122025_(int) -> m_122025_
    net.minecraft.core.Vec3i m_122024_() -> m_122024_
    net.minecraft.core.Vec3i m_122020_(int) -> m_122020_
    net.minecraft.core.Vec3i m_122019_() -> m_122019_
    net.minecraft.core.Vec3i m_122013_(int) -> m_122013_
    net.minecraft.core.Vec3i m_122012_() -> m_122012_
    net.minecraft.core.Vec3i m_6625_(int) -> m_6625_
    net.minecraft.core.Vec3i m_7495_() -> m_7495_
    net.minecraft.core.Vec3i m_6630_(int) -> m_6630_
    net.minecraft.core.Vec3i m_7494_() -> m_7494_
    net.minecraft.core.Vec3i m_142393_(int) -> m_142393_
    net.minecraft.core.Vec3i m_121996_(net.minecraft.core.Vec3i) -> m_121996_
    net.minecraft.core.Vec3i m_121955_(net.minecraft.core.Vec3i) -> m_121955_
    net.minecraft.core.Vec3i m_7918_(int,int,int) -> m_7918_
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
baritone.api.utils.BlockOptionalMeta -> baritone.api.utils.BlockOptionalMeta:
    java.util.regex.Pattern PATTERN -> PATTERN
    net.minecraft.world.level.block.Block block -> block
    java.lang.String propertiesDescription -> propertiesDescription
    java.util.Set blockstates -> blockstates
    com.google.common.collect.ImmutableSet stateHashes -> stateHashes
    com.google.common.collect.ImmutableSet stackHashes -> stackHashes
    net.minecraft.world.level.storage.loot.LootDataManager lootTables -> lootTables
    java.util.Map drops -> drops
    java.lang.reflect.Method getVanillaServerPack -> getVanillaServerPack
    void <init>(net.minecraft.world.level.block.Block) -> <init>
    void <init>(java.lang.String) -> <init>
    net.minecraft.world.level.block.state.properties.Property castToIProperty(java.lang.Object) -> castToIProperty
    java.util.Map parseProperties(net.minecraft.world.level.block.Block,java.lang.String) -> parseProperties
    java.util.Set getStates(net.minecraft.world.level.block.Block,java.util.Map) -> getStates
    com.google.common.collect.ImmutableSet getStateHashes(java.util.Set) -> getStateHashes
    com.google.common.collect.ImmutableSet getStackHashes(java.util.Set) -> getStackHashes
    net.minecraft.world.level.block.Block getBlock() -> getBlock
    boolean matches(net.minecraft.world.level.block.Block) -> matches
    boolean matches(net.minecraft.world.level.block.state.BlockState) -> matches
    boolean matches(net.minecraft.world.item.ItemStack) -> matches
    java.lang.String toString() -> toString
    net.minecraft.world.level.block.state.BlockState getAnyBlockState() -> getAnyBlockState
    java.util.Set getAllBlockStates() -> getAllBlockStates
    java.util.Set stackHashes() -> stackHashes
    net.minecraft.server.packs.VanillaPackResources getVanillaServerPack() -> getVanillaServerPack
    net.minecraft.world.level.storage.loot.LootDataManager getManager() -> getManager
    java.util.List drops(net.minecraft.world.level.block.Block) -> drops
    java.util.List lambda$drops$10(net.minecraft.world.level.block.Block) -> lambda$drops$10
    void lambda$drops$9(java.util.List,net.minecraft.world.item.ItemStack) -> lambda$drops$9
    boolean lambda$getVanillaServerPack$8(java.lang.reflect.Method) -> lambda$getVanillaServerPack$8
    java.lang.Integer[] lambda$getStackHashes$7(int) -> lambda$getStackHashes$7
    java.lang.Integer lambda$getStackHashes$6(net.minecraft.world.item.ItemStack) -> lambda$getStackHashes$6
    java.util.stream.Stream lambda$getStackHashes$5(net.minecraft.world.level.block.state.BlockState) -> lambda$getStackHashes$5
    net.minecraft.world.item.ItemStack lambda$getStackHashes$4(net.minecraft.world.item.Item) -> lambda$getStackHashes$4
    java.lang.Integer[] lambda$getStateHashes$3(int) -> lambda$getStateHashes$3
    boolean lambda$getStates$2(java.util.Map,net.minecraft.world.level.block.state.BlockState) -> lambda$getStates$2
    boolean lambda$getStates$1(net.minecraft.world.level.block.state.BlockState,java.util.Map$Entry) -> lambda$getStates$1
    java.lang.IllegalArgumentException lambda$parseProperties$0(java.lang.String,net.minecraft.world.level.block.state.properties.Property,net.minecraft.world.level.block.Block) -> lambda$parseProperties$0
    void <clinit>() -> <clinit>
baritone.api.utils.BlockOptionalMeta$ServerLevelStub -> baritone.api.utils.BlockOptionalMeta$ServerLevelStub:
    net.minecraft.client.Minecraft client -> client
    sun.misc.Unsafe unsafe -> unsafe
    boolean $assertionsDisabled -> $assertionsDisabled
    void <init>(net.minecraft.server.MinecraftServer,java.util.concurrent.Executor,net.minecraft.world.level.storage.LevelStorageSource$LevelStorageAccess,net.minecraft.world.level.storage.ServerLevelData,net.minecraft.resources.ResourceKey,net.minecraft.world.level.dimension.LevelStem,net.minecraft.server.level.progress.ChunkProgressListener,boolean,long,java.util.List,boolean,net.minecraft.world.RandomSequences) -> <init>
    net.minecraft.world.flag.FeatureFlagSet m_246046_() -> m_246046_
    baritone.api.utils.BlockOptionalMeta$ServerLevelStub fastCreate() -> fastCreate
    sun.misc.Unsafe getUnsafe() -> getUnsafe
    net.minecraft.world.level.chunk.ChunkSource m_7726_() -> m_7726_
    net.minecraft.world.ticks.LevelTickAccess m_183324_() -> m_183324_
    net.minecraft.world.ticks.LevelTickAccess m_183326_() -> m_183326_
    net.minecraft.world.level.chunk.ChunkAccess m_6325_(int,int) -> m_6325_
    net.minecraft.world.scores.Scoreboard m_6188_() -> m_6188_
    void <clinit>() -> <clinit>
baritone.api.utils.BlockOptionalMetaLookup -> baritone.api.utils.BlockOptionalMetaLookup:
    com.google.common.collect.ImmutableSet blockSet -> blockSet
    com.google.common.collect.ImmutableSet blockStateSet -> blockStateSet
    com.google.common.collect.ImmutableSet stackHashes -> stackHashes
    baritone.api.utils.BlockOptionalMeta[] boms -> boms
    void <init>(baritone.api.utils.BlockOptionalMeta[]) -> <init>
    void <init>(net.minecraft.world.level.block.Block[]) -> <init>
    void <init>(java.util.List) -> <init>
    void <init>(java.lang.String[]) -> <init>
    boolean has(net.minecraft.world.level.block.Block) -> has
    boolean has(net.minecraft.world.level.block.state.BlockState) -> has
    boolean has(net.minecraft.world.item.ItemStack) -> has
    java.util.List blocks() -> blocks
    java.lang.String toString() -> toString
    baritone.api.utils.BlockOptionalMeta[] lambda$new$2(int) -> lambda$new$2
    baritone.api.utils.BlockOptionalMeta[] lambda$new$1(int) -> lambda$new$1
    baritone.api.utils.BlockOptionalMeta[] lambda$new$0(int) -> lambda$new$0
baritone.api.utils.BlockUtils -> baritone.api.utils.BlockUtils:
    java.util.Map resourceCache -> resourceCache
    java.lang.String blockToString(net.minecraft.world.level.block.Block) -> blockToString
    net.minecraft.world.level.block.Block stringToBlockRequired(java.lang.String) -> stringToBlockRequired
    net.minecraft.world.level.block.Block stringToBlockNullable(java.lang.String) -> stringToBlockNullable
    void <init>() -> <init>
    void <clinit>() -> <clinit>
baritone.api.utils.BooleanBinaryOperator -> baritone.api.utils.BooleanBinaryOperator:
    boolean applyAsBoolean(boolean,boolean) -> applyAsBoolean
baritone.api.utils.BooleanBinaryOperators -> baritone.api.utils.BooleanBinaryOperators:
    baritone.api.utils.BooleanBinaryOperators OR -> OR
    baritone.api.utils.BooleanBinaryOperators AND -> AND
    baritone.api.utils.BooleanBinaryOperators XOR -> XOR
    baritone.api.utils.BooleanBinaryOperator op -> op
    baritone.api.utils.BooleanBinaryOperators[] $VALUES -> $VALUES
    baritone.api.utils.BooleanBinaryOperators[] values() -> values
    baritone.api.utils.BooleanBinaryOperators valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,baritone.api.utils.BooleanBinaryOperator) -> <init>
    boolean applyAsBoolean(boolean,boolean) -> applyAsBoolean
    boolean lambda$static$2(boolean,boolean) -> lambda$static$2
    boolean lambda$static$1(boolean,boolean) -> lambda$static$1
    boolean lambda$static$0(boolean,boolean) -> lambda$static$0
    baritone.api.utils.BooleanBinaryOperators[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.utils.Helper -> baritone.api.utils.Helper:
    baritone.api.utils.Helper HELPER -> HELPER
    net.minecraft.client.Minecraft mc -> mc
    net.minecraft.client.GuiMessageTag MESSAGE_TAG -> MESSAGE_TAG
    net.minecraft.network.chat.Component getPrefix() -> getPrefix
    void logToast(net.minecraft.network.chat.Component,net.minecraft.network.chat.Component) -> logToast
    void logToast(java.lang.String,java.lang.String) -> logToast
    void logToast(java.lang.String) -> logToast
    void logNotification(java.lang.String) -> logNotification
    void logNotification(java.lang.String,boolean) -> logNotification
    void logNotificationDirect(java.lang.String) -> logNotificationDirect
    void logNotificationDirect(java.lang.String,boolean) -> logNotificationDirect
    void logDebug(java.lang.String) -> logDebug
    void logDirect(boolean,net.minecraft.network.chat.Component[]) -> logDirect
    void logDirect(net.minecraft.network.chat.Component[]) -> logDirect
    void logDirect(java.lang.String,net.minecraft.ChatFormatting,boolean) -> logDirect
    void logDirect(java.lang.String,net.minecraft.ChatFormatting) -> logDirect
    void logDirect(java.lang.String,boolean) -> logDirect
    void logDirect(java.lang.String) -> logDirect
    void logUnhandledException(java.lang.Throwable) -> logUnhandledException
    void lambda$logDirect$3(net.minecraft.ChatFormatting,boolean,java.lang.String) -> lambda$logDirect$3
    void lambda$logDirect$2(net.minecraft.network.chat.MutableComponent) -> lambda$logDirect$2
    void lambda$logNotificationDirect$1(java.lang.String,boolean) -> lambda$logNotificationDirect$1
    void lambda$logToast$0(net.minecraft.network.chat.Component,net.minecraft.network.chat.Component) -> lambda$logToast$0
    void <clinit>() -> <clinit>
baritone.api.utils.Helper$1 -> baritone.api.utils.Helper$1:
    void <init>() -> <init>
baritone.api.utils.IInputOverrideHandler -> baritone.api.utils.IInputOverrideHandler:
    boolean isInputForcedDown(baritone.api.utils.input.Input) -> isInputForcedDown
    void setInputForceState(baritone.api.utils.input.Input,boolean) -> setInputForceState
    void clearAllKeys() -> clearAllKeys
baritone.api.utils.IPlayerContext -> baritone.api.utils.IPlayerContext:
    net.minecraft.client.Minecraft minecraft() -> minecraft
    net.minecraft.client.player.LocalPlayer player() -> player
    baritone.api.utils.IPlayerController playerController() -> playerController
    net.minecraft.world.level.Level world() -> world
    java.lang.Iterable entities() -> entities
    java.util.stream.Stream entitiesStream() -> entitiesStream
    baritone.api.cache.IWorldData worldData() -> worldData
    net.minecraft.world.phys.HitResult objectMouseOver() -> objectMouseOver
    baritone.api.utils.BetterBlockPos playerFeet() -> playerFeet
    net.minecraft.world.phys.Vec3 playerFeetAsVec() -> playerFeetAsVec
    net.minecraft.world.phys.Vec3 playerHead() -> playerHead
    net.minecraft.world.phys.Vec3 playerMotion() -> playerMotion
    baritone.api.utils.BetterBlockPos viewerPos() -> viewerPos
    baritone.api.utils.Rotation playerRotations() -> playerRotations
    double eyeHeight(boolean) -> eyeHeight
    java.util.Optional getSelectedBlock() -> getSelectedBlock
    boolean isLookingAt(net.minecraft.core.BlockPos) -> isLookingAt
baritone.api.utils.IPlayerController -> baritone.api.utils.IPlayerController:
    void syncHeldItem() -> syncHeldItem
    boolean hasBrokenBlock() -> hasBrokenBlock
    boolean onPlayerDamageBlock(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> onPlayerDamageBlock
    void resetBlockRemoving() -> resetBlockRemoving
    void windowClick(int,int,int,net.minecraft.world.inventory.ClickType,net.minecraft.world.entity.player.Player) -> windowClick
    net.minecraft.world.level.GameType getGameType() -> getGameType
    net.minecraft.world.InteractionResult processRightClickBlock(net.minecraft.client.player.LocalPlayer,net.minecraft.world.level.Level,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> processRightClickBlock
    net.minecraft.world.InteractionResult processRightClick(net.minecraft.client.player.LocalPlayer,net.minecraft.world.level.Level,net.minecraft.world.InteractionHand) -> processRightClick
    boolean clickBlock(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> clickBlock
    void setHittingBlock(boolean) -> setHittingBlock
    double getBlockReachDistance() -> getBlockReachDistance
baritone.api.utils.MyChunkPos -> baritone.api.utils.MyChunkPos:
    int x -> x
    int z -> z
    void <init>() -> <init>
    java.lang.String toString() -> toString
baritone.api.utils.NotificationHelper -> baritone.api.utils.NotificationHelper:
    java.awt.TrayIcon trayIcon -> trayIcon
    void <init>() -> <init>
    void notify(java.lang.String,boolean) -> notify
    void windows(java.lang.String,boolean) -> windows
    void mac(java.lang.String) -> mac
    void linux(java.lang.String) -> linux
baritone.api.utils.Pair -> baritone.api.utils.Pair:
    java.lang.Object a -> a
    java.lang.Object b -> b
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object first() -> first
    java.lang.Object second() -> second
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
baritone.api.utils.PathCalculationResult -> baritone.api.utils.PathCalculationResult:
    baritone.api.pathing.calc.IPath path -> path
    baritone.api.utils.PathCalculationResult$Type type -> type
    void <init>(baritone.api.utils.PathCalculationResult$Type) -> <init>
    void <init>(baritone.api.utils.PathCalculationResult$Type,baritone.api.pathing.calc.IPath) -> <init>
    java.util.Optional getPath() -> getPath
    baritone.api.utils.PathCalculationResult$Type getType() -> getType
baritone.api.utils.PathCalculationResult$Type -> baritone.api.utils.PathCalculationResult$Type:
    baritone.api.utils.PathCalculationResult$Type SUCCESS_TO_GOAL -> SUCCESS_TO_GOAL
    baritone.api.utils.PathCalculationResult$Type SUCCESS_SEGMENT -> SUCCESS_SEGMENT
    baritone.api.utils.PathCalculationResult$Type FAILURE -> FAILURE
    baritone.api.utils.PathCalculationResult$Type CANCELLATION -> CANCELLATION
    baritone.api.utils.PathCalculationResult$Type EXCEPTION -> EXCEPTION
    baritone.api.utils.PathCalculationResult$Type[] $VALUES -> $VALUES
    baritone.api.utils.PathCalculationResult$Type[] values() -> values
    baritone.api.utils.PathCalculationResult$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.utils.PathCalculationResult$Type[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.utils.RayTraceUtils -> baritone.api.utils.RayTraceUtils:
    void <init>() -> <init>
    net.minecraft.world.phys.HitResult rayTraceTowards(net.minecraft.world.entity.Entity,baritone.api.utils.Rotation,double) -> rayTraceTowards
    net.minecraft.world.phys.HitResult rayTraceTowards(net.minecraft.world.entity.Entity,baritone.api.utils.Rotation,double,boolean) -> rayTraceTowards
    net.minecraft.world.phys.Vec3 inferSneakingEyePosition(net.minecraft.world.entity.Entity) -> inferSneakingEyePosition
baritone.api.utils.Rotation -> baritone.api.utils.Rotation:
    float yaw -> yaw
    float pitch -> pitch
    void <init>(float,float) -> <init>
    float getYaw() -> getYaw
    float getPitch() -> getPitch
    baritone.api.utils.Rotation add(baritone.api.utils.Rotation) -> add
    baritone.api.utils.Rotation subtract(baritone.api.utils.Rotation) -> subtract
    baritone.api.utils.Rotation clamp() -> clamp
    baritone.api.utils.Rotation normalize() -> normalize
    baritone.api.utils.Rotation normalizeAndClamp() -> normalizeAndClamp
    baritone.api.utils.Rotation withPitch(float) -> withPitch
    boolean isReallyCloseTo(baritone.api.utils.Rotation) -> isReallyCloseTo
    boolean yawIsReallyClose(baritone.api.utils.Rotation) -> yawIsReallyClose
    float clampPitch(float) -> clampPitch
    float normalizeYaw(float) -> normalizeYaw
    java.lang.String toString() -> toString
baritone.api.utils.RotationUtils -> baritone.api.utils.RotationUtils:
    double DEG_TO_RAD -> DEG_TO_RAD
    float DEG_TO_RAD_F -> DEG_TO_RAD_F
    double RAD_TO_DEG -> RAD_TO_DEG
    float RAD_TO_DEG_F -> RAD_TO_DEG_F
    net.minecraft.world.phys.Vec3[] BLOCK_SIDE_MULTIPLIERS -> BLOCK_SIDE_MULTIPLIERS
    void <init>() -> <init>
    baritone.api.utils.Rotation calcRotationFromCoords(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> calcRotationFromCoords
    baritone.api.utils.Rotation wrapAnglesToRelative(baritone.api.utils.Rotation,baritone.api.utils.Rotation) -> wrapAnglesToRelative
    baritone.api.utils.Rotation calcRotationFromVec3d(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,baritone.api.utils.Rotation) -> calcRotationFromVec3d
    baritone.api.utils.Rotation calcRotationFromVec3d(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> calcRotationFromVec3d
    net.minecraft.world.phys.Vec3 calcLookDirectionFromRotation(baritone.api.utils.Rotation) -> calcLookDirectionFromRotation
    net.minecraft.world.phys.Vec3 calcVec3dFromRotation(baritone.api.utils.Rotation) -> calcVec3dFromRotation
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> reachable
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos,boolean) -> reachable
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos,double) -> reachable
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos,double,boolean) -> reachable
    java.util.Optional reachableOffset(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos,net.minecraft.world.phys.Vec3,double,boolean) -> reachableOffset
    java.util.Optional reachableCenter(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos,double,boolean) -> reachableCenter
    java.util.Optional reachable(net.minecraft.client.player.LocalPlayer,net.minecraft.core.BlockPos,double) -> reachable
    java.util.Optional reachable(net.minecraft.client.player.LocalPlayer,net.minecraft.core.BlockPos,double,boolean) -> reachable
    java.util.Optional reachableOffset(net.minecraft.world.entity.Entity,net.minecraft.core.BlockPos,net.minecraft.world.phys.Vec3,double,boolean) -> reachableOffset
    java.util.Optional reachableCenter(net.minecraft.world.entity.Entity,net.minecraft.core.BlockPos,double,boolean) -> reachableCenter
    void <clinit>() -> <clinit>
baritone.api.utils.SettingsUtil -> baritone.api.utils.SettingsUtil:
    java.lang.String SETTINGS_DEFAULT_NAME -> SETTINGS_DEFAULT_NAME
    java.util.regex.Pattern SETTING_PATTERN -> SETTING_PATTERN
    void <init>() -> <init>
    boolean isComment(java.lang.String) -> isComment
    void forEachLine(java.nio.file.Path,java.util.function.Consumer) -> forEachLine
    void readAndApply(baritone.api.Settings,java.lang.String) -> readAndApply
    void save(baritone.api.Settings) -> save
    java.nio.file.Path settingsByName(java.lang.String) -> settingsByName
    java.util.List modifiedSettings(baritone.api.Settings) -> modifiedSettings
    java.lang.String settingTypeToString(baritone.api.Settings$Setting) -> settingTypeToString
    java.lang.String settingValueToString(baritone.api.Settings$Setting,java.lang.Object) -> settingValueToString
    java.lang.String settingValueToString(baritone.api.Settings$Setting) -> settingValueToString
    java.lang.String settingDefaultToString(baritone.api.Settings$Setting) -> settingDefaultToString
    java.lang.String maybeCensor(int) -> maybeCensor
    java.lang.String settingToString(baritone.api.Settings$Setting) -> settingToString
    boolean javaOnlySetting(baritone.api.Settings$Setting) -> javaOnlySetting
    void parseAndApply(baritone.api.Settings,java.lang.String,java.lang.String) -> parseAndApply
    void lambda$readAndApply$0(baritone.api.Settings,java.lang.String) -> lambda$readAndApply$0
    void <clinit>() -> <clinit>
baritone.api.utils.SettingsUtil$ISettingParser -> baritone.api.utils.SettingsUtil$ISettingParser:
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> parse
    java.lang.String toString(baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> toString
    boolean accepts(java.lang.reflect.Type) -> accepts
baritone.api.utils.SettingsUtil$Parser -> baritone.api.utils.SettingsUtil$Parser:
    baritone.api.utils.SettingsUtil$Parser DOUBLE -> DOUBLE
    baritone.api.utils.SettingsUtil$Parser BOOLEAN -> BOOLEAN
    baritone.api.utils.SettingsUtil$Parser INTEGER -> INTEGER
    baritone.api.utils.SettingsUtil$Parser FLOAT -> FLOAT
    baritone.api.utils.SettingsUtil$Parser LONG -> LONG
    baritone.api.utils.SettingsUtil$Parser STRING -> STRING
    baritone.api.utils.SettingsUtil$Parser DIRECTION -> DIRECTION
    baritone.api.utils.SettingsUtil$Parser COLOR -> COLOR
    baritone.api.utils.SettingsUtil$Parser VEC3I -> VEC3I
    baritone.api.utils.SettingsUtil$Parser BLOCK -> BLOCK
    baritone.api.utils.SettingsUtil$Parser ITEM -> ITEM
    baritone.api.utils.SettingsUtil$Parser LIST -> LIST
    baritone.api.utils.SettingsUtil$Parser MAPPING -> MAPPING
    java.lang.Class cla$$ -> cla$$
    java.util.function.Function parser -> parser
    java.util.function.Function toString -> toString
    baritone.api.utils.SettingsUtil$Parser[] $VALUES -> $VALUES
    baritone.api.utils.SettingsUtil$Parser[] values() -> values
    baritone.api.utils.SettingsUtil$Parser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,java.lang.Class,java.util.function.Function) -> <init>
    void <init>(java.lang.String,int,java.lang.Class,java.util.function.Function,java.util.function.Function) -> <init>
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> parse
    java.lang.String toString(baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> toString
    boolean accepts(java.lang.reflect.Type) -> accepts
    baritone.api.utils.SettingsUtil$Parser getParser(java.lang.reflect.Type) -> getParser
    boolean lambda$getParser$8(java.lang.reflect.Type,baritone.api.utils.SettingsUtil$Parser) -> lambda$getParser$8
    java.lang.String lambda$new$7(java.util.function.Function,java.lang.Object) -> lambda$new$7
    java.lang.String lambda$static$6(net.minecraft.world.item.Item) -> lambda$static$6
    net.minecraft.world.item.Item lambda$static$5(java.lang.String) -> lambda$static$5
    net.minecraft.world.level.block.Block lambda$static$4(java.lang.String) -> lambda$static$4
    java.lang.String lambda$static$3(net.minecraft.core.Vec3i) -> lambda$static$3
    net.minecraft.core.Vec3i lambda$static$2(java.lang.String) -> lambda$static$2
    java.lang.String lambda$static$1(java.awt.Color) -> lambda$static$1
    java.awt.Color lambda$static$0(java.lang.String) -> lambda$static$0
    baritone.api.utils.SettingsUtil$Parser[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.utils.SettingsUtil$Parser$1 -> baritone.api.utils.SettingsUtil$Parser$1:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> parse
    java.lang.String toString(baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> toString
    boolean accepts(java.lang.reflect.Type) -> accepts
    java.lang.String lambda$toString$1(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> lambda$toString$1
    java.lang.Object lambda$parse$0(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> lambda$parse$0
baritone.api.utils.SettingsUtil$Parser$2 -> baritone.api.utils.SettingsUtil$Parser$2:
    void <init>(java.lang.String,int) -> <init>
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> parse
    java.lang.String toString(baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> toString
    boolean accepts(java.lang.reflect.Type) -> accepts
    java.lang.String lambda$toString$3(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,baritone.api.utils.SettingsUtil$Parser,java.util.Map$Entry) -> lambda$toString$3
    java.lang.Object lambda$parse$2(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.String[]) -> lambda$parse$2
    java.lang.Object lambda$parse$1(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.String[]) -> lambda$parse$1
    java.lang.String[] lambda$parse$0(java.lang.String) -> lambda$parse$0
baritone.api.utils.SettingsUtil$ParserContext -> baritone.api.utils.SettingsUtil$ParserContext:
    baritone.api.Settings$Setting setting -> setting
    void <init>(baritone.api.Settings$Setting) -> <init>
    baritone.api.Settings$Setting getSetting() -> getSetting
baritone.api.utils.TypeUtils -> baritone.api.utils.TypeUtils:
    void <init>() -> <init>
    java.lang.Class resolveBaseClass(java.lang.reflect.Type) -> resolveBaseClass
baritone.api.utils.VecUtils -> baritone.api.utils.VecUtils:
    void <init>() -> <init>
    net.minecraft.world.phys.Vec3 calculateBlockCenter(net.minecraft.world.level.Level,net.minecraft.core.BlockPos) -> calculateBlockCenter
    net.minecraft.world.phys.Vec3 getBlockPosCenter(net.minecraft.core.BlockPos) -> getBlockPosCenter
    double distanceToCenter(net.minecraft.core.BlockPos,double,double,double) -> distanceToCenter
    double entityDistanceToCenter(net.minecraft.world.entity.Entity,net.minecraft.core.BlockPos) -> entityDistanceToCenter
    double entityFlatDistanceToCenter(net.minecraft.world.entity.Entity,net.minecraft.core.BlockPos) -> entityFlatDistanceToCenter
baritone.api.utils.accessor.IItemStack -> baritone.api.utils.accessor.IItemStack:
    int getBaritoneHash() -> getBaritoneHash
baritone.api.utils.gui.BaritoneToast -> baritone.api.utils.gui.BaritoneToast:
    java.lang.String title -> title
    java.lang.String subtitle -> subtitle
    long firstDrawTime -> firstDrawTime
    boolean newDisplay -> newDisplay
    long totalShowTime -> totalShowTime
    void <init>(net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,long) -> <init>
    net.minecraft.client.gui.components.toasts.Toast$Visibility m_7172_(net.minecraft.client.gui.GuiGraphics,net.minecraft.client.gui.components.toasts.ToastComponent,long) -> m_7172_
    void setDisplayedText(net.minecraft.network.chat.Component,net.minecraft.network.chat.Component) -> setDisplayedText
    void addOrUpdate(net.minecraft.client.gui.components.toasts.ToastComponent,net.minecraft.network.chat.Component,net.minecraft.network.chat.Component,long) -> addOrUpdate
    void addOrUpdate(net.minecraft.network.chat.Component,net.minecraft.network.chat.Component) -> addOrUpdate
baritone.api.utils.input.Input -> baritone.api.utils.input.Input:
    baritone.api.utils.input.Input MOVE_FORWARD -> MOVE_FORWARD
    baritone.api.utils.input.Input MOVE_BACK -> MOVE_BACK
    baritone.api.utils.input.Input MOVE_LEFT -> MOVE_LEFT
    baritone.api.utils.input.Input MOVE_RIGHT -> MOVE_RIGHT
    baritone.api.utils.input.Input CLICK_LEFT -> CLICK_LEFT
    baritone.api.utils.input.Input CLICK_RIGHT -> CLICK_RIGHT
    baritone.api.utils.input.Input JUMP -> JUMP
    baritone.api.utils.input.Input SNEAK -> SNEAK
    baritone.api.utils.input.Input SPRINT -> SPRINT
    baritone.api.utils.input.Input[] $VALUES -> $VALUES
    baritone.api.utils.input.Input[] values() -> values
    baritone.api.utils.input.Input valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.api.utils.input.Input[] $values() -> $values
    void <clinit>() -> <clinit>
baritone.api.utils.interfaces.IGoalRenderPos -> baritone.api.utils.interfaces.IGoalRenderPos:
    net.minecraft.core.BlockPos getGoalPos() -> getGoalPos
baritone.behavior.Behavior -> baritone.c:
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    void <init>(baritone.Baritone) -> <init>
baritone.behavior.InventoryBehavior -> baritone.d:
    int ticksSinceLastInventoryMove -> a
    int[] lastTickRequestedMove -> a
    void <init>(baritone.Baritone) -> <init>
    void onTick(baritone.api.event.events.TickEvent) -> onTick
    boolean attemptToPutOnHotbar(int,java.util.function.Predicate) -> a
    boolean requestSwapWithHotBar(int,int) -> a
    int firstValidThrowaway() -> a
    boolean hasGenericThrowaway() -> a
    boolean selectThrowawayForLocation(boolean,int,int,int) -> a
    boolean throwaway(boolean,java.util.function.Predicate) -> a
    boolean throwaway(boolean,java.util.function.Predicate,boolean) -> a
    boolean lambda$selectThrowawayForLocation$3(net.minecraft.world.item.Item,net.minecraft.world.item.ItemStack) -> a
    boolean lambda$selectThrowawayForLocation$2(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.ItemStack) -> a
    boolean lambda$selectThrowawayForLocation$1(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.item.ItemStack) -> b
    boolean lambda$hasGenericThrowaway$0(net.minecraft.world.item.Item,net.minecraft.world.item.ItemStack) -> b
baritone.behavior.InventoryBehavior$1 -> baritone.e:
    void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.BlockHitResult) -> <init>
baritone.behavior.LookBehavior -> baritone.f:
    baritone.behavior.LookBehavior$Target target -> a
    baritone.api.utils.Rotation serverRotation -> a
    baritone.api.utils.Rotation prevRotation -> b
    baritone.behavior.LookBehavior$AimProcessor processor -> a
    java.util.Deque smoothYawBuffer -> a
    java.util.Deque smoothPitchBuffer -> b
    void <init>(baritone.Baritone) -> <init>
    void updateTarget(baritone.api.utils.Rotation,boolean) -> updateTarget
    baritone.api.behavior.look.IAimProcessor getAimProcessor() -> getAimProcessor
    void onTick(baritone.api.event.events.TickEvent) -> onTick
    void onPlayerUpdate(baritone.api.event.events.PlayerUpdateEvent) -> onPlayerUpdate
    void onSendPacket(baritone.api.event.events.PacketEvent) -> onSendPacket
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> onWorldEvent
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> onPlayerRotationMove
    double lambda$onPlayerUpdate$1(java.lang.Float) -> a
    double lambda$onPlayerUpdate$0(java.lang.Float) -> b
baritone.behavior.LookBehavior$1 -> baritone.g:
    int[] $SwitchMap$baritone$api$event$events$type$EventState -> a
    void <clinit>() -> <clinit>
baritone.behavior.LookBehavior$AbstractAimProcessor -> baritone.f$a:
    baritone.api.utils.IPlayerContext ctx -> a
    baritone.behavior.look.ForkableRandom rand -> a
    double randomYawOffset -> a
    double randomPitchOffset -> b
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    void <init>(baritone.behavior.LookBehavior$AbstractAimProcessor) -> <init>
    baritone.api.utils.Rotation peekRotation(baritone.api.utils.Rotation) -> peekRotation
    void tick() -> tick
    void advance(int) -> advance
    baritone.api.utils.Rotation nextRotation(baritone.api.utils.Rotation) -> nextRotation
    baritone.api.behavior.look.ITickableAimProcessor fork() -> fork
    baritone.api.utils.Rotation getPrevRotation() -> a
    float calculateMouseMove(float,float) -> a
    double angleToMouse(float) -> a
    float mouseToAngle(double) -> a
baritone.behavior.LookBehavior$AbstractAimProcessor$1 -> baritone.h:
    baritone.api.utils.Rotation prev -> a
    baritone.behavior.LookBehavior$AbstractAimProcessor this$0 -> a
    void <init>(baritone.behavior.LookBehavior$AbstractAimProcessor,baritone.behavior.LookBehavior$AbstractAimProcessor) -> <init>
    baritone.api.utils.Rotation nextRotation(baritone.api.utils.Rotation) -> nextRotation
    baritone.api.utils.Rotation getPrevRotation() -> a
baritone.behavior.LookBehavior$AimProcessor -> baritone.f$b:
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    baritone.api.utils.Rotation getPrevRotation() -> a
baritone.behavior.LookBehavior$Target -> baritone.f$c:
    baritone.api.utils.Rotation rotation -> a
    baritone.behavior.LookBehavior$Target$Mode mode -> a
    void <init>(baritone.api.utils.Rotation,baritone.behavior.LookBehavior$Target$Mode) -> <init>
baritone.behavior.LookBehavior$Target$Mode -> baritone.f$c$a:
    baritone.behavior.LookBehavior$Target$Mode CLIENT -> c
    baritone.behavior.LookBehavior$Target$Mode SERVER -> a
    baritone.behavior.LookBehavior$Target$Mode NONE -> b
    baritone.behavior.LookBehavior$Target$Mode[] $VALUES -> a
    baritone.behavior.LookBehavior$Target$Mode[] values() -> values
    baritone.behavior.LookBehavior$Target$Mode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.behavior.LookBehavior$Target$Mode resolve(baritone.api.utils.IPlayerContext,boolean) -> a
    void <clinit>() -> <clinit>
baritone.behavior.PathingBehavior -> baritone.i:
    baritone.pathing.path.PathExecutor current -> a
    baritone.pathing.path.PathExecutor next -> b
    baritone.api.pathing.goals.Goal goal -> a
    baritone.pathing.movement.CalculationContext context -> a
    int ticksElapsedSoFar -> a
    baritone.api.utils.BetterBlockPos startPosition -> a
    boolean safeToCancel -> b
    boolean pauseRequestedLastTick -> c
    boolean unpausedLastTick -> d
    boolean pausedThisTick -> e
    boolean cancelRequested -> f
    boolean calcFailedLastTick -> a
    baritone.pathing.calc.AbstractNodeCostSearch inProgress -> a
    java.lang.Object pathCalcLock -> a
    java.lang.Object pathPlanLock -> b
    boolean lastAutoJump -> g
    baritone.api.utils.BetterBlockPos expectedSegmentStart -> b
    java.util.concurrent.LinkedBlockingQueue toDispatch -> a
    void <init>(baritone.Baritone) -> <init>
    void queuePathEvent(baritone.api.event.events.PathEvent) -> a
    void dispatchEvents() -> c
    void onTick(baritone.api.event.events.TickEvent) -> onTick
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> onPlayerSprintState
    void onPlayerUpdate(baritone.api.event.events.PlayerUpdateEvent) -> onPlayerUpdate
    boolean secretInternalSetGoalAndPath(baritone.api.process.PathingCommand) -> a
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    boolean isPathing() -> isPathing
    java.util.Optional getInProgress() -> getInProgress
    boolean isSafeToCancel() -> a
    boolean cancelSegmentIfSafe() -> b
    boolean cancelEverything() -> cancelEverything
    void softCancelIfSafe() -> a
    void secretInternalSegmentCancel() -> b
    void forceCancel() -> forceCancel
    java.util.Optional estimatedTicksToGoal() -> estimatedTicksToGoal
    void resetEstimatedTicksToGoal(baritone.api.utils.BetterBlockPos) -> a
    baritone.api.utils.BetterBlockPos pathStart() -> a
    void findPathInNewThread(net.minecraft.core.BlockPos,boolean,baritone.pathing.movement.CalculationContext) -> a
    baritone.pathing.calc.AbstractNodeCostSearch createPathfinder(net.minecraft.core.BlockPos,baritone.api.pathing.goals.Goal,baritone.api.pathing.calc.IPath,baritone.pathing.movement.CalculationContext) -> a
    void onRenderPass(baritone.api.event.events.RenderEvent) -> onRenderPass
    baritone.api.pathing.path.IPathExecutor getNext() -> getNext
    baritone.api.pathing.path.IPathExecutor getCurrent() -> getCurrent
    void lambda$findPathInNewThread$2(boolean,net.minecraft.core.BlockPos,baritone.api.pathing.goals.Goal,baritone.pathing.calc.AbstractNodeCostSearch,long,long) -> a
    baritone.pathing.path.PathExecutor lambda$findPathInNewThread$1(baritone.api.pathing.calc.IPath) -> a
    double lambda$pathStart$0(double,double,baritone.api.utils.BetterBlockPos) -> a
baritone.behavior.PathingBehavior$1 -> baritone.j:
    int[] $SwitchMap$baritone$api$event$events$type$EventState -> a
    void <clinit>() -> <clinit>
baritone.behavior.WaypointBehavior -> baritone.k:
    void <init>(baritone.Baritone) -> <init>
    void onBlockInteract(baritone.api.event.events.BlockInteractEvent) -> onBlockInteract
    void onPlayerDeath() -> onPlayerDeath
baritone.behavior.look.ForkableRandom -> baritone.l:
    long[] s -> a
    void <init>() -> <init>
    void <init>(long) -> <init>
    void <init>(long[]) -> <init>
    double nextDouble() -> a
    long next() -> a
    long rotl(long,int) -> a
    long lambda$new$0(java.util.concurrent.atomic.AtomicLong) -> a
baritone.cache.CachedChunk -> baritone.m:
    com.google.common.collect.ImmutableSet BLOCKS_TO_KEEP_TRACK_OF -> a
    int height -> d
    int size -> e
    int sizeInBytes -> a
    int x -> b
    int z -> c
    java.util.BitSet data -> a
    it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap special -> a
    net.minecraft.world.level.block.state.BlockState[] overview -> a
    int[] heightMap -> a
    java.util.Map specialBlockLocations -> a
    long cacheTimestamp -> a
    void <init>(int,int,int,java.util.BitSet,net.minecraft.world.level.block.state.BlockState[],java.util.Map,long) -> <init>
    int size(int) -> a
    int sizeInBytes(int) -> b
    void setSpecial() -> a
    void calculateHeightMap() -> b
    java.util.ArrayList getAbsoluteBlocks(java.lang.String) -> a
    int getPositionIndex(int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.cache.CachedRegion -> baritone.n:
    baritone.cache.CachedChunk[][] chunks -> a
    int x -> a
    int z -> b
    net.minecraft.world.level.dimension.DimensionType dimension -> a
    boolean hasUnsavedChanges -> a
    void <init>(int,int,net.minecraft.world.level.dimension.DimensionType) -> <init>
    net.minecraft.world.level.block.state.BlockState getBlock(int,int,int) -> getBlock
    boolean isCached(int,int) -> isCached
    java.util.ArrayList getLocationsOf(java.lang.String) -> a
    void updateCachedChunk(int,int,baritone.cache.CachedChunk) -> a
    void save(java.lang.String) -> a
    void load(java.lang.String) -> b
    void removeExpired() -> a
    baritone.cache.CachedChunk mostRecentlyModified() -> a
    int getX() -> getX
    int getZ() -> getZ
    java.nio.file.Path getRegionFile(java.nio.file.Path,int,int) -> a
baritone.cache.CachedWorld -> baritone.o:
    it.unimi.dsi.fastutil.longs.Long2ObjectMap cachedRegions -> a
    java.lang.String directory -> a
    java.util.concurrent.LinkedBlockingQueue toPackQueue -> a
    java.util.Map toPackMap -> a
    net.minecraft.world.level.dimension.DimensionType dimension -> a
    void <init>(java.nio.file.Path,net.minecraft.world.level.dimension.DimensionType) -> <init>
    void queueForPacking(net.minecraft.world.level.chunk.LevelChunk) -> queueForPacking
    boolean isCached(int,int) -> isCached
    java.util.ArrayList getLocationsOf(java.lang.String,int,int,int,int) -> getLocationsOf
    void save() -> save
    void prune() -> a
    java.util.List allRegions() -> a
    void reloadAllFromDisk() -> reloadAllFromDisk
    baritone.cache.CachedRegion getRegion(int,int) -> a
    baritone.cache.CachedRegion getOrCreateRegion(int,int) -> b
    long getRegionID(int,int) -> a
    boolean isRegionInWorld(int,int) -> a
    baritone.api.cache.ICachedRegion getRegion(int,int) -> getRegion
    baritone.cache.CachedRegion lambda$getOrCreateRegion$4(int,int,long) -> a
    void lambda$reloadAllFromDisk$3(baritone.cache.CachedRegion) -> a
    void lambda$save$2(baritone.cache.CachedRegion) -> b
    void lambda$save$1(baritone.cache.CachedRegion) -> c
    void lambda$new$0() -> b
baritone.cache.CachedWorld$PackerThread -> baritone.o$a:
    baritone.cache.CachedWorld this$0 -> a
    void <init>(baritone.cache.CachedWorld) -> <init>
    void run() -> run
baritone.cache.ChunkPacker -> baritone.p:
    baritone.pathing.calc.PathNode[] array -> a
    int size -> a
    baritone.cache.CachedChunk pack(net.minecraft.world.level.chunk.LevelChunk) -> a
    java.util.List lambda$pack$0(java.lang.String) -> a
    void <init>(byte) -> <init>
    void <init>() -> <init>
    void insert(baritone.pathing.calc.PathNode) -> a
    void update(baritone.pathing.calc.PathNode) -> b
    int fastFloor(double) -> a
    int fastCeil(double) -> b
baritone.cache.ChunkPacker$1 -> baritone.q:
    int[] $SwitchMap$baritone$utils$pathing$PathingBlockType -> a
    void <clinit>() -> <clinit>
baritone.cache.FasterWorldScanner -> baritone.r:
    baritone.cache.FasterWorldScanner INSTANCE -> a
    baritone.cache.FasterWorldScanner[] $VALUES -> a
    boolean $assertionsDisabled -> a
    baritone.cache.FasterWorldScanner[] values() -> values
    baritone.cache.FasterWorldScanner valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.List scanChunkRadius(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,int,int,int) -> scanChunkRadius
    java.util.List scanChunk(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,net.minecraft.world.level.ChunkPos,int,int) -> scanChunk
    int repack(baritone.api.utils.IPlayerContext) -> repack
    int repack(baritone.api.utils.IPlayerContext,int) -> repack
    java.util.List getChunkRange(int,int,int) -> a
    java.util.List scanChunksInternal(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,int) -> a
    java.util.stream.Stream scanChunkInternal(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,net.minecraft.world.level.ChunkPos) -> a
    java.util.List collectChunkSections(baritone.api.utils.BlockOptionalMetaLookup,net.minecraft.world.level.chunk.LevelChunk,long,long,int) -> a
    void visitSection(baritone.api.utils.BlockOptionalMetaLookup,net.minecraft.world.level.chunk.LevelChunkSection,java.util.List,long,int,long) -> a
    java.util.stream.Stream lambda$scanChunksInternal$0(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,net.minecraft.world.level.ChunkPos) -> b
    void <clinit>() -> <clinit>
baritone.cache.WaypointCollection -> baritone.s:
    java.nio.file.Path directory -> a
    java.util.Map waypoints -> a
    void <init>(java.nio.file.Path) -> <init>
    void load() -> a
    void load(baritone.api.cache.IWaypoint$Tag) -> a
    void save(baritone.api.cache.IWaypoint$Tag) -> b
    void addWaypoint(baritone.api.cache.IWaypoint) -> addWaypoint
    void removeWaypoint(baritone.api.cache.IWaypoint) -> removeWaypoint
    baritone.api.cache.IWaypoint getMostRecentByTag(baritone.api.cache.IWaypoint$Tag) -> getMostRecentByTag
    java.util.Set getByTag(baritone.api.cache.IWaypoint$Tag) -> getByTag
    java.util.Set getAllWaypoints() -> getAllWaypoints
    long lambda$getMostRecentByTag$0(baritone.api.cache.IWaypoint) -> a
baritone.cache.WorldData -> baritone.t:
    baritone.cache.CachedWorld cache -> a
    baritone.cache.WaypointCollection waypoints -> a
    void <init>(java.nio.file.Path,net.minecraft.world.level.dimension.DimensionType) -> <init>
    void onClose() -> a
    baritone.api.cache.ICachedWorld getCachedWorld() -> getCachedWorld
    baritone.api.cache.IWaypointCollection getWaypoints() -> getWaypoints
    void lambda$onClose$0() -> b
baritone.cache.WorldProvider -> baritone.u:
    java.util.Map worldCache -> a
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    baritone.cache.WorldData currentWorld -> a
    net.minecraft.world.level.Level mcWorld -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.cache.WorldData getCurrentWorld() -> a
    void initWorld(net.minecraft.world.level.Level) -> a
    void closeWorld() -> a
    void detectAndHandleBrokenLoading() -> b
    baritone.api.cache.IWorldData getCurrentWorld() -> getCurrentWorld
    void lambda$initWorld$1(net.minecraft.world.level.Level,net.minecraft.util.Tuple) -> a
    baritone.cache.WorldData lambda$initWorld$0(net.minecraft.world.level.Level,java.nio.file.Path) -> a
    void <clinit>() -> <clinit>
baritone.command.CommandSystem -> baritone.v:
    baritone.command.CommandSystem INSTANCE -> a
    baritone.command.CommandSystem[] $VALUES -> a
    baritone.command.CommandSystem[] values() -> values
    baritone.command.CommandSystem valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    baritone.api.command.argparser.IArgParserManager getParserManager() -> getParserManager
    void <clinit>() -> <clinit>
baritone.command.ExampleBaritoneControl -> baritone.w:
    baritone.api.Settings settings -> a
    baritone.api.command.manager.ICommandManager manager -> a
    void <init>(baritone.Baritone) -> <init>
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> onSendChatMessage
    void logRanCommand(java.lang.String,java.lang.String) -> a
    boolean runCommand(java.lang.String) -> a
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> onPreTabComplete
    java.util.stream.Stream tabComplete(java.lang.String) -> a
    java.lang.String[] lambda$onPreTabComplete$1(int) -> a
    java.lang.String lambda$onPreTabComplete$0(java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.ArgParserManager -> baritone.x:
    baritone.command.argparser.ArgParserManager INSTANCE -> a
    baritone.api.command.registry.Registry registry -> a
    baritone.command.argparser.ArgParserManager[] $VALUES -> a
    baritone.command.argparser.ArgParserManager[] values() -> values
    baritone.command.argparser.ArgParserManager valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    baritone.api.command.argparser.IArgParser$Stateless getParserStateless(java.lang.Class) -> getParserStateless
    baritone.api.command.argparser.IArgParser$Stated getParserStated(java.lang.Class,java.lang.Class) -> getParserStated
    java.lang.Object parseStateless(java.lang.Class,baritone.api.command.argument.ICommandArgument) -> parseStateless
    java.lang.Object parseStated(java.lang.Class,java.lang.Class,baritone.api.command.argument.ICommandArgument,java.lang.Object) -> parseStated
    baritone.api.command.registry.Registry getRegistry() -> getRegistry
    boolean lambda$getParserStated$2(java.lang.Class,baritone.api.command.argparser.IArgParser$Stated) -> a
    boolean lambda$getParserStated$1(java.lang.Class,baritone.api.command.argparser.IArgParser$Stated) -> b
    boolean lambda$getParserStateless$0(java.lang.Class,baritone.api.command.argparser.IArgParser$Stateless) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers -> baritone.y:
    java.util.List ALL -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$BooleanArgumentParser -> baritone.y$a:
    baritone.command.argparser.DefaultArgParsers$BooleanArgumentParser INSTANCE -> a
    java.util.List TRUTHY_VALUES -> a
    java.util.List FALSY_VALUES -> b
    void <init>() -> <init>
    java.lang.Class getTarget() -> getTarget
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> parseArg
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser -> baritone.y$b:
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> getTarget
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> parseArg
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$FloatArgumentParser -> baritone.y$c:
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> getTarget
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> parseArg
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$IntArgumentParser -> baritone.y$d:
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> getTarget
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> parseArg
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$LongArgumentParser -> baritone.y$e:
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> getTarget
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> parseArg
    void <clinit>() -> <clinit>
baritone.command.argument.ArgConsumer -> baritone.z:
    baritone.api.command.manager.ICommandManager manager -> a
    baritone.api.command.datatypes.IDatatypeContext context -> a
    java.util.LinkedList args -> a
    java.util.Deque consumed -> a
    void <init>(baritone.api.command.manager.ICommandManager,java.util.Deque,java.util.Deque) -> <init>
    void <init>(baritone.api.command.manager.ICommandManager,java.util.List) -> <init>
    java.util.LinkedList getArgs() -> getArgs
    java.util.Deque getConsumed() -> getConsumed
    boolean has(int) -> has
    boolean hasAny() -> hasAny
    boolean hasAtMost(int) -> hasAtMost
    boolean hasAtMostOne() -> hasAtMostOne
    boolean hasExactly(int) -> hasExactly
    boolean hasExactlyOne() -> hasExactlyOne
    baritone.api.command.argument.ICommandArgument peek(int) -> peek
    baritone.api.command.argument.ICommandArgument peek() -> peek
    boolean is(java.lang.Class,int) -> is
    boolean is(java.lang.Class) -> is
    java.lang.String peekString(int) -> peekString
    java.lang.String peekString() -> peekString
    java.lang.Enum peekEnum(java.lang.Class,int) -> peekEnum
    java.lang.Enum peekEnum(java.lang.Class) -> peekEnum
    java.lang.Enum peekEnumOrNull(java.lang.Class,int) -> peekEnumOrNull
    java.lang.Enum peekEnumOrNull(java.lang.Class) -> peekEnumOrNull
    java.lang.Object peekAs(java.lang.Class,int) -> peekAs
    java.lang.Object peekAs(java.lang.Class) -> peekAs
    java.lang.Object peekAsOrDefault(java.lang.Class,java.lang.Object,int) -> peekAsOrDefault
    java.lang.Object peekAsOrDefault(java.lang.Class,java.lang.Object) -> peekAsOrDefault
    java.lang.Object peekAsOrNull(java.lang.Class,int) -> peekAsOrNull
    java.lang.Object peekAsOrNull(java.lang.Class) -> peekAsOrNull
    java.lang.Object peekDatatype(baritone.api.command.datatypes.IDatatypeFor) -> peekDatatype
    java.lang.Object peekDatatype(baritone.api.command.datatypes.IDatatypePost) -> peekDatatype
    java.lang.Object peekDatatype(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> peekDatatype
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypeFor) -> peekDatatypeOrNull
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypePost) -> peekDatatypeOrNull
    java.lang.Object peekDatatypePost(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> peekDatatypePost
    java.lang.Object peekDatatypePostOrDefault(baritone.api.command.datatypes.IDatatypePost,java.lang.Object,java.lang.Object) -> peekDatatypePostOrDefault
    java.lang.Object peekDatatypePostOrNull(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> peekDatatypePostOrNull
    java.lang.Object peekDatatypeFor(java.lang.Class) -> peekDatatypeFor
    java.lang.Object peekDatatypeForOrDefault(java.lang.Class,java.lang.Object) -> peekDatatypeForOrDefault
    java.lang.Object peekDatatypeForOrNull(java.lang.Class) -> peekDatatypeForOrNull
    baritone.api.command.argument.ICommandArgument get() -> get
    java.lang.String getString() -> getString
    java.lang.Enum getEnum(java.lang.Class) -> getEnum
    java.lang.Enum getEnumOrDefault(java.lang.Class,java.lang.Enum) -> getEnumOrDefault
    java.lang.Enum getEnumOrNull(java.lang.Class) -> getEnumOrNull
    java.lang.Object getAs(java.lang.Class) -> getAs
    java.lang.Object getAsOrDefault(java.lang.Class,java.lang.Object) -> getAsOrDefault
    java.lang.Object getAsOrNull(java.lang.Class) -> getAsOrNull
    java.lang.Object getDatatypePost(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> getDatatypePost
    java.lang.Object getDatatypePostOrDefault(baritone.api.command.datatypes.IDatatypePost,java.lang.Object,java.lang.Object) -> getDatatypePostOrDefault
    java.lang.Object getDatatypePostOrNull(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> getDatatypePostOrNull
    java.lang.Object getDatatypeFor(baritone.api.command.datatypes.IDatatypeFor) -> getDatatypeFor
    java.lang.Object getDatatypeForOrDefault(baritone.api.command.datatypes.IDatatypeFor,java.lang.Object) -> getDatatypeForOrDefault
    java.lang.Object getDatatypeForOrNull(baritone.api.command.datatypes.IDatatypeFor) -> getDatatypeForOrNull
    java.util.stream.Stream tabCompleteDatatype(baritone.api.command.datatypes.IDatatype) -> tabCompleteDatatype
    java.lang.String rawRest() -> rawRest
    void requireMin(int) -> requireMin
    void requireMax(int) -> requireMax
    void requireExactly(int) -> requireExactly
    boolean hasConsumed() -> hasConsumed
    baritone.api.command.argument.ICommandArgument consumed() -> consumed
    java.lang.String consumedString() -> consumedString
    baritone.command.argument.ArgConsumer copy() -> a
    baritone.api.command.argument.IArgConsumer copy() -> copy
baritone.command.argument.ArgConsumer$Context -> baritone.z$a:
    baritone.command.argument.ArgConsumer this$0 -> a
    void <init>(baritone.command.argument.ArgConsumer) -> <init>
    baritone.api.IBaritone getBaritone() -> getBaritone
    baritone.api.command.argument.IArgConsumer getConsumer() -> getConsumer
baritone.command.argument.CommandArgument -> baritone.aa:
    int index -> a
    java.lang.String value -> a
    java.lang.String rawRest -> b
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    int getIndex() -> getIndex
    java.lang.String getValue() -> getValue
    java.lang.String getRawRest() -> getRawRest
    java.lang.Enum getEnum(java.lang.Class) -> getEnum
    java.lang.Object getAs(java.lang.Class) -> getAs
    boolean is(java.lang.Class) -> is
    java.lang.Object getAs(java.lang.Class,java.lang.Class,java.lang.Object) -> getAs
    boolean is(java.lang.Class,java.lang.Class,java.lang.Object) -> is
    baritone.api.command.exception.CommandInvalidTypeException lambda$getEnum$1(java.lang.Class) -> a
    boolean lambda$getEnum$0(java.lang.Enum) -> a
baritone.command.argument.CommandArguments -> baritone.ab:
    java.util.regex.Pattern ARG_PATTERN -> a
    java.util.List from(java.lang.String,boolean) -> a
    baritone.command.argument.CommandArgument unknown() -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.AxisCommand -> baritone.ac:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.BlacklistCommand -> baritone.ad:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.BuildCommand -> baritone.ae:
    java.io.File schematicsDir -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ClickCommand -> baritone.af:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ComeCommand -> baritone.ag:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.CommandAlias -> baritone.ah:
    java.lang.String shortDesc -> a
    java.lang.String target -> b
    void <init>(baritone.api.IBaritone,java.util.List,java.lang.String,java.lang.String) -> <init>
    void <init>(baritone.api.IBaritone,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ETACommand -> baritone.ai:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ElytraCommand -> baritone.aj:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    net.minecraft.network.chat.Component suggest2b2tSeeds() -> a
    boolean detectOn2b2t() -> a
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    java.lang.String unsupportedSystemMessage() -> a
baritone.command.defaults.ExecutionControlCommands -> baritone.ak:
    baritone.api.command.Command pauseCommand -> a
    baritone.api.command.Command resumeCommand -> b
    baritone.api.command.Command pausedCommand -> c
    baritone.api.command.Command cancelCommand -> d
    void <init>(baritone.api.IBaritone) -> <init>
baritone.command.defaults.ExecutionControlCommands$1 -> baritone.al:
    boolean[] val$paused -> a
    baritone.api.IBaritone val$baritone -> a
    void <init>(boolean[],baritone.api.IBaritone) -> <init>
    boolean isActive() -> isActive
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    boolean isTemporary() -> isTemporary
    void onLostControl() -> onLostControl
    double priority() -> priority
    java.lang.String displayName0() -> displayName0
baritone.command.defaults.ExecutionControlCommands$2 -> baritone.am:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ExecutionControlCommands$3 -> baritone.an:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ExecutionControlCommands$4 -> baritone.ao:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ExecutionControlCommands$5 -> baritone.ap:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ExploreCommand -> baritone.aq:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ExploreFilterCommand -> baritone.ar:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.FarmCommand -> baritone.as:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.FindCommand -> baritone.at:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    net.minecraft.network.chat.Component positionToComponent(baritone.api.utils.BetterBlockPos) -> a
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    void lambda$execute$2(baritone.command.defaults.FindCommand,net.minecraft.network.chat.Component) -> a
    net.minecraft.network.chat.Component[] lambda$execute$1(int) -> a
    java.util.stream.Stream lambda$execute$0(baritone.api.utils.BetterBlockPos,net.minecraft.world.level.block.Block) -> a
baritone.command.defaults.FollowCommand -> baritone.command.defaults.FollowCommand:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    boolean lambda$execute$1(java.util.List,net.minecraft.world.entity.Entity) -> a
    boolean lambda$execute$0(net.minecraft.world.entity.Entity,net.minecraft.world.entity.EntityType) -> a
baritone.command.defaults.FollowCommand$FollowGroup -> baritone.command.defaults.FollowCommand$FollowGroup:
    baritone.command.defaults.FollowCommand$FollowGroup ENTITIES -> a
    baritone.command.defaults.FollowCommand$FollowGroup PLAYERS -> b
    java.util.function.Predicate filter -> a
    baritone.command.defaults.FollowCommand$FollowGroup[] $VALUES -> a
    baritone.command.defaults.FollowCommand$FollowGroup[] values() -> values
    baritone.command.defaults.FollowCommand$FollowGroup valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.util.function.Predicate) -> <init>
    void <clinit>() -> <clinit>
baritone.command.defaults.FollowCommand$FollowList -> baritone.command.defaults.FollowCommand$FollowList:
    baritone.command.defaults.FollowCommand$FollowList ENTITY -> a
    baritone.command.defaults.FollowCommand$FollowList PLAYER -> b
    baritone.api.command.datatypes.IDatatypeFor datatype -> a
    baritone.command.defaults.FollowCommand$FollowList[] $VALUES -> a
    baritone.command.defaults.FollowCommand$FollowList[] values() -> values
    baritone.command.defaults.FollowCommand$FollowList valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,baritone.api.command.datatypes.IDatatypeFor) -> <init>
    void <clinit>() -> <clinit>
baritone.command.defaults.FollowCommand$NoEntitiesException -> baritone.command.defaults.FollowCommand$a:
    void <init>() -> <init>
baritone.command.defaults.ForceCancelCommand -> baritone.au:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.GcCommand -> baritone.av:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.GoalCommand -> baritone.aw:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.GotoCommand -> baritone.ax:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.HelpCommand -> baritone.ay:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    net.minecraft.network.chat.Component lambda$execute$2(java.lang.String,baritone.api.command.ICommand) -> a
    void lambda$execute$1() -> a
    boolean lambda$execute$0(baritone.api.command.ICommand) -> a
baritone.command.defaults.InvertCommand -> baritone.az:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.LitematicaCommand -> baritone.ba:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.MineCommand -> baritone.bb:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.PathCommand -> baritone.bc:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ProcCommand -> baritone.bd:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ReloadAllCommand -> baritone.be:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.RenderCommand -> baritone.bf:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.RepackCommand -> baritone.bg:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.SaveAllCommand -> baritone.bh:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.SelCommand -> baritone.bi:
    baritone.api.selection.ISelectionManager manager -> a
    baritone.api.utils.BetterBlockPos pos1 -> a
    baritone.api.schematic.ISchematic clipboard -> a
    net.minecraft.core.Vec3i clipboardOffset -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    baritone.api.schematic.ISchematic lambda$execute$0(baritone.command.defaults.SelCommand$Action,baritone.api.utils.BlockOptionalMetaLookup,net.minecraft.core.Direction$Axis,baritone.api.schematic.ISchematic) -> a
baritone.command.defaults.SelCommand$1 -> baritone.bj:
    baritone.command.defaults.SelCommand this$0 -> a
    void <init>(baritone.command.defaults.SelCommand) -> <init>
    void onRenderPass(baritone.api.event.events.RenderEvent) -> onRenderPass
baritone.command.defaults.SelCommand$2 -> baritone.bk:
    net.minecraft.world.level.block.state.BlockState[][][] val$blockstates -> b
    net.minecraft.core.Vec3i val$size -> a
    void <init>(net.minecraft.world.level.block.state.BlockState[][][],net.minecraft.core.Vec3i) -> <init>
baritone.command.defaults.SelCommand$3 -> baritone.bl:
    int[] $SwitchMap$baritone$command$defaults$SelCommand$Action -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.SelCommand$Action -> baritone.bi$a:
    baritone.command.defaults.SelCommand$Action POS1 -> a
    baritone.command.defaults.SelCommand$Action POS2 -> b
    baritone.command.defaults.SelCommand$Action CLEAR -> c
    baritone.command.defaults.SelCommand$Action UNDO -> d
    baritone.command.defaults.SelCommand$Action SET -> r
    baritone.command.defaults.SelCommand$Action WALLS -> e
    baritone.command.defaults.SelCommand$Action SHELL -> f
    baritone.command.defaults.SelCommand$Action SPHERE -> g
    baritone.command.defaults.SelCommand$Action HSPHERE -> h
    baritone.command.defaults.SelCommand$Action CYLINDER -> i
    baritone.command.defaults.SelCommand$Action HCYLINDER -> j
    baritone.command.defaults.SelCommand$Action CLEARAREA -> k
    baritone.command.defaults.SelCommand$Action REPLACE -> l
    baritone.command.defaults.SelCommand$Action EXPAND -> m
    baritone.command.defaults.SelCommand$Action COPY -> n
    baritone.command.defaults.SelCommand$Action PASTE -> o
    baritone.command.defaults.SelCommand$Action CONTRACT -> p
    baritone.command.defaults.SelCommand$Action SHIFT -> q
    java.lang.String[] names -> a
    baritone.command.defaults.SelCommand$Action[] $VALUES -> a
    baritone.command.defaults.SelCommand$Action[] values() -> values
    baritone.command.defaults.SelCommand$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    baritone.command.defaults.SelCommand$Action getByName(java.lang.String) -> a
    java.lang.String[] getAllNames() -> a
    boolean isFillAction() -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.SelCommand$TransformTarget -> baritone.bi$b:
    baritone.command.defaults.SelCommand$TransformTarget ALL -> a
    baritone.command.defaults.SelCommand$TransformTarget NEWEST -> b
    baritone.command.defaults.SelCommand$TransformTarget OLDEST -> c
    java.util.function.Function transform -> a
    java.lang.String[] names -> a
    baritone.command.defaults.SelCommand$TransformTarget[] $VALUES -> a
    baritone.command.defaults.SelCommand$TransformTarget[] values() -> values
    baritone.command.defaults.SelCommand$TransformTarget valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.util.function.Function,java.lang.String[]) -> <init>
    baritone.command.defaults.SelCommand$TransformTarget getByName(java.lang.String) -> a
    java.lang.String[] getAllNames() -> a
    baritone.api.selection.ISelection[] lambda$static$2(baritone.api.selection.ISelection[]) -> a
    baritone.api.selection.ISelection[] lambda$static$1(baritone.api.selection.ISelection[]) -> b
    baritone.api.selection.ISelection[] lambda$static$0(baritone.api.selection.ISelection[]) -> c
    void <clinit>() -> <clinit>
baritone.command.defaults.SetCommand -> baritone.bm:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    boolean lambda$execute$5(java.lang.String,baritone.api.Settings$Setting) -> a
    net.minecraft.network.chat.Component lambda$execute$4(baritone.api.Settings$Setting) -> a
    void lambda$execute$3(java.lang.String,boolean) -> a
    int lambda$execute$2(baritone.api.Settings$Setting,baritone.api.Settings$Setting) -> a
    boolean lambda$execute$1(java.lang.String,baritone.api.Settings$Setting) -> b
    boolean lambda$execute$0(baritone.api.Settings$Setting) -> a
baritone.command.defaults.SurfaceCommand -> baritone.bn:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.ThisWayCommand -> baritone.bo:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.TunnelCommand -> baritone.bp:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.TunnelCommand$1 -> baritone.bq:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.VersionCommand -> baritone.br:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
baritone.command.defaults.WaypointsCommand -> baritone.bs:
    java.util.Map deletedWaypoints -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> execute
    java.util.stream.Stream tabComplete(java.lang.String,baritone.api.command.argument.IArgConsumer) -> tabComplete
    java.lang.String getShortDesc() -> getShortDesc
    java.util.List getLongDesc() -> getLongDesc
    java.util.List lambda$execute$6(baritone.api.cache.IWorldData) -> a
    void lambda$execute$5() -> a
    java.lang.String lambda$execute$4(baritone.api.cache.IWaypoint) -> a
    java.util.List lambda$execute$3(baritone.api.cache.IWorldData) -> b
    void lambda$execute$2(baritone.api.cache.IWaypoint$Tag) -> a
    net.minecraft.network.chat.Component lambda$execute$1(java.util.function.BiFunction,baritone.command.defaults.WaypointsCommand$Action,baritone.api.cache.IWaypoint) -> a
    net.minecraft.network.chat.Component lambda$execute$0(java.lang.String,baritone.api.cache.IWaypoint,baritone.command.defaults.WaypointsCommand$Action) -> a
baritone.command.defaults.WaypointsCommand$Action -> baritone.bs$a:
    baritone.command.defaults.WaypointsCommand$Action LIST -> a
    baritone.command.defaults.WaypointsCommand$Action CLEAR -> b
    baritone.command.defaults.WaypointsCommand$Action SAVE -> c
    baritone.command.defaults.WaypointsCommand$Action INFO -> d
    baritone.command.defaults.WaypointsCommand$Action DELETE -> e
    baritone.command.defaults.WaypointsCommand$Action RESTORE -> f
    baritone.command.defaults.WaypointsCommand$Action GOAL -> g
    baritone.command.defaults.WaypointsCommand$Action GOTO -> h
    java.lang.String[] names -> a
    baritone.command.defaults.WaypointsCommand$Action[] $VALUES -> a
    baritone.command.defaults.WaypointsCommand$Action[] values() -> values
    baritone.command.defaults.WaypointsCommand$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    baritone.command.defaults.WaypointsCommand$Action getByName(java.lang.String) -> a
    java.lang.String[] getAllNames() -> a
    void <clinit>() -> <clinit>
baritone.command.manager.CommandManager -> baritone.bt:
    baritone.api.command.registry.Registry registry -> a
    baritone.Baritone baritone -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.api.IBaritone getBaritone() -> getBaritone
    baritone.api.command.registry.Registry getRegistry() -> getRegistry
    baritone.api.command.ICommand getCommand(java.lang.String) -> getCommand
    boolean execute(java.lang.String) -> execute
    boolean execute(net.minecraft.util.Tuple) -> execute
    java.util.stream.Stream tabComplete(net.minecraft.util.Tuple) -> tabComplete
    java.util.stream.Stream tabComplete(java.lang.String) -> tabComplete
    baritone.command.manager.CommandManager$ExecutionWrapper from(net.minecraft.util.Tuple) -> a
    net.minecraft.util.Tuple expand(java.lang.String,boolean) -> a
    net.minecraft.util.Tuple expand(java.lang.String) -> a
baritone.command.manager.CommandManager$ExecutionWrapper -> baritone.bt$a:
    baritone.api.command.ICommand command -> a
    java.lang.String label -> a
    baritone.command.argument.ArgConsumer args -> a
    void <init>(baritone.api.command.ICommand,java.lang.String,baritone.command.argument.ArgConsumer) -> <init>
    java.util.stream.Stream tabComplete() -> a
baritone.event.GameEventHandler -> baritone.bu:
    baritone.Baritone baritone -> a
    java.util.List listeners -> a
    void <init>(baritone.Baritone) -> <init>
    void onTick(baritone.api.event.events.TickEvent) -> onTick
    void onPostTick(baritone.api.event.events.TickEvent) -> onPostTick
    void onPlayerUpdate(baritone.api.event.events.PlayerUpdateEvent) -> onPlayerUpdate
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> onSendChatMessage
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> onPreTabComplete
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> onChunkEvent
    void onBlockChange(baritone.api.event.events.BlockChangeEvent) -> onBlockChange
    void onRenderPass(baritone.api.event.events.RenderEvent) -> onRenderPass
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> onWorldEvent
    void onSendPacket(baritone.api.event.events.PacketEvent) -> onSendPacket
    void onReceivePacket(baritone.api.event.events.PacketEvent) -> onReceivePacket
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> onPlayerRotationMove
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> onPlayerSprintState
    void onBlockInteract(baritone.api.event.events.BlockInteractEvent) -> onBlockInteract
    void onPlayerDeath() -> onPlayerDeath
    void onPathEvent(baritone.api.event.events.PathEvent) -> onPathEvent
    void registerEventListener(baritone.api.event.listener.IGameEventListener) -> registerEventListener
    void lambda$onPathEvent$16(baritone.api.event.events.PathEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onBlockInteract$15(baritone.api.event.events.BlockInteractEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPlayerSprintState$14(baritone.api.event.events.SprintStateEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPlayerRotationMove$13(baritone.api.event.events.RotationMoveEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onReceivePacket$12(baritone.api.event.events.PacketEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onSendPacket$11(baritone.api.event.events.PacketEvent,baritone.api.event.listener.IGameEventListener) -> b
    void lambda$onWorldEvent$10(baritone.api.event.events.WorldEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onRenderPass$9(baritone.api.event.events.RenderEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onBlockChange$8(baritone.api.event.events.BlockChangeEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onBlockChange$7(baritone.api.event.events.BlockChangeEvent,baritone.api.cache.IWorldData) -> a
    void lambda$onChunkEvent$6(baritone.api.event.events.ChunkEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onChunkEvent$5(net.minecraft.world.level.Level,baritone.api.event.events.ChunkEvent,baritone.api.cache.IWorldData) -> a
    void lambda$onPreTabComplete$4(baritone.api.event.events.TabCompleteEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onSendChatMessage$3(baritone.api.event.events.ChatEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPlayerUpdate$2(baritone.api.event.events.PlayerUpdateEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPostTick$1(baritone.api.event.events.TickEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onTick$0(baritone.api.event.events.TickEvent,baritone.api.event.listener.IGameEventListener) -> b
baritone.launch.BaritoneForgeModXD -> baritone.launch.BaritoneForgeModXD:
    void <init>() -> <init>
baritone.launch.BaritoneMixinConnector -> baritone.launch.BaritoneMixinConnector:
    void <init>() -> <init>
    void connect() -> connect
baritone.launch.mixins.MixinChunkArray -> baritone.launch.mixins.MixinChunkArray:
    java.util.concurrent.atomic.AtomicReferenceArray f_104466_ -> f_104466_
    int f_104467_ -> f_104467_
    int f_104468_ -> f_104468_
    int f_104469_ -> f_104469_
    int f_104470_ -> f_104470_
    int f_104471_ -> f_104471_
    void <init>() -> <init>
    boolean m_104500_(int,int) -> m_104500_
    int m_104481_(int,int) -> m_104481_
    void m_104484_(int,net.minecraft.world.level.chunk.LevelChunk) -> m_104484_
    int centerX() -> centerX
    int centerZ() -> centerZ
    int viewDistance() -> viewDistance
    java.util.concurrent.atomic.AtomicReferenceArray getChunks() -> getChunks
    void copyFrom(baritone.utils.accessor.IChunkArray) -> copyFrom
baritone.launch.mixins.MixinClientChunkProvider -> baritone.launch.mixins.MixinClientChunkProvider:
    net.minecraft.client.multiplayer.ClientLevel f_104411_ -> f_104411_
    void <init>() -> <init>
    net.minecraft.client.multiplayer.ClientChunkCache createThreadSafeCopy() -> createThreadSafeCopy
    baritone.utils.accessor.IChunkArray extractReferenceArray() -> extractReferenceArray
baritone.launch.mixins.MixinClientPlayNetHandler -> baritone.launch.mixins.MixinClientPlayNetHandler:
    void <init>(net.minecraft.client.Minecraft,net.minecraft.network.Connection,net.minecraft.client.multiplayer.CommonListenerCookie) -> <init>
    void sendChatMessage(java.lang.String,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> sendChatMessage
    void postHandleChunkData(net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postHandleChunkData
    void preChunkUnload(net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preChunkUnload
    void postChunkUnload(net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postChunkUnload
    void postHandleBlockChange(net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postHandleBlockChange
    void postHandleMultiBlockChange(net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postHandleMultiBlockChange
    void onPlayerDeath(net.minecraft.network.protocol.game.ClientboundPlayerCombatKillPacket,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPlayerDeath
    void lambda$postHandleMultiBlockChange$0(java.util.List,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> lambda$postHandleMultiBlockChange$0
baritone.launch.mixins.MixinClientPlayerEntity -> baritone.launch.mixins.MixinClientPlayerEntity:
    void <init>() -> <init>
    void onPreUpdate(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPreUpdate
    boolean isAllowFlying(net.minecraft.world.entity.player.Abilities) -> isAllowFlying
    boolean isKeyDown(net.minecraft.client.KeyMapping) -> isKeyDown
    void updateRidden(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> updateRidden
    boolean tryToStartFallFlying(net.minecraft.client.player.LocalPlayer) -> tryToStartFallFlying
baritone.launch.mixins.MixinCommandSuggestionHelper -> baritone.launch.mixins.MixinCommandSuggestionHelper:
    net.minecraft.client.gui.components.EditBox f_93853_ -> f_93853_
    java.util.List f_93861_ -> f_93861_
    com.mojang.brigadier.ParseResults f_93864_ -> f_93864_
    java.util.concurrent.CompletableFuture f_93865_ -> f_93865_
    net.minecraft.client.gui.components.CommandSuggestions$SuggestionsList f_93866_ -> f_93866_
    boolean f_93868_ -> f_93868_
    void <init>() -> <init>
    void preUpdateSuggestion(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preUpdateSuggestion
    com.mojang.brigadier.suggestion.Suggestion lambda$preUpdateSuggestion$0(com.mojang.brigadier.context.StringRange,java.lang.String) -> lambda$preUpdateSuggestion$0
baritone.launch.mixins.MixinEntity -> baritone.launch.mixins.MixinEntity:
    float f_19857_ -> f_19857_
    float f_19858_ -> f_19858_
    baritone.api.event.events.RotationMoveEvent motionUpdateRotationEvent -> motionUpdateRotationEvent
    void <init>() -> <init>
    void moveRelativeHead(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> moveRelativeHead
    void moveRelativeReturn(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> moveRelativeReturn
baritone.launch.mixins.MixinEntityRenderManager -> baritone.launch.mixins.MixinEntityRenderManager:
    void <init>() -> <init>
    double renderPosX() -> renderPosX
    double renderPosY() -> renderPosY
    double renderPosZ() -> renderPosZ
baritone.launch.mixins.MixinFireworkRocketEntity -> baritone.launch.mixins.MixinFireworkRocketEntity:
    net.minecraft.network.syncher.EntityDataAccessor f_37020_ -> f_37020_
    net.minecraft.world.entity.LivingEntity f_37024_ -> f_37024_
    boolean m_37088_() -> m_37088_
    void <init>(net.minecraft.world.level.Level) -> <init>
    net.minecraft.world.entity.LivingEntity getBoostedEntity() -> getBoostedEntity
baritone.launch.mixins.MixinItemStack -> baritone.launch.mixins.MixinItemStack:
    net.minecraft.world.item.Item f_41589_ -> f_41589_
    int baritoneHash -> baritoneHash
    void <init>() -> <init>
    int m_41773_() -> m_41773_
    void recalculateHash() -> recalculateHash
    void onInit(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onInit
    void onItemDamageSet(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onItemDamageSet
    int getBaritoneHash() -> getBaritoneHash
baritone.launch.mixins.MixinLivingEntity -> baritone.launch.mixins.MixinLivingEntity:
    baritone.api.event.events.RotationMoveEvent jumpRotationEvent -> jumpRotationEvent
    baritone.api.event.events.RotationMoveEvent elytraRotationEvent -> elytraRotationEvent
    void <init>(net.minecraft.world.entity.EntityType,net.minecraft.world.level.Level) -> <init>
    void preMoveRelative(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preMoveRelative
    float overrideYaw(net.minecraft.world.entity.LivingEntity) -> overrideYaw
    void onPreElytraMove(net.minecraft.world.phys.Vec3,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPreElytraMove
    void onPostElytraMove(net.minecraft.world.phys.Vec3,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPostElytraMove
    java.util.Optional getBaritone() -> getBaritone
    void lambda$onPreElytraMove$1(baritone.api.IBaritone) -> lambda$onPreElytraMove$1
    void lambda$preMoveRelative$0(baritone.api.IBaritone) -> lambda$preMoveRelative$0
baritone.launch.mixins.MixinLootContext -> baritone.launch.mixins.MixinLootContext:
    void <init>() -> <init>
    net.minecraft.server.MinecraftServer getServer(net.minecraft.server.level.ServerLevel) -> getServer
    net.minecraft.world.level.storage.loot.LootDataManager getLootTableManager(net.minecraft.server.MinecraftServer) -> getLootTableManager
baritone.launch.mixins.MixinMinecraft -> baritone.launch.mixins.MixinMinecraft:
    net.minecraft.client.player.LocalPlayer f_91074_ -> f_91074_
    net.minecraft.client.multiplayer.ClientLevel f_91073_ -> f_91073_
    java.util.function.BiFunction tickProvider -> tickProvider
    void <init>() -> <init>
    void postInit(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postInit
    void runTick(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> runTick
    void postRunTick(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postRunTick
    void postUpdateEntities(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postUpdateEntities
    void preLoadWorld(net.minecraft.client.multiplayer.ClientLevel,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preLoadWorld
    void postLoadWorld(net.minecraft.client.multiplayer.ClientLevel,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postLoadWorld
    net.minecraft.client.gui.screens.Screen passEvents(net.minecraft.client.Minecraft) -> passEvents
baritone.launch.mixins.MixinNetworkManager -> baritone.launch.mixins.MixinNetworkManager:
    io.netty.channel.Channel f_129468_ -> f_129468_
    net.minecraft.network.protocol.PacketFlow f_129466_ -> f_129466_
    void <init>() -> <init>
    void preDispatchPacket(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketSendListener,boolean,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preDispatchPacket
    void postDispatchPacket(net.minecraft.network.protocol.Packet,net.minecraft.network.PacketSendListener,boolean,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postDispatchPacket
    void preProcessPacket(io.netty.channel.ChannelHandlerContext,net.minecraft.network.protocol.Packet,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preProcessPacket
    void postProcessPacket(io.netty.channel.ChannelHandlerContext,net.minecraft.network.protocol.Packet,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postProcessPacket
baritone.launch.mixins.MixinPalettedContainer -> baritone.launch.mixins.MixinPalettedContainer:
    java.lang.invoke.MethodHandle DATA_GETTER -> DATA_GETTER
    void <init>() -> <init>
    net.minecraft.world.level.chunk.Palette getPalette() -> getPalette
    net.minecraft.util.BitStorage getStorage() -> getStorage
    baritone.utils.accessor.IPalettedContainer$IData data() -> data
    java.lang.Throwable sneaky(java.lang.Throwable,java.lang.Class) -> sneaky
    void <clinit>() -> <clinit>
baritone.launch.mixins.MixinPalettedContainer$Data -> baritone.launch.mixins.MixinPalettedContainer$Data:
    void <init>() -> <init>
    net.minecraft.world.level.chunk.Palette getPalette() -> getPalette
    net.minecraft.util.BitStorage getStorage() -> getStorage
baritone.launch.mixins.MixinPlayerController -> baritone.launch.mixins.MixinPlayerController:
    void <init>() -> <init>
    void setIsHittingBlock(boolean) -> setIsHittingBlock
    net.minecraft.core.BlockPos getCurrentBlock() -> getCurrentBlock
    void callSyncCurrentPlayItem() -> callSyncCurrentPlayItem
baritone.launch.mixins.MixinScreen -> baritone.launch.mixins.MixinScreen:
    void <init>() -> <init>
    void openLinkInvoker(java.net.URI) -> openLinkInvoker
    void handleCustomClickEvent(net.minecraft.network.chat.Style,org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable) -> handleCustomClickEvent
baritone.launch.mixins.MixinWorldRenderer -> baritone.launch.mixins.MixinWorldRenderer:
    void <init>() -> <init>
    void onStartHand(com.mojang.blaze3d.vertex.PoseStack,float,long,boolean,net.minecraft.client.Camera,net.minecraft.client.renderer.GameRenderer,net.minecraft.client.renderer.LightTexture,org.joml.Matrix4f,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onStartHand
baritone.pathing.calc.AStarPathFinder -> baritone.bv:
    baritone.utils.pathing.Favoring favoring -> a
    baritone.pathing.movement.CalculationContext calcContext -> a
    void <init>(int,int,int,baritone.api.pathing.goals.Goal,baritone.utils.pathing.Favoring,baritone.pathing.movement.CalculationContext) -> <init>
    java.util.Optional calculate0(long,long) -> a
baritone.pathing.calc.AbstractNodeCostSearch -> baritone.bw:
    int startX -> a
    int startY -> b
    int startZ -> c
    baritone.api.pathing.goals.Goal goal -> a
    baritone.pathing.movement.CalculationContext context -> a
    it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap map -> a
    baritone.pathing.calc.PathNode startNode -> a
    baritone.pathing.calc.PathNode mostRecentConsidered -> b
    baritone.pathing.calc.PathNode[] bestSoFar -> a
    boolean isFinished -> b
    boolean cancelRequested -> a
    double[] COEFFICIENTS -> a
    void <init>(int,int,int,baritone.api.pathing.goals.Goal,baritone.pathing.movement.CalculationContext) -> <init>
    void cancel() -> a
    baritone.api.utils.PathCalculationResult calculate(long,long) -> calculate
    java.util.Optional calculate0(long,long) -> a
    double getDistFromStartSq(baritone.pathing.calc.PathNode) -> a
    baritone.pathing.calc.PathNode getNodeAtPosition(int,int,int,long) -> a
    java.util.Optional pathToMostRecentNodeConsidered() -> pathToMostRecentNodeConsidered
    java.util.Optional bestPathSoFar() -> bestPathSoFar
    java.util.Optional bestSoFar(boolean,int) -> a
    boolean isFinished() -> isFinished
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    baritone.api.utils.BetterBlockPos getStart() -> a
    int mapSize() -> a
    baritone.api.pathing.calc.IPath lambda$pathToMostRecentNodeConsidered$0(baritone.pathing.calc.PathNode) -> a
    void <clinit>() -> <clinit>
baritone.pathing.calc.Path -> baritone.bx:
    baritone.api.utils.BetterBlockPos start -> a
    baritone.api.utils.BetterBlockPos end -> b
    java.util.List path -> a
    java.util.List movements -> b
    java.util.List nodes -> c
    baritone.api.pathing.goals.Goal goal -> a
    int numNodes -> a
    baritone.pathing.movement.CalculationContext context -> a
    boolean verified -> a
    void <init>(baritone.pathing.calc.PathNode,baritone.pathing.calc.PathNode,int,baritone.api.pathing.goals.Goal,baritone.pathing.movement.CalculationContext) -> <init>
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    boolean assembleMovements() -> a
    baritone.pathing.movement.Movement runBackwards(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,double) -> a
    baritone.api.pathing.calc.IPath postProcess() -> postProcess
    java.util.List movements() -> movements
    java.util.List positions() -> positions
    int getNumNodesConsidered() -> getNumNodesConsidered
    baritone.api.utils.BetterBlockPos getSrc() -> getSrc
    baritone.api.utils.BetterBlockPos getDest() -> getDest
    void lambda$postProcess$0(baritone.pathing.movement.Movement) -> a
baritone.pathing.calc.PathNode -> baritone.by:
    int x -> a
    int y -> b
    int z -> c
    double estimatedCostToGoal -> a
    double cost -> b
    double combinedCost -> c
    baritone.pathing.calc.PathNode previous -> a
    int heapPosition -> d
    void <init>(int,int,int,baritone.api.pathing.goals.Goal) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
baritone.pathing.movement.CalculationContext -> baritone.bz:
    net.minecraft.world.item.ItemStack STACK_BUCKET_WATER -> a
    boolean safeForThreadedUse -> a
    baritone.api.IBaritone baritone -> a
    net.minecraft.world.level.Level world -> a
    baritone.cache.WorldData worldData -> a
    baritone.utils.BlockStateInterface bsi -> a
    baritone.utils.ToolSet toolSet -> a
    boolean hasWaterBucket -> b
    boolean hasThrowaway -> c
    boolean canSprint -> d
    double placeBlockCost -> a
    boolean allowBreak -> e
    java.util.List allowBreakAnyway -> a
    boolean allowParkour -> f
    boolean allowParkourPlace -> g
    boolean allowJumpAt256 -> h
    boolean allowParkourAscend -> i
    boolean assumeWalkOnWater -> j
    boolean allowFallIntoLava -> k
    int frostWalker -> a
    boolean allowDiagonalDescend -> l
    boolean allowDiagonalAscend -> m
    boolean allowDownward -> n
    int minFallHeight -> b
    int maxFallHeightNoWater -> c
    int maxFallHeightBucket -> d
    double waterWalkSpeed -> b
    double breakBlockAdditionalCost -> c
    double backtrackCostFavoringCoefficient -> d
    double jumpPenalty -> e
    double walkOnWaterOnePenalty -> f
    baritone.utils.pathing.BetterWorldBorder worldBorder -> a
    baritone.pathing.precompute.PrecomputedData precomputedData -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void <init>(baritone.api.IBaritone,boolean) -> <init>
    net.minecraft.world.level.block.state.BlockState get(int,int,int) -> a
    net.minecraft.world.level.block.state.BlockState get(net.minecraft.core.BlockPos) -> a
    net.minecraft.world.level.block.Block getBlock(int,int,int) -> a
    double costOfPlacingAt(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    double breakCostMultiplierAt(int,int,int,net.minecraft.world.level.block.state.BlockState) -> b
    double placeBucketCost() -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.Movement -> baritone.ca:
    net.minecraft.core.Direction[] HORIZONTALS_BUT_ALSO_DOWN_____SO_EVERY_DIRECTION_EXCEPT_UP -> a
    baritone.api.IBaritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    baritone.pathing.movement.MovementState currentState -> a
    baritone.api.utils.BetterBlockPos src -> a
    baritone.api.utils.BetterBlockPos dest -> b
    baritone.api.utils.BetterBlockPos[] positionsToBreak -> a
    baritone.api.utils.BetterBlockPos positionToPlace -> c
    java.lang.Double cost -> a
    java.util.List toBreakCached -> a
    java.util.List toPlaceCached -> c
    java.util.List toWalkIntoCached -> b
    java.util.Set validPositionsCached -> a
    java.lang.Boolean calculatedWhileLoaded -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos[],baritone.api.utils.BetterBlockPos) -> <init>
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos[]) -> <init>
    double getCost() -> getCost
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    java.util.Set getValidPositions() -> b
    boolean playerInValidPosition() -> a
    baritone.api.pathing.movement.MovementStatus update() -> update
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel() -> safeToCancel
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    baritone.api.utils.BetterBlockPos getSrc() -> getSrc
    baritone.api.utils.BetterBlockPos getDest() -> getDest
    void reset() -> reset
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    net.minecraft.core.BlockPos getDirection() -> getDirection
    void checkLoadedChunk(baritone.pathing.movement.CalculationContext) -> a
    boolean calculatedWhileLoaded() -> calculatedWhileLoaded
    void resetBlockCache() -> resetBlockCache
    java.util.List toBreak(baritone.utils.BlockStateInterface) -> a
    java.util.List toPlace(baritone.utils.BlockStateInterface) -> b
    java.util.List toWalkInto(baritone.utils.BlockStateInterface) -> c
    net.minecraft.core.BlockPos[] toBreakAll() -> a
    void lambda$update$2(baritone.api.utils.input.Input,java.lang.Boolean) -> a
    void lambda$update$1(baritone.api.utils.Rotation) -> a
    void lambda$update$0(net.minecraft.core.BlockPos) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.MovementHelper -> baritone.cb:
    boolean avoidBreaking(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    boolean avoidAdjacentBreaking(baritone.utils.BlockStateInterface,int,int,int,boolean) -> a
    boolean canWalkThrough(baritone.api.utils.IPlayerContext,baritone.api.utils.BetterBlockPos) -> a
    boolean canWalkThrough(baritone.utils.BlockStateInterface,int,int,int) -> a
    boolean canWalkThrough(baritone.pathing.movement.CalculationContext,int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    boolean canWalkThrough(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    boolean canWalkThrough(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> b
    baritone.pathing.precompute.Ternary canWalkThroughBlockState(net.minecraft.world.level.block.state.BlockState) -> a
    boolean canWalkThroughPosition(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> c
    baritone.pathing.precompute.Ternary fullyPassableBlockState(net.minecraft.world.level.block.state.BlockState) -> b
    boolean fullyPassable(baritone.pathing.movement.CalculationContext,int,int,int) -> b
    boolean fullyPassable(baritone.pathing.movement.CalculationContext,int,int,int,net.minecraft.world.level.block.state.BlockState) -> b
    boolean fullyPassable(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> a
    boolean fullyPassablePosition(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> d
    boolean isReplaceable$569aab80(int,int,net.minecraft.world.level.block.state.BlockState,baritone.utils.BlockStateInterface) -> a
    boolean isDoorPassable(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    boolean isGatePassable(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> b
    boolean avoidWalkingInto(net.minecraft.world.level.block.state.BlockState) -> a
    boolean canWalkOn(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> e
    baritone.pathing.precompute.Ternary canWalkOnBlockState(net.minecraft.world.level.block.state.BlockState) -> c
    boolean canWalkOnPosition(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> f
    boolean canWalkOn(baritone.pathing.movement.CalculationContext,int,int,int,net.minecraft.world.level.block.state.BlockState) -> c
    boolean canWalkOn(baritone.pathing.movement.CalculationContext,int,int,int) -> c
    boolean canWalkOn(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> b
    boolean canWalkOn(baritone.api.utils.IPlayerContext,baritone.api.utils.BetterBlockPos) -> b
    boolean canWalkOn(baritone.utils.BlockStateInterface,int,int,int) -> b
    boolean canUseFrostWalker(baritone.pathing.movement.CalculationContext,net.minecraft.world.level.block.state.BlockState) -> a
    boolean canUseFrostWalker(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> c
    boolean mustBeSolidToWalkOn(baritone.pathing.movement.CalculationContext,int,int,int,net.minecraft.world.level.block.state.BlockState) -> d
    boolean canPlaceAgainst(baritone.utils.BlockStateInterface,int,int,int) -> c
    boolean canPlaceAgainst(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> d
    boolean canPlaceAgainst$2eb49562(baritone.utils.BlockStateInterface,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    double getMiningDurationTicks(baritone.pathing.movement.CalculationContext,int,int,int,boolean) -> a
    double getMiningDurationTicks(baritone.pathing.movement.CalculationContext,int,int,int,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    boolean isBottomSlab(net.minecraft.world.level.block.state.BlockState) -> b
    void switchToBestToolFor(baritone.api.utils.IPlayerContext,net.minecraft.world.level.block.state.BlockState) -> a
    void switchToBestToolFor(baritone.api.utils.IPlayerContext,net.minecraft.world.level.block.state.BlockState,baritone.utils.ToolSet,boolean) -> a
    void moveTowards(baritone.api.utils.IPlayerContext,baritone.pathing.movement.MovementState,net.minecraft.core.BlockPos) -> a
    boolean isWater(net.minecraft.world.level.block.state.BlockState) -> c
    boolean isWater(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> e
    boolean isLava(net.minecraft.world.level.block.state.BlockState) -> d
    boolean isLiquid(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> f
    boolean isLiquid(net.minecraft.world.level.block.state.BlockState) -> e
    boolean possiblyFlowing(net.minecraft.world.level.block.state.BlockState) -> f
    boolean isFlowing(int,int,int,net.minecraft.world.level.block.state.BlockState,baritone.utils.BlockStateInterface) -> a
    boolean isBlockNormalCube(net.minecraft.world.level.block.state.BlockState) -> g
    baritone.pathing.movement.MovementHelper$PlaceResult attemptToPlaceABlock(baritone.pathing.movement.MovementState,baritone.api.IBaritone,net.minecraft.core.BlockPos,boolean,boolean) -> a
    boolean isTransparent(net.minecraft.world.level.block.Block) -> a
baritone.pathing.movement.MovementHelper$PlaceResult -> baritone.cb$a:
    baritone.pathing.movement.MovementHelper$PlaceResult READY_TO_PLACE -> a
    baritone.pathing.movement.MovementHelper$PlaceResult ATTEMPTING -> b
    baritone.pathing.movement.MovementHelper$PlaceResult NO_OPTION -> c
    baritone.pathing.movement.MovementHelper$PlaceResult[] $VALUES -> a
    baritone.pathing.movement.MovementHelper$PlaceResult[] values() -> values
    baritone.pathing.movement.MovementHelper$PlaceResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.pathing.movement.MovementState -> baritone.cc:
    baritone.api.pathing.movement.MovementStatus status -> a
    baritone.pathing.movement.MovementState$MovementTarget target -> a
    java.util.Map inputState -> a
    void <init>() -> <init>
    baritone.pathing.movement.MovementState setTarget(baritone.pathing.movement.MovementState$MovementTarget) -> a
    baritone.pathing.movement.MovementState setInput(baritone.api.utils.input.Input,boolean) -> a
baritone.pathing.movement.MovementState$MovementTarget -> baritone.cc$a:
    baritone.api.utils.Rotation rotation -> a
    boolean forceRotations -> a
    void <init>() -> <init>
    void <init>(baritone.api.utils.Rotation,boolean) -> <init>
baritone.pathing.movement.Moves -> baritone.cd:
    baritone.pathing.movement.Moves DOWNWARD -> a
    baritone.pathing.movement.Moves PILLAR -> b
    baritone.pathing.movement.Moves TRAVERSE_NORTH -> c
    baritone.pathing.movement.Moves TRAVERSE_SOUTH -> d
    baritone.pathing.movement.Moves TRAVERSE_EAST -> e
    baritone.pathing.movement.Moves TRAVERSE_WEST -> f
    baritone.pathing.movement.Moves ASCEND_NORTH -> g
    baritone.pathing.movement.Moves ASCEND_SOUTH -> h
    baritone.pathing.movement.Moves ASCEND_EAST -> i
    baritone.pathing.movement.Moves ASCEND_WEST -> j
    baritone.pathing.movement.Moves DESCEND_EAST -> k
    baritone.pathing.movement.Moves DESCEND_WEST -> l
    baritone.pathing.movement.Moves DESCEND_NORTH -> m
    baritone.pathing.movement.Moves DESCEND_SOUTH -> n
    baritone.pathing.movement.Moves DIAGONAL_NORTHEAST -> o
    baritone.pathing.movement.Moves DIAGONAL_NORTHWEST -> p
    baritone.pathing.movement.Moves DIAGONAL_SOUTHEAST -> q
    baritone.pathing.movement.Moves DIAGONAL_SOUTHWEST -> r
    baritone.pathing.movement.Moves PARKOUR_NORTH -> s
    baritone.pathing.movement.Moves PARKOUR_SOUTH -> t
    baritone.pathing.movement.Moves PARKOUR_EAST -> u
    baritone.pathing.movement.Moves PARKOUR_WEST -> v
    boolean dynamicXZ -> a
    boolean dynamicY -> b
    int xOffset -> a
    int yOffset -> b
    int zOffset -> c
    baritone.pathing.movement.Moves[] $VALUES -> a
    baritone.pathing.movement.Moves[] values() -> values
    baritone.pathing.movement.Moves valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int,boolean,boolean) -> <init>
    void <init>(java.lang.String,int,int,int,int) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.Moves$1 -> baritone.ce:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$10 -> baritone.cf:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$11 -> baritone.cg:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$12 -> baritone.ch:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$13 -> baritone.ci:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$14 -> baritone.cj:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$15 -> baritone.ck:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$16 -> baritone.cl:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$17 -> baritone.cm:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$18 -> baritone.cn:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$19 -> baritone.co:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$2 -> baritone.cp:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$20 -> baritone.cq:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$21 -> baritone.cr:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$22 -> baritone.cs:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$3 -> baritone.ct:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$4 -> baritone.cu:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$5 -> baritone.cv:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$6 -> baritone.cw:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$7 -> baritone.cx:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$8 -> baritone.cy:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$9 -> baritone.cz:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.movements.MovementAscend -> baritone.da:
    int ticksWithoutPlacement -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> reset
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
baritone.pathing.movement.movements.MovementDescend -> baritone.db:
    int numTicks -> a
    boolean forceSafeMode -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> reset
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    void cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
    boolean dynamicFallCost$2796ecd7(baritone.pathing.movement.CalculationContext,int,int,int,double,net.minecraft.world.level.block.state.BlockState,baritone.utils.pathing.MutableMoveResult) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeMode() -> b
    boolean skipToAscend() -> c
baritone.pathing.movement.movements.MovementDiagonal -> baritone.dc:
    double SQRT_2 -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,net.minecraft.core.Direction,net.minecraft.core.Direction,int) -> <init>
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,net.minecraft.core.Direction,int) -> <init>
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    void cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    java.util.List toBreak(baritone.utils.BlockStateInterface) -> a
    java.util.List toWalkInto(baritone.utils.BlockStateInterface) -> c
    void <clinit>() -> <clinit>
baritone.pathing.movement.movements.MovementDownward -> baritone.dd:
    int numTicks -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> reset
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
baritone.pathing.movement.movements.MovementFall -> baritone.de:
    net.minecraft.world.item.ItemStack STACK_BUCKET_WATER -> a
    net.minecraft.world.item.ItemStack STACK_BUCKET_EMPTY -> b
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    baritone.api.utils.BetterBlockPos[] buildPositionsToBreak(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> a
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.movements.MovementParkour -> baritone.df:
    baritone.api.utils.BetterBlockPos[] EMPTY -> b
    net.minecraft.core.Direction direction -> a
    int dist -> a
    boolean ascend -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,int,net.minecraft.core.Direction,boolean) -> <init>
    baritone.pathing.movement.movements.MovementParkour cost(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos,net.minecraft.core.Direction) -> a
    void cost(baritone.pathing.movement.CalculationContext,int,int,int,net.minecraft.core.Direction,baritone.utils.pathing.MutableMoveResult) -> a
    boolean checkOvershootSafety(baritone.utils.BlockStateInterface,int,int,int) -> d
    double costFromJumpDistance(int) -> a
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.movements.MovementPillar -> baritone.dg:
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    boolean hasAgainst(baritone.pathing.movement.CalculationContext,int,int,int) -> d
    net.minecraft.core.BlockPos getAgainst(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    baritone.pathing.movement.MovementState$MovementTarget lambda$updateState$0(baritone.api.utils.Rotation) -> a
baritone.pathing.movement.movements.MovementTraverse -> baritone.dh:
    boolean wasTheBridgeBlockAlwaysThere -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> reset
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    boolean prepared(baritone.pathing.movement.MovementState) -> a
baritone.pathing.movement.movements.MovementTraverse$1 -> baritone.di:
    int[] $SwitchMap$baritone$pathing$movement$MovementHelper$PlaceResult -> a
    void <clinit>() -> <clinit>
baritone.pathing.path.CutoffPath -> baritone.dj:
    java.util.List path -> a
    java.util.List movements -> b
    int numNodes -> a
    baritone.api.pathing.goals.Goal goal -> a
    void <init>(baritone.api.pathing.calc.IPath,int,int) -> <init>
    void <init>(baritone.api.pathing.calc.IPath,int) -> <init>
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    java.util.List movements() -> movements
    java.util.List positions() -> positions
    int getNumNodesConsidered() -> getNumNodesConsidered
baritone.pathing.path.PathExecutor -> baritone.dk:
    baritone.api.pathing.calc.IPath path -> a
    int pathPosition -> a
    int ticksAway -> b
    int ticksOnCurrent -> c
    java.lang.Double currentMovementOriginalCostEstimate -> a
    java.lang.Integer costEstimateIndex -> a
    boolean failed -> a
    boolean recalcBP -> c
    java.util.HashSet toBreak -> a
    java.util.HashSet toPlace -> b
    java.util.HashSet toWalkInto -> c
    baritone.behavior.PathingBehavior behavior -> a
    baritone.api.utils.IPlayerContext ctx -> a
    boolean sprintNextTick -> b
    void <init>(baritone.behavior.PathingBehavior,baritone.api.pathing.calc.IPath) -> <init>
    boolean onTick() -> a
    boolean possiblyOffPath(net.minecraft.util.Tuple,double) -> a
    net.minecraft.util.Tuple overrideFall(baritone.pathing.movement.movements.MovementFall) -> a
    boolean sprintableAscend(baritone.api.utils.IPlayerContext,baritone.pathing.movement.movements.MovementTraverse,baritone.pathing.movement.movements.MovementAscend,baritone.api.pathing.movement.IMovement) -> a
    boolean canSprintFromDescendInto(baritone.api.utils.IPlayerContext,baritone.api.pathing.movement.IMovement,baritone.api.pathing.movement.IMovement) -> a
    void onChangeInPathPosition() -> b
    void clearKeys() -> a
    void cancel() -> c
    int getPosition() -> getPosition
    baritone.pathing.path.PathExecutor trySplice(baritone.pathing.path.PathExecutor) -> a
    baritone.pathing.path.PathExecutor cutIfTooLong() -> a
    baritone.api.pathing.calc.IPath getPath() -> getPath
    boolean finished() -> b
    baritone.pathing.path.PathExecutor lambda$trySplice$0(baritone.pathing.path.PathExecutor,baritone.pathing.path.SplicedPath) -> a
baritone.pathing.path.SplicedPath -> baritone.dl:
    java.util.List path -> a
    java.util.List movements -> b
    int numNodes -> a
    baritone.api.pathing.goals.Goal goal -> a
    void <init>(java.util.List,java.util.List,int,baritone.api.pathing.goals.Goal) -> <init>
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    java.util.List movements() -> movements
    java.util.List positions() -> positions
    int getNumNodesConsidered() -> getNumNodesConsidered
    int length() -> length
    java.util.Optional trySplice$3527ad06(baritone.api.pathing.calc.IPath,baritone.api.pathing.calc.IPath) -> a
baritone.pathing.precompute.PrecomputedData -> baritone.dm:
    int[] data -> a
    void <init>() -> <init>
    int fillData(int,net.minecraft.world.level.block.state.BlockState) -> a
    boolean canWalkThrough(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    boolean fullyPassable(baritone.utils.BlockStateInterface,int,int,int,net.minecraft.world.level.block.state.BlockState) -> b
baritone.pathing.precompute.Ternary -> baritone.dn:
    baritone.pathing.precompute.Ternary YES -> a
    baritone.pathing.precompute.Ternary MAYBE -> b
    baritone.pathing.precompute.Ternary NO -> c
    baritone.pathing.precompute.Ternary[] $VALUES -> a
    baritone.pathing.precompute.Ternary[] values() -> values
    baritone.pathing.precompute.Ternary valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.process.BackfillProcess -> baritone.do:
    java.util.HashMap blocksToReplace -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> isActive
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    java.util.List toFillIn() -> a
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    boolean isTemporary() -> isTemporary
    double priority() -> priority
    boolean lambda$toFillIn$2(net.minecraft.core.BlockPos) -> a
    boolean lambda$toFillIn$1(net.minecraft.core.BlockPos) -> b
    boolean lambda$toFillIn$0(net.minecraft.core.BlockPos) -> c
baritone.process.BackfillProcess$1 -> baritone.dp:
    int[] $SwitchMap$baritone$pathing$movement$MovementHelper$PlaceResult -> a
    void <clinit>() -> <clinit>
baritone.process.BuilderProcess -> baritone.dq:
    java.util.HashSet incorrectPositions -> a
    it.unimi.dsi.fastutil.longs.LongOpenHashSet observedCompleted -> a
    java.lang.String name -> a
    baritone.api.schematic.ISchematic realSchematic -> b
    baritone.api.schematic.ISchematic schematic -> a
    net.minecraft.core.Vec3i origin -> a
    int ticks -> a
    boolean paused -> a
    int layer -> b
    int numRepeats -> c
    java.util.List approxPlaceable -> a
    int stopAtHeight -> d
    java.util.Set orientationProps -> a
    void <init>(baritone.Baritone) -> <init>
    void build(java.lang.String,baritone.api.schematic.ISchematic,net.minecraft.core.Vec3i) -> build
    void resume() -> resume
    void pause() -> pause
    boolean isPaused() -> isPaused
    boolean build(java.lang.String,java.io.File,net.minecraft.core.Vec3i) -> build
    baritone.api.schematic.ISchematic applyMapArtAndSelection(net.minecraft.core.Vec3i,baritone.api.schematic.IStaticSchematic) -> a
    void buildOpenSchematic() -> buildOpenSchematic
    void buildOpenLitematic(int) -> buildOpenLitematic
    void clearArea(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> clearArea
    java.util.List getApproxPlaceable() -> getApproxPlaceable
    boolean isActive() -> isActive
    java.util.Optional toBreakNearPlayer(baritone.process.BuilderProcess$BuilderCalculationContext) -> a
    java.util.Optional searchForPlacables(baritone.process.BuilderProcess$BuilderCalculationContext,java.util.List) -> a
    boolean placementPlausible(net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    java.util.OptionalInt hasAnyItemThatWouldPlace(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.phys.HitResult,baritone.api.utils.Rotation) -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    void recalcNearby(baritone.process.BuilderProcess$BuilderCalculationContext) -> a
    void fullRecalc(baritone.process.BuilderProcess$BuilderCalculationContext) -> b
    baritone.api.pathing.goals.Goal assemble(baritone.process.BuilderProcess$BuilderCalculationContext,java.util.List,boolean) -> a
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    java.util.List approxPlaceable(int) -> a
    boolean sameBlockstate(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState) -> a
    boolean valid(net.minecraft.world.level.block.state.BlockState,net.minecraft.world.level.block.state.BlockState,boolean) -> a
    java.lang.String lambda$assemble$8(baritone.api.utils.BetterBlockPos) -> a
    java.lang.String lambda$assemble$7(java.util.Map$Entry) -> a
    void lambda$assemble$6(java.util.List,baritone.api.utils.BetterBlockPos) -> a
    void lambda$assemble$5(java.util.List,java.util.List,baritone.process.BuilderProcess$BuilderCalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void lambda$assemble$4(java.util.List,baritone.process.BuilderProcess$BuilderCalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void lambda$assemble$3(baritone.process.BuilderProcess$BuilderCalculationContext,java.util.List,java.util.List,java.util.Map,java.util.List,java.util.List,java.util.List,baritone.api.utils.BetterBlockPos) -> a
    boolean lambda$trim$2(baritone.api.utils.BetterBlockPos) -> a
    int lambda$build$1(baritone.api.selection.ISelection) -> a
    int lambda$build$0(baritone.api.selection.ISelection) -> b
    baritone.Baritone access$000(baritone.process.BuilderProcess) -> a
    void <clinit>() -> <clinit>
baritone.process.BuilderProcess$1 -> baritone.dr:
    void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.BlockHitResult) -> <init>
baritone.process.BuilderProcess$2 -> baritone.ds:
    baritone.api.schematic.ISchematic val$realSchematic -> a
    int val$minYInclusive -> a
    int val$maxYInclusive -> b
    baritone.process.BuilderProcess this$0 -> a
    void <init>(baritone.process.BuilderProcess,baritone.api.schematic.ISchematic,int,int) -> <init>
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
    boolean inSchematic(int,int,int,net.minecraft.world.level.block.state.BlockState) -> inSchematic
    void reset() -> reset
    int widthX() -> widthX
    int heightY() -> heightY
    int lengthZ() -> lengthZ
baritone.process.BuilderProcess$3 -> baritone.dt:
    void <init>(net.minecraft.core.BlockPos) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
baritone.process.BuilderProcess$4 -> baritone.du:
    void <init>(net.minecraft.world.level.Level,net.minecraft.world.entity.player.Player,net.minecraft.world.InteractionHand,net.minecraft.world.item.ItemStack,net.minecraft.world.phys.BlockHitResult) -> <init>
baritone.process.BuilderProcess$5 -> baritone.dv:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    void <clinit>() -> <clinit>
baritone.process.BuilderProcess$BuilderCalculationContext -> baritone.dq$a:
    java.util.List placeable -> b
    baritone.api.schematic.ISchematic schematic -> a
    int originX -> e
    int originY -> f
    int originZ -> g
    baritone.process.BuilderProcess this$0 -> a
    void <init>(baritone.process.BuilderProcess) -> <init>
    net.minecraft.world.level.block.state.BlockState getSchematic(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    double costOfPlacingAt(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    double breakCostMultiplierAt(int,int,int,net.minecraft.world.level.block.state.BlockState) -> b
baritone.process.BuilderProcess$GoalAdjacent -> baritone.dq$b:
    boolean allowSameLevel -> a
    net.minecraft.core.BlockPos no -> a
    void <init>(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,boolean) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.BuilderProcess$GoalBreak -> baritone.dq$c:
    void <init>(net.minecraft.core.BlockPos) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
baritone.process.BuilderProcess$GoalPlace -> baritone.dq$d:
    void <init>(net.minecraft.core.BlockPos) -> <init>
    double heuristic(int,int,int) -> heuristic
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.BuilderProcess$JankyGoalComposite -> baritone.dq$e:
    baritone.api.pathing.goals.Goal primary -> a
    baritone.api.pathing.goals.Goal fallback -> b
    void <init>(baritone.api.pathing.goals.Goal,baritone.api.pathing.goals.Goal) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.BuilderProcess$Placement -> baritone.dq$f:
    int hotbarSelection -> a
    net.minecraft.core.BlockPos placeAgainst -> a
    net.minecraft.core.Direction side -> a
    baritone.api.utils.Rotation rot -> a
    void <init>(int,net.minecraft.core.BlockPos,net.minecraft.core.Direction,baritone.api.utils.Rotation) -> <init>
baritone.process.CustomGoalProcess -> baritone.dw:
    baritone.api.pathing.goals.Goal goal -> a
    baritone.api.pathing.goals.Goal mostRecentGoal -> b
    baritone.process.CustomGoalProcess$State state -> a
    void <init>(baritone.Baritone) -> <init>
    void setGoal(baritone.api.pathing.goals.Goal) -> setGoal
    void path() -> path
    baritone.api.pathing.goals.Goal getGoal() -> getGoal
    baritone.api.pathing.goals.Goal mostRecentGoal() -> mostRecentGoal
    boolean isActive() -> isActive
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
baritone.process.CustomGoalProcess$1 -> baritone.dx:
    int[] $SwitchMap$baritone$process$CustomGoalProcess$State -> a
    void <clinit>() -> <clinit>
baritone.process.CustomGoalProcess$State -> baritone.dw$a:
    baritone.process.CustomGoalProcess$State NONE -> a
    baritone.process.CustomGoalProcess$State GOAL_SET -> b
    baritone.process.CustomGoalProcess$State PATH_REQUESTED -> c
    baritone.process.CustomGoalProcess$State EXECUTING -> d
    baritone.process.CustomGoalProcess$State[] $VALUES -> a
    baritone.process.CustomGoalProcess$State[] values() -> values
    baritone.process.CustomGoalProcess$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.process.ElytraProcess -> baritone.dy:
    baritone.process.ElytraProcess$State state -> a
    boolean goingToLandingSpot -> a
    baritone.api.utils.BetterBlockPos landingSpot -> a
    boolean reachedGoal -> b
    baritone.api.pathing.goals.Goal goal -> a
    baritone.process.elytra.ElytraBehavior behavior -> a
    boolean predictingTerrain -> c
    java.util.Set badLandingSpots -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.api.process.IElytraProcess create(baritone.Baritone) -> a
    boolean isActive() -> isActive
    void resetState() -> resetState
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    void landingSpotIsBad(baritone.api.utils.BetterBlockPos) -> a
    void onLostControl() -> onLostControl
    void destroyBehaviorAsync() -> a
    double priority() -> priority
    java.lang.String displayName0() -> displayName0
    void repackChunks() -> repackChunks
    net.minecraft.core.BlockPos currentDestination() -> currentDestination
    void pathTo(net.minecraft.core.BlockPos) -> pathTo
    void pathTo0(net.minecraft.core.BlockPos,boolean) -> a
    void pathTo(baritone.api.pathing.goals.Goal) -> pathTo
    boolean shouldLandForSafety() -> a
    boolean isLoaded() -> isLoaded
    boolean isSafeToCancel() -> isSafeToCancel
    void onRenderPass(baritone.api.event.events.RenderEvent) -> onRenderPass
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> onWorldEvent
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> onChunkEvent
    void onBlockChange(baritone.api.event.events.BlockChangeEvent) -> onBlockChange
    void onReceivePacket(baritone.api.event.events.PacketEvent) -> onReceivePacket
    void onPostTick(baritone.api.event.events.TickEvent) -> onPostTick
    boolean isSafeBlock(net.minecraft.world.level.block.Block) -> a
    boolean isSafeBlock(net.minecraft.core.BlockPos) -> a
    boolean isColumnAir$4aa615de(net.minecraft.core.BlockPos) -> b
    boolean hasAirBubble(net.minecraft.core.BlockPos) -> c
    baritone.api.utils.BetterBlockPos checkLandingSpot(net.minecraft.core.BlockPos,it.unimi.dsi.fastutil.longs.LongOpenHashSet) -> a
    int lambda$findSafeLandingSpot$3(baritone.api.utils.BetterBlockPos) -> a
    int lambda$findSafeLandingSpot$2(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> a
    void lambda$onTick$1(java.lang.Void,java.lang.Throwable) -> a
    boolean lambda$onTick$0(baritone.api.pathing.movement.IMovement) -> a
baritone.process.ElytraProcess$State -> baritone.dy$a:
    baritone.process.ElytraProcess$State LOCATE_JUMP -> a
    baritone.process.ElytraProcess$State PAUSE -> b
    baritone.process.ElytraProcess$State GET_TO_JUMP -> c
    baritone.process.ElytraProcess$State START_FLYING -> d
    baritone.process.ElytraProcess$State FLYING -> e
    baritone.process.ElytraProcess$State LANDING -> f
    java.lang.String description -> a
    baritone.process.ElytraProcess$State[] $VALUES -> a
    baritone.process.ElytraProcess$State[] values() -> values
    baritone.process.ElytraProcess$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
baritone.process.ElytraProcess$WalkOffCalculationContext -> baritone.dy$b:
    void <init>(baritone.api.IBaritone) -> <init>
    double costOfPlacingAt(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
    double breakCostMultiplierAt(int,int,int,net.minecraft.world.level.block.state.BlockState) -> b
    double placeBucketCost() -> a
baritone.process.ExploreProcess -> baritone.dz:
    net.minecraft.core.BlockPos explorationOrigin -> a
    baritone.process.ExploreProcess$IChunkFilter filter -> a
    int distanceCompleted -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> isActive
    void explore(int,int) -> explore
    void applyJsonFilter(java.nio.file.Path,boolean) -> applyJsonFilter
    baritone.process.ExploreProcess$IChunkFilter calcFilter() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    baritone.api.pathing.goals.Goal[] closestUncachedChunks(net.minecraft.core.BlockPos,baritone.process.ExploreProcess$IChunkFilter) -> a
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    baritone.api.pathing.goals.Goal[] lambda$closestUncachedChunks$1(int) -> a
    baritone.api.pathing.goals.Goal lambda$closestUncachedChunks$0(net.minecraft.core.BlockPos) -> a
    baritone.Baritone access$000(baritone.process.ExploreProcess) -> a
baritone.process.ExploreProcess$1 -> baritone.ea:
    void <init>(int,int) -> <init>
    double heuristic(int,int,int) -> heuristic
baritone.process.ExploreProcess$2 -> baritone.eb:
    int[] $SwitchMap$baritone$process$ExploreProcess$Status -> a
    void <clinit>() -> <clinit>
baritone.process.ExploreProcess$BaritoneChunkCache -> baritone.dz$a:
    baritone.api.cache.ICachedWorld cache -> a
    baritone.process.ExploreProcess this$0 -> a
    void <init>(baritone.process.ExploreProcess) -> <init>
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
    void lambda$isAlreadyExplored$0(int,int) -> a
baritone.process.ExploreProcess$EitherChunk -> baritone.dz$b:
    baritone.process.ExploreProcess$IChunkFilter a -> a
    baritone.process.ExploreProcess$IChunkFilter b -> b
    void <init>(baritone.process.ExploreProcess$IChunkFilter,baritone.process.ExploreProcess$IChunkFilter) -> <init>
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
baritone.process.ExploreProcess$IChunkFilter -> baritone.dz$c:
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
baritone.process.ExploreProcess$JsonChunkFilter -> baritone.dz$d:
    boolean invert -> a
    it.unimi.dsi.fastutil.longs.LongOpenHashSet inFilter -> a
    baritone.api.utils.MyChunkPos[] positions -> a
    baritone.process.ExploreProcess this$0 -> a
    void <init>(baritone.process.ExploreProcess,java.nio.file.Path,boolean) -> <init>
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
baritone.process.ExploreProcess$Status -> baritone.dz$e:
    baritone.process.ExploreProcess$Status EXPLORED -> a
    baritone.process.ExploreProcess$Status NOT_EXPLORED -> b
    baritone.process.ExploreProcess$Status UNKNOWN -> c
    baritone.process.ExploreProcess$Status[] $VALUES -> a
    baritone.process.ExploreProcess$Status[] values() -> values
    baritone.process.ExploreProcess$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.process.FarmProcess -> baritone.ec:
    boolean active -> a
    java.util.List locations -> a
    int tickCount -> a
    int range -> b
    net.minecraft.core.BlockPos center -> a
    java.util.List FARMLAND_PLANTABLE -> b
    java.util.List PICKUP_DROPPED -> c
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> isActive
    void farm(int,net.minecraft.core.BlockPos) -> farm
    boolean readyForHarvest(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    boolean isPlantable(net.minecraft.world.item.ItemStack) -> a
    boolean isBoneMeal(net.minecraft.world.item.ItemStack) -> b
    boolean isNetherWart(net.minecraft.world.item.ItemStack) -> c
    boolean isCocoa(net.minecraft.world.item.ItemStack) -> d
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    void lambda$onTick$0(java.util.ArrayList) -> a
    void <clinit>() -> <clinit>
baritone.process.FarmProcess$Harvest -> baritone.ec$a:
    baritone.process.FarmProcess$Harvest WHEAT -> a
    baritone.process.FarmProcess$Harvest CARROTS -> b
    baritone.process.FarmProcess$Harvest POTATOES -> c
    baritone.process.FarmProcess$Harvest BEETROOT -> d
    baritone.process.FarmProcess$Harvest PUMPKIN -> e
    baritone.process.FarmProcess$Harvest MELON -> f
    baritone.process.FarmProcess$Harvest NETHERWART -> g
    baritone.process.FarmProcess$Harvest COCOA -> h
    baritone.process.FarmProcess$Harvest SUGARCANE -> i
    baritone.process.FarmProcess$Harvest CACTUS -> j
    net.minecraft.world.level.block.Block block -> a
    java.util.function.Predicate readyToHarvest -> a
    baritone.process.FarmProcess$Harvest[] $VALUES -> a
    baritone.process.FarmProcess$Harvest[] values() -> values
    baritone.process.FarmProcess$Harvest valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,net.minecraft.world.level.block.CropBlock) -> <init>
    void <init>(java.lang.String,int,net.minecraft.world.level.block.Block,java.util.function.Predicate) -> <init>
    boolean readyToHarvest(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
    boolean lambda$static$3(net.minecraft.world.level.block.state.BlockState) -> a
    boolean lambda$static$2(net.minecraft.world.level.block.state.BlockState) -> b
    boolean lambda$static$1(net.minecraft.world.level.block.state.BlockState) -> c
    boolean lambda$static$0(net.minecraft.world.level.block.state.BlockState) -> d
    void <clinit>() -> <clinit>
baritone.process.FarmProcess$Harvest$1 -> baritone.ed:
    void <init>(java.lang.String,net.minecraft.world.level.block.Block,java.util.function.Predicate) -> <init>
    boolean readyToHarvest(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
baritone.process.FarmProcess$Harvest$2 -> baritone.ee:
    void <init>(java.lang.String,net.minecraft.world.level.block.Block,java.util.function.Predicate) -> <init>
    boolean readyToHarvest(net.minecraft.world.level.Level,net.minecraft.core.BlockPos,net.minecraft.world.level.block.state.BlockState) -> a
baritone.process.FollowProcess -> baritone.ef:
    java.util.function.Predicate filter -> a
    java.util.List cache -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    baritone.api.pathing.goals.Goal towards(net.minecraft.world.entity.Entity) -> a
    boolean followable(net.minecraft.world.entity.Entity) -> a
    void scanWorld() -> a
    boolean isActive() -> isActive
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    void follow(java.util.function.Predicate) -> follow
    java.util.List following() -> following
    java.util.function.Predicate currentFilter() -> currentFilter
    baritone.api.pathing.goals.Goal[] lambda$onTick$0(int) -> a
baritone.process.GetToBlockProcess -> baritone.eg:
    baritone.api.utils.BlockOptionalMeta gettingTo -> a
    java.util.List knownLocations -> a
    java.util.List blacklist -> b
    net.minecraft.core.BlockPos start -> a
    int tickCount -> a
    int arrivalTickCount -> b
    void <init>(baritone.Baritone) -> <init>
    void getToBlock(baritone.api.utils.BlockOptionalMeta) -> getToBlock
    boolean isActive() -> isActive
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    boolean blacklistClosest() -> blacklistClosest
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    void rescan(java.util.List,baritone.pathing.movement.CalculationContext) -> a
    baritone.api.pathing.goals.Goal createGoal(net.minecraft.core.BlockPos) -> a
    boolean rightClick() -> a
    boolean rightClickOnArrival(net.minecraft.world.level.block.Block) -> a
    void lambda$onTick$1(java.util.List,baritone.pathing.movement.CalculationContext) -> b
    baritone.api.pathing.goals.Goal[] lambda$onTick$0(int) -> a
    baritone.Baritone access$001(baritone.process.GetToBlockProcess) -> a
baritone.process.GetToBlockProcess$1 -> baritone.eh:
    void <init>(net.minecraft.core.BlockPos[]) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic() -> heuristic
baritone.process.GetToBlockProcess$GetToBlockCalculationContext -> baritone.eg$a:
    void <init>(baritone.process.GetToBlockProcess,boolean) -> <init>
    double breakCostMultiplierAt(int,int,int,net.minecraft.world.level.block.state.BlockState) -> b
baritone.process.InventoryPauserProcess -> baritone.ei:
    boolean pauseRequestedLastTick -> a
    boolean safeToCancelLastTick -> b
    int ticksOfStationary -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> isActive
    boolean stationaryForInventoryMove() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    double priority() -> priority
    boolean isTemporary() -> isTemporary
baritone.process.MineProcess -> baritone.ej:
    baritone.api.utils.BlockOptionalMetaLookup filter -> a
    java.util.List knownOreLocations -> a
    java.util.List blacklist -> b
    java.util.Map anticipatedDrops -> a
    net.minecraft.core.BlockPos branchPoint -> a
    baritone.api.pathing.goals.GoalRunAway branchPointRunaway -> a
    int desiredQuantity -> a
    int tickCount -> b
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> isActive
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    void rescan(java.util.List,baritone.pathing.movement.CalculationContext) -> a
    boolean internalMiningGoal(net.minecraft.core.BlockPos,baritone.pathing.movement.CalculationContext,java.util.List) -> a
    java.util.List droppedItemsScan() -> a
    java.util.List searchWorld$ce463e5(baritone.pathing.movement.CalculationContext,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,java.util.List,java.util.List) -> a
    boolean addNearby() -> a
    java.util.List prune$79f92267(baritone.pathing.movement.CalculationContext,java.util.List,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,java.util.List) -> a
    boolean plausibleToBreak(baritone.pathing.movement.CalculationContext,net.minecraft.core.BlockPos) -> a
    void mineByName(int,java.lang.String[]) -> mineByName
    void mine(int,baritone.api.utils.BlockOptionalMetaLookup) -> mine
    baritone.api.utils.BlockOptionalMetaLookup filterFilter() -> a
    baritone.api.utils.BlockOptionalMeta[] lambda$filterFilter$17(int) -> a
    boolean lambda$filterFilter$16(baritone.api.utils.BlockOptionalMeta) -> a
    boolean lambda$prune$15(java.util.List,net.minecraft.core.BlockPos) -> a
    boolean lambda$prune$14(net.minecraft.core.BlockPos) -> a
    boolean lambda$prune$13(baritone.pathing.movement.CalculationContext,net.minecraft.core.BlockPos) -> b
    boolean lambda$prune$12(baritone.pathing.movement.CalculationContext,net.minecraft.core.BlockPos) -> c
    boolean lambda$prune$11(baritone.pathing.movement.CalculationContext,net.minecraft.core.BlockPos) -> d
    boolean lambda$prune$10(baritone.pathing.movement.CalculationContext,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,net.minecraft.core.BlockPos) -> a
    boolean lambda$prune$9(java.util.List,baritone.api.utils.BlockOptionalMetaLookup,baritone.pathing.movement.CalculationContext,net.minecraft.core.BlockPos) -> a
    boolean lambda$addNearby$8(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    baritone.api.pathing.goals.Goal[] lambda$updateGoal$7(int) -> a
    baritone.api.pathing.goals.Goal lambda$updateGoal$6(java.util.List,baritone.pathing.movement.CalculationContext,net.minecraft.core.BlockPos) -> a
    void lambda$updateLoucaSystem$5(java.util.Map,net.minecraft.core.BlockPos) -> a
    boolean lambda$onTick$4(net.minecraft.core.BlockPos) -> b
    boolean lambda$onTick$3(net.minecraft.core.BlockPos) -> c
    boolean lambda$onTick$2(net.minecraft.core.BlockPos) -> d
    void lambda$onTick$1(java.util.List,baritone.pathing.movement.CalculationContext) -> b
    boolean lambda$onTick$0(net.minecraft.world.item.ItemStack) -> a
baritone.process.MineProcess$1 -> baritone.ek:
    void <init>(java.lang.Integer,net.minecraft.core.BlockPos[]) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic() -> heuristic
baritone.process.MineProcess$GoalThreeBlocks -> baritone.ej$a:
    void <init>(net.minecraft.core.BlockPos) -> <init>
    boolean isInGoal(int,int,int) -> isInGoal
    double heuristic(int,int,int) -> heuristic
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.elytra.BlockStateOctreeInterface -> baritone.el:
    long contextPtr -> a
    long chunkPtr -> b
    int prevChunkX -> a
    int prevChunkZ -> b
    void <init>(baritone.process.elytra.NetherPathfinderContext) -> <init>
baritone.process.elytra.ElytraBehavior -> baritone.em:
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    java.util.List clearLines -> a
    java.util.List blockedLines -> b
    java.util.List simulationLine -> c
    net.minecraft.core.BlockPos aimPos -> a
    java.util.List visiblePath -> d
    baritone.process.elytra.NetherPathfinderContext context -> a
    baritone.process.elytra.ElytraBehavior$PathManager pathManager -> a
    baritone.process.ElytraProcess process -> a
    int remainingFireworkTicks -> a
    int remainingSetBackTicks -> b
    boolean landingMode -> a
    int minimumBoostTicks -> c
    boolean deployedFireworkLastTick -> b
    int[] nextTickBoostCounter -> a
    baritone.utils.BlockStateInterface bsi -> a
    baritone.process.elytra.BlockStateOctreeInterface boi -> a
    baritone.api.utils.BetterBlockPos destination -> a
    boolean appendDestination -> c
    java.util.concurrent.ExecutorService solverExecutor -> a
    java.util.concurrent.Future solver -> a
    baritone.process.elytra.ElytraBehavior$Solution pendingSolution -> a
    boolean solveNextTick -> d
    long timeLastCacheCull -> a
    int invTickCountdown -> d
    java.util.Queue invTransactionQueue -> a
    void <init>(baritone.Baritone,baritone.process.ElytraProcess,net.minecraft.core.BlockPos,boolean) -> <init>
    void onReceivePacket(baritone.api.event.events.PacketEvent) -> a
    void pathTo() -> a
    void destroy() -> b
    void repackChunks() -> c
    void onPostTick(baritone.api.event.events.TickEvent) -> a
    baritone.process.elytra.ElytraBehavior$Solution solveAngles(baritone.process.elytra.ElytraBehavior$SolverContext) -> a
    void tickUseFireworks(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,boolean,boolean) -> a
    boolean isFireworks(net.minecraft.world.item.ItemStack) -> a
    boolean isBoostingFireworks(net.minecraft.world.item.ItemStack) -> b
    java.util.OptionalInt getFireworkBoost(net.minecraft.world.item.ItemStack) -> a
    java.util.Optional getAttachedFirework() -> a
    boolean isHitboxClear(baritone.process.elytra.ElytraBehavior$SolverContext,net.minecraft.world.phys.Vec3,java.lang.Double) -> a
    boolean clearView(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3,boolean) -> a
    it.unimi.dsi.fastutil.floats.FloatArrayList pitchesToSolveFor(float,boolean) -> a
    java.util.List simulate(baritone.process.elytra.ElytraBehavior$SolverContext,net.minecraft.world.phys.Vec3,float,int,int,int) -> a
    boolean passable(int,int,int,boolean) -> a
    void queueWindowClick$299d55cb(int,int,net.minecraft.world.inventory.ClickType) -> a
    int findGoodElytra() -> a
    void lambda$queueWindowClick$8(int,int,int,net.minecraft.world.inventory.ClickType) -> a
    baritone.process.elytra.ElytraBehavior$PitchResult lambda$solvePitch$7(baritone.process.elytra.ElytraBehavior$IntTriFunction,baritone.process.elytra.ElytraBehavior$IntTriple) -> a
    baritone.process.elytra.ElytraBehavior$PitchResult lambda$solvePitch$6(baritone.process.elytra.ElytraBehavior$IntTriFunction,baritone.process.elytra.ElytraBehavior$IntTriple) -> b
    baritone.process.elytra.ElytraBehavior$PitchResult lambda$solvePitch$5(baritone.process.elytra.ElytraBehavior$SolverContext,net.minecraft.world.phys.Vec3,int,it.unimi.dsi.fastutil.floats.FloatArrayList,int,int,int) -> a
    net.minecraft.world.entity.projectile.FireworkRocketEntity lambda$getAttachedFirework$4(net.minecraft.world.entity.Entity) -> a
    boolean lambda$getAttachedFirework$3(net.minecraft.world.entity.Entity) -> a
    boolean lambda$getAttachedFirework$2(net.minecraft.world.entity.Entity) -> b
    baritone.process.elytra.ElytraBehavior$Solution lambda$onPostTick$1(baritone.process.elytra.ElytraBehavior$SolverContext) -> b
    void lambda$onReceivePacket$0() -> d
baritone.process.elytra.ElytraBehavior$FireworkBoost -> baritone.em$a:
    java.lang.Integer fireworkTicksExisted -> a
    int minimumBoostTicks -> b
    int maximumBoostTicks -> a
    void <init>(java.lang.Integer,int) -> <init>
    boolean isBoosted() -> a
    int getGuaranteedBoostTicks() -> a
    boolean equals(java.lang.Object) -> equals
baritone.process.elytra.ElytraBehavior$IntTriFunction -> baritone.em$b:
    java.lang.Object apply(int,int,int) -> apply
baritone.process.elytra.ElytraBehavior$IntTriple -> baritone.em$c:
    int first -> a
    int second -> b
    int third -> c
    void <init>(int,int,int) -> <init>
baritone.process.elytra.ElytraBehavior$PathManager -> baritone.em$d:
    baritone.process.elytra.NetherPath path -> a
    boolean completePath -> a
    boolean recalculating -> b
    int maxPlayerNear -> a
    int ticksNearUnchanged -> b
    int playerNear -> c
    baritone.process.elytra.ElytraBehavior this$0 -> a
    void <init>(baritone.process.elytra.ElytraBehavior) -> <init>
    java.util.concurrent.CompletableFuture pathToDestination() -> a
    java.util.concurrent.CompletableFuture pathToDestination(net.minecraft.core.BlockPos) -> a
    java.util.concurrent.CompletableFuture pathRecalcSegment(java.util.OptionalInt) -> a
    void pathNextSegment(int) -> a
    void clear() -> a
    void setPath(baritone.process.elytra.UnpackedSegment) -> a
    java.util.concurrent.CompletableFuture path0(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos,java.util.function.UnaryOperator) -> a
    void pathfindAroundObstacles() -> b
    void updatePlayerNear() -> c
    void lambda$pathfindAroundObstacles$9() -> d
    void lambda$pathfindAroundObstacles$8(baritone.api.utils.BetterBlockPos,double,long) -> a
    void lambda$pathfindAroundObstacles$7() -> e
    void lambda$pathNextSegment$6(baritone.api.utils.BetterBlockPos,java.lang.Void,java.lang.Throwable) -> a
    void lambda$pathNextSegment$5(java.util.List,long) -> a
    baritone.process.elytra.UnpackedSegment lambda$pathNextSegment$4(java.util.List,baritone.process.elytra.UnpackedSegment) -> a
    void lambda$pathRecalcSegment$3(java.lang.Void,java.lang.Throwable) -> a
    baritone.process.elytra.UnpackedSegment lambda$pathRecalcSegment$2(java.util.List,boolean,java.util.OptionalInt,baritone.process.elytra.UnpackedSegment) -> a
    void lambda$pathToDestination$1(java.lang.Void,java.lang.Throwable) -> b
    void lambda$pathToDestination$0(long) -> a
baritone.process.elytra.ElytraBehavior$PitchResult -> baritone.em$e:
    float pitch -> a
    double dot -> a
    java.util.List steps -> a
    void <init>(float,double,java.util.List) -> <init>
baritone.process.elytra.ElytraBehavior$Solution -> baritone.em$f:
    baritone.process.elytra.ElytraBehavior$SolverContext context -> a
    baritone.api.utils.Rotation rotation -> a
    net.minecraft.world.phys.Vec3 goingTo -> a
    boolean solvedPitch -> a
    boolean forceUseFirework -> b
    void <init>(baritone.process.elytra.ElytraBehavior$SolverContext,baritone.api.utils.Rotation,net.minecraft.world.phys.Vec3,boolean,boolean) -> <init>
baritone.process.elytra.ElytraBehavior$SolverContext -> baritone.em$g:
    baritone.process.elytra.NetherPath path -> a
    int playerNear -> a
    net.minecraft.world.phys.Vec3 start -> a
    net.minecraft.world.phys.Vec3 motion -> b
    net.minecraft.world.phys.AABB boundingBox -> a
    boolean ignoreLava -> a
    baritone.process.elytra.ElytraBehavior$FireworkBoost boost -> a
    baritone.api.behavior.look.IAimProcessor aimProcessor -> a
    void <init>(baritone.process.elytra.ElytraBehavior,boolean) -> <init>
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer lambda$new$0(net.minecraft.world.entity.projectile.FireworkRocketEntity) -> a
baritone.process.elytra.NetherPath -> baritone.en:
    baritone.process.elytra.NetherPath EMPTY_PATH -> a
    java.util.List backing -> a
    void <init>(java.util.List) -> <init>
    baritone.api.utils.BetterBlockPos get(int) -> a
    int size() -> size
    baritone.api.utils.BetterBlockPos getLast() -> a
    net.minecraft.world.phys.Vec3 getVec(int) -> a
    baritone.process.elytra.NetherPath emptyPath() -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
baritone.process.elytra.NetherPathfinderContext -> baritone.eo:
    net.minecraft.world.level.block.state.BlockState AIR_BLOCK_STATE -> a
    java.lang.Object cullingLock -> a
    long context -> a
    long seed -> b
    java.util.concurrent.ExecutorService executor -> a
    void <init>(long) -> <init>
    void queueCacheCulling(int,int,int,baritone.process.elytra.BlockStateOctreeInterface) -> a
    void queueForPacking(net.minecraft.world.level.chunk.LevelChunk) -> a
    void queueBlockUpdate(baritone.api.event.events.BlockChangeEvent) -> a
    java.util.concurrent.CompletableFuture pathFindAsync(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    boolean raytrace(net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> a
    boolean isSupported() -> a
    dev.babbaj.pathfinder.PathSegment lambda$pathFindAsync$4(net.minecraft.core.BlockPos,net.minecraft.core.BlockPos) -> a
    void lambda$queueBlockUpdate$3(baritone.api.event.events.BlockChangeEvent) -> b
    void lambda$queueBlockUpdate$2(long,baritone.api.utils.Pair) -> a
    void lambda$queueForPacking$1(java.lang.ref.SoftReference) -> a
    void lambda$queueCacheCulling$0(baritone.process.elytra.BlockStateOctreeInterface,int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.process.elytra.NullElytraProcess -> baritone.ep:
    void <init>(baritone.Baritone) -> <init>
    void repackChunks() -> repackChunks
    net.minecraft.core.BlockPos currentDestination() -> currentDestination
    void pathTo(net.minecraft.core.BlockPos) -> pathTo
    void pathTo(baritone.api.pathing.goals.Goal) -> pathTo
    void resetState() -> resetState
    boolean isActive() -> isActive
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> onTick
    void onLostControl() -> onLostControl
    java.lang.String displayName0() -> displayName0
    boolean isLoaded() -> isLoaded
    boolean isSafeToCancel() -> isSafeToCancel
baritone.process.elytra.PathCalculationException -> baritone.eq:
    void <init>(java.lang.String) -> <init>
baritone.process.elytra.UnpackedSegment -> baritone.er:
    java.util.stream.Stream path -> a
    boolean finished -> a
    void <init>(java.util.stream.Stream,boolean) -> <init>
    baritone.process.elytra.UnpackedSegment from(dev.babbaj.pathfinder.PathSegment) -> a
baritone.selection.Selection -> baritone.es:
    baritone.api.utils.BetterBlockPos pos1 -> a
    baritone.api.utils.BetterBlockPos pos2 -> b
    baritone.api.utils.BetterBlockPos min -> c
    baritone.api.utils.BetterBlockPos max -> d
    net.minecraft.core.Vec3i size -> a
    net.minecraft.world.phys.AABB aabb -> a
    void <init>(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    baritone.api.utils.BetterBlockPos pos1() -> pos1
    baritone.api.utils.BetterBlockPos pos2() -> pos2
    baritone.api.utils.BetterBlockPos min() -> min
    baritone.api.utils.BetterBlockPos max() -> max
    net.minecraft.core.Vec3i size() -> size
    net.minecraft.world.phys.AABB aabb() -> aabb
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isPos2(net.minecraft.core.Direction) -> a
    baritone.api.selection.ISelection expand(net.minecraft.core.Direction,int) -> expand
    baritone.api.selection.ISelection contract(net.minecraft.core.Direction,int) -> contract
    baritone.api.selection.ISelection shift(net.minecraft.core.Direction,int) -> shift
baritone.selection.Selection$1 -> baritone.et:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    void <clinit>() -> <clinit>
baritone.selection.SelectionManager -> baritone.eu:
    java.util.LinkedList selections -> a
    baritone.api.selection.ISelection[] selectionsArr -> a
    void <init>(baritone.Baritone) -> <init>
    void resetSelectionsArr() -> a
    baritone.api.selection.ISelection addSelection(baritone.api.selection.ISelection) -> addSelection
    baritone.api.selection.ISelection addSelection(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> addSelection
    baritone.api.selection.ISelection removeSelection(baritone.api.selection.ISelection) -> removeSelection
    baritone.api.selection.ISelection[] removeAllSelections() -> removeAllSelections
    baritone.api.selection.ISelection[] getSelections() -> getSelections
    baritone.api.selection.ISelection getOnlySelection() -> getOnlySelection
    baritone.api.selection.ISelection getLastSelection() -> getLastSelection
    baritone.api.selection.ISelection expand(baritone.api.selection.ISelection,net.minecraft.core.Direction,int) -> expand
    baritone.api.selection.ISelection contract(baritone.api.selection.ISelection,net.minecraft.core.Direction,int) -> contract
    baritone.api.selection.ISelection shift(baritone.api.selection.ISelection,net.minecraft.core.Direction,int) -> shift
baritone.selection.SelectionRenderer -> baritone.ev:
    baritone.selection.SelectionManager manager -> a
    void <init>(baritone.Baritone,baritone.selection.SelectionManager) -> <init>
    void onRenderPass(baritone.api.event.events.RenderEvent) -> onRenderPass
baritone.utils.BaritoneProcessHelper -> baritone.ew:
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isTemporary() -> isTemporary
baritone.utils.BlockBreakHelper -> baritone.ex:
    baritone.api.utils.IPlayerContext ctx -> a
    boolean didBreakLastTick -> a
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    void stopBreakingBlock() -> a
baritone.utils.BlockPlaceHelper -> baritone.ey:
    baritone.api.utils.IPlayerContext ctx -> a
    int rightClickTimer -> a
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
baritone.utils.BlockStateInterface -> baritone.ez:
    net.minecraft.client.multiplayer.ClientChunkCache provider -> a
    baritone.cache.WorldData worldData -> a
    net.minecraft.world.level.Level world -> a
    net.minecraft.core.BlockPos$MutableBlockPos isPassableBlockPos -> a
    net.minecraft.world.level.BlockGetter access -> a
    baritone.utils.pathing.BetterWorldBorder worldBorder -> a
    net.minecraft.world.level.chunk.LevelChunk prev -> a
    baritone.cache.CachedRegion prevCached -> a
    boolean useTheRealWorld -> a
    net.minecraft.world.level.block.state.BlockState AIR -> a
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    void <init>(baritone.api.utils.IPlayerContext,boolean) -> <init>
    boolean worldContainsLoadedChunk(int,int) -> a
    net.minecraft.world.level.block.Block getBlock(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> a
    net.minecraft.world.level.block.state.BlockState get(baritone.api.utils.IPlayerContext,net.minecraft.core.BlockPos) -> a
    net.minecraft.world.level.block.state.BlockState get0(net.minecraft.core.BlockPos) -> a
    net.minecraft.world.level.block.state.BlockState get0(int,int,int) -> a
    net.minecraft.world.level.block.state.BlockState getFromChunk(net.minecraft.world.level.chunk.LevelChunk,int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.utils.BlockStateInterfaceAccessWrapper -> baritone.fa:
    baritone.utils.BlockStateInterface bsi -> a
    void <init>(baritone.utils.BlockStateInterface) -> <init>
    net.minecraft.world.level.block.entity.BlockEntity m_7702_(net.minecraft.core.BlockPos) -> m_7702_
    net.minecraft.world.level.block.state.BlockState m_8055_(net.minecraft.core.BlockPos) -> m_8055_
    net.minecraft.world.level.material.FluidState m_6425_(net.minecraft.core.BlockPos) -> m_6425_
    int m_141928_() -> m_141928_
    int m_141937_() -> m_141937_
baritone.utils.GuiClick -> baritone.fb:
    org.joml.Matrix4f projectionViewMatrix -> a
    net.minecraft.core.BlockPos clickStart -> a
    net.minecraft.core.BlockPos currentMouseOver -> b
    void <init>() -> <init>
    boolean m_7043_() -> m_7043_
    void m_88315_(net.minecraft.client.gui.GuiGraphics,int,int,float) -> m_88315_
    boolean m_6348_(double,double,int) -> m_6348_
    boolean m_6375_(double,double,int) -> m_6375_
    net.minecraft.world.phys.Vec3 toWorld(double,double,double) -> a
baritone.utils.IRenderer -> baritone.fc:
    com.mojang.blaze3d.vertex.Tesselator tessellator -> a
    com.mojang.blaze3d.vertex.BufferBuilder buffer -> a
    baritone.utils.accessor.IEntityRenderManager renderManager -> a
    net.minecraft.client.renderer.texture.TextureManager textureManager -> a
    baritone.api.Settings settings -> a
    float[] color -> a
    void glColor(java.awt.Color,float) -> a
    void startLines(java.awt.Color,float,float,boolean) -> a
    void startLines(java.awt.Color,float,boolean) -> a
    void endLines(boolean) -> a
    void emitLine(com.mojang.blaze3d.vertex.PoseStack,double,double,double,double,double,double) -> a
    void emitLine(com.mojang.blaze3d.vertex.PoseStack,double,double,double,double,double,double,double,double,double) -> a
    void emitLine(com.mojang.blaze3d.vertex.PoseStack,float,float,float,float,float,float,float,float,float) -> a
    void emitAABB(com.mojang.blaze3d.vertex.PoseStack,net.minecraft.world.phys.AABB) -> a
    void emitAABB(com.mojang.blaze3d.vertex.PoseStack,net.minecraft.world.phys.AABB,double) -> a
    void emitLine(com.mojang.blaze3d.vertex.PoseStack,net.minecraft.world.phys.Vec3,net.minecraft.world.phys.Vec3) -> a
    void <clinit>() -> <clinit>
baritone.utils.InputOverrideHandler -> baritone.fd:
    java.util.Map inputForceStateMap -> a
    baritone.utils.BlockBreakHelper blockBreakHelper -> a
    baritone.utils.BlockPlaceHelper blockPlaceHelper -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isInputForcedDown(baritone.api.utils.input.Input) -> isInputForcedDown
    void setInputForceState(baritone.api.utils.input.Input,boolean) -> setInputForceState
    void clearAllKeys() -> clearAllKeys
    void onTick(baritone.api.event.events.TickEvent) -> onTick
baritone.utils.PathRenderer -> baritone.fe:
    net.minecraft.resources.ResourceLocation TEXTURE_BEACON_BEAM -> a
    double posX() -> a
    double posY() -> b
    double posZ() -> c
    void render(baritone.api.event.events.RenderEvent,baritone.behavior.PathingBehavior) -> a
    void drawPath$3eece233(com.mojang.blaze3d.vertex.PoseStack,java.util.List,int,java.awt.Color,boolean) -> a
    void drawPath(com.mojang.blaze3d.vertex.PoseStack,java.util.List,int,java.awt.Color,boolean,int,int,double) -> a
    void emitPathLine(com.mojang.blaze3d.vertex.PoseStack,double,double,double,double,double,double,double) -> a
    void drawManySelectionBoxes(com.mojang.blaze3d.vertex.PoseStack,net.minecraft.world.entity.Entity,java.util.Collection,java.awt.Color) -> a
    void drawGoal(com.mojang.blaze3d.vertex.PoseStack,baritone.api.utils.IPlayerContext,baritone.api.pathing.goals.Goal,float,java.awt.Color) -> a
    void drawGoal(com.mojang.blaze3d.vertex.PoseStack,baritone.api.utils.IPlayerContext,baritone.api.pathing.goals.Goal,float,java.awt.Color,boolean) -> a
    void drawDankLitGoalBox(com.mojang.blaze3d.vertex.PoseStack,java.awt.Color,double,double,double,double,double,double,double,double,boolean) -> a
    void renderHorizontalQuad(com.mojang.blaze3d.vertex.PoseStack,double,double,double,double,double) -> a
    void lambda$drawManySelectionBoxes$3(baritone.utils.BlockStateInterface,net.minecraft.world.entity.Entity,com.mojang.blaze3d.vertex.PoseStack,net.minecraft.core.BlockPos) -> a
    void lambda$render$2(baritone.api.event.events.RenderEvent,baritone.api.utils.IPlayerContext,baritone.pathing.calc.AbstractNodeCostSearch) -> a
    void lambda$render$1(baritone.api.event.events.RenderEvent,baritone.api.utils.IPlayerContext,baritone.api.pathing.calc.IPath) -> a
    void lambda$render$0(baritone.api.event.events.RenderEvent,baritone.api.pathing.calc.IPath) -> a
    void <clinit>() -> <clinit>
baritone.utils.PathingCommandContext -> baritone.ff:
    baritone.pathing.movement.CalculationContext desiredCalcContext -> a
    void <init>(baritone.api.pathing.goals.Goal,baritone.api.process.PathingCommandType,baritone.pathing.movement.CalculationContext) -> <init>
baritone.utils.PathingControlManager -> baritone.fg:
    baritone.Baritone baritone -> a
    java.util.HashSet processes -> a
    java.util.List active -> a
    baritone.api.process.IBaritoneProcess inControlLastTick -> a
    baritone.api.process.IBaritoneProcess inControlThisTick -> b
    baritone.api.process.PathingCommand command -> a
    void <init>(baritone.Baritone) -> <init>
    void registerProcess(baritone.api.process.IBaritoneProcess) -> registerProcess
    void cancelEverything() -> a
    java.util.Optional mostRecentInControl() -> mostRecentInControl
    java.util.Optional mostRecentCommand() -> mostRecentCommand
    boolean revalidateGoal(baritone.api.pathing.goals.Goal) -> a
    baritone.api.process.PathingCommand executeProcesses() -> a
baritone.utils.PathingControlManager$1 -> baritone.fh:
    baritone.utils.PathingControlManager this$0 -> a
    void <init>(baritone.utils.PathingControlManager) -> <init>
    void onTick(baritone.api.event.events.TickEvent) -> onTick
baritone.utils.PathingControlManager$2 -> baritone.fi:
    int[] $SwitchMap$baritone$api$process$PathingCommandType -> a
    void <clinit>() -> <clinit>
baritone.utils.PlayerMovementInput -> baritone.fj:
    baritone.utils.InputOverrideHandler handler -> a
    void <init>(baritone.utils.InputOverrideHandler) -> <init>
    void m_214106_(boolean,float) -> m_214106_
baritone.utils.ToolSet -> baritone.fk:
    java.util.Map breakStrengthCache -> a
    java.util.function.Function backendCalculation -> a
    net.minecraft.client.player.LocalPlayer player -> a
    void <init>(net.minecraft.client.player.LocalPlayer) -> <init>
    double getStrVsBlock(net.minecraft.world.level.block.state.BlockState) -> a
    int getMaterialCost(net.minecraft.world.item.ItemStack) -> a
    boolean hasSilkTouch(net.minecraft.world.item.ItemStack) -> a
    int getBestSlot(net.minecraft.world.level.block.Block,boolean,boolean) -> a
    double getBestDestructionTime(net.minecraft.world.level.block.Block) -> a
    double calculateSpeedVsBlock(net.minecraft.world.item.ItemStack,net.minecraft.world.level.block.state.BlockState) -> a
    java.lang.Double lambda$new$0(double,java.lang.Double) -> a
baritone.utils.accessor.IChunkArray -> baritone.fl:
    void copyFrom(baritone.utils.accessor.IChunkArray) -> copyFrom
    java.util.concurrent.atomic.AtomicReferenceArray getChunks() -> getChunks
    int centerX() -> centerX
    int centerZ() -> centerZ
    int viewDistance() -> viewDistance
baritone.utils.accessor.IClientChunkProvider -> baritone.fm:
    net.minecraft.client.multiplayer.ClientChunkCache createThreadSafeCopy() -> createThreadSafeCopy
    baritone.utils.accessor.IChunkArray extractReferenceArray() -> extractReferenceArray
baritone.utils.accessor.IEntityRenderManager -> baritone.fn:
    double renderPosX() -> renderPosX
    double renderPosY() -> renderPosY
    double renderPosZ() -> renderPosZ
baritone.utils.accessor.IFireworkRocketEntity -> baritone.fo:
    net.minecraft.world.entity.LivingEntity getBoostedEntity() -> getBoostedEntity
baritone.utils.accessor.IGuiScreen -> baritone.fp:
    void openLinkInvoker(java.net.URI) -> openLinkInvoker
baritone.utils.accessor.IPalettedContainer -> baritone.fq:
    net.minecraft.world.level.chunk.Palette getPalette() -> getPalette
    net.minecraft.util.BitStorage getStorage() -> getStorage
baritone.utils.accessor.IPalettedContainer$IData -> baritone.fq$a:
    net.minecraft.world.level.chunk.Palette getPalette() -> getPalette
    net.minecraft.util.BitStorage getStorage() -> getStorage
baritone.utils.accessor.IPlayerControllerMP -> baritone.fr:
    void setIsHittingBlock(boolean) -> setIsHittingBlock
    net.minecraft.core.BlockPos getCurrentBlock() -> getCurrentBlock
    void callSyncCurrentPlayItem() -> callSyncCurrentPlayItem
baritone.utils.pathing.Avoidance -> baritone.fs:
    int centerX -> a
    int centerY -> b
    int centerZ -> c
    double coefficient -> a
    int radius -> d
    void <init>(net.minecraft.core.BlockPos,double,int) -> <init>
    void <init>(int,int,int,double,int) -> <init>
    java.util.List create(baritone.api.utils.IPlayerContext) -> a
    void lambda$create$5(java.util.List,double,net.minecraft.world.entity.Entity) -> a
    boolean lambda$create$4(net.minecraft.world.entity.Entity) -> a
    boolean lambda$create$3(net.minecraft.world.entity.Entity) -> b
    boolean lambda$create$2(baritone.api.utils.IPlayerContext,net.minecraft.world.entity.Entity) -> a
    boolean lambda$create$1(net.minecraft.world.entity.Entity) -> c
    void lambda$create$0(java.util.List,double,net.minecraft.core.BlockPos) -> a
baritone.utils.pathing.BetterWorldBorder -> baritone.ft:
    double minX -> a
    double maxX -> b
    double minZ -> c
    double maxZ -> d
    void <init>(net.minecraft.world.level.border.WorldBorder) -> <init>
    boolean entirelyContains(int,int) -> a
    boolean canPlaceAt(int,int) -> b
baritone.utils.pathing.Favoring -> baritone.fu:
    it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap favorings -> a
    void <init>(baritone.api.utils.IPlayerContext,baritone.api.pathing.calc.IPath,baritone.pathing.movement.CalculationContext) -> <init>
    void <init>(baritone.api.pathing.calc.IPath,baritone.pathing.movement.CalculationContext) -> <init>
    void lambda$new$0(double,baritone.api.utils.BetterBlockPos) -> a
baritone.utils.pathing.MutableMoveResult -> baritone.fv:
    int x -> a
    int y -> b
    int z -> c
    double cost -> a
    void <init>() -> <init>
    void reset() -> a
baritone.utils.pathing.PathBase -> baritone.fw:
    void <init>() -> <init>
    baritone.api.pathing.calc.IPath staticCutoff(baritone.api.pathing.goals.Goal) -> staticCutoff
    baritone.api.pathing.calc.IPath cutoffAtLoadedChunks(java.lang.Object) -> cutoffAtLoadedChunks
baritone.utils.pathing.PathingBlockType -> baritone.fx:
    baritone.utils.pathing.PathingBlockType AIR -> a
    baritone.utils.pathing.PathingBlockType WATER -> b
    baritone.utils.pathing.PathingBlockType AVOID -> c
    baritone.utils.pathing.PathingBlockType SOLID -> d
    boolean[] bits -> a
    baritone.utils.pathing.PathingBlockType[] $VALUES -> a
    baritone.utils.pathing.PathingBlockType[] values() -> values
    baritone.utils.pathing.PathingBlockType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    baritone.utils.pathing.PathingBlockType fromBits(boolean,boolean) -> a
    void <clinit>() -> <clinit>
baritone.utils.player.BaritonePlayerContext -> baritone.fy:
    baritone.Baritone baritone -> a
    net.minecraft.client.Minecraft mc -> a
    baritone.api.utils.IPlayerController playerController -> a
    void <init>(baritone.Baritone,net.minecraft.client.Minecraft) -> <init>
    net.minecraft.client.Minecraft minecraft() -> minecraft
    net.minecraft.client.player.LocalPlayer player() -> player
    baritone.api.utils.IPlayerController playerController() -> playerController
    net.minecraft.world.level.Level world() -> world
    baritone.api.cache.IWorldData worldData() -> worldData
    baritone.api.utils.BetterBlockPos viewerPos() -> viewerPos
    baritone.api.utils.Rotation playerRotations() -> playerRotations
    net.minecraft.world.phys.HitResult objectMouseOver() -> objectMouseOver
    baritone.api.utils.Rotation lambda$playerRotations$0() -> a
baritone.utils.player.BaritonePlayerController -> baritone.fz:
    net.minecraft.client.Minecraft mc -> a
    void <init>(net.minecraft.client.Minecraft) -> <init>
    void syncHeldItem() -> syncHeldItem
    boolean hasBrokenBlock() -> hasBrokenBlock
    boolean onPlayerDamageBlock(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> onPlayerDamageBlock
    void resetBlockRemoving() -> resetBlockRemoving
    void windowClick(int,int,int,net.minecraft.world.inventory.ClickType,net.minecraft.world.entity.player.Player) -> windowClick
    net.minecraft.world.level.GameType getGameType() -> getGameType
    net.minecraft.world.InteractionResult processRightClickBlock(net.minecraft.client.player.LocalPlayer,net.minecraft.world.level.Level,net.minecraft.world.InteractionHand,net.minecraft.world.phys.BlockHitResult) -> processRightClickBlock
    net.minecraft.world.InteractionResult processRightClick(net.minecraft.client.player.LocalPlayer,net.minecraft.world.level.Level,net.minecraft.world.InteractionHand) -> processRightClick
    boolean clickBlock(net.minecraft.core.BlockPos,net.minecraft.core.Direction) -> clickBlock
    void setHittingBlock(boolean) -> setHittingBlock
baritone.utils.schematic.MapArtSchematic -> baritone.ga:
    int[][] heightMap -> a
    void <init>(baritone.api.schematic.IStaticSchematic) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
    boolean lambda$generateHeightMap$0(net.minecraft.world.level.block.state.BlockState) -> a
baritone.utils.schematic.SchematicSystem -> baritone.gb:
    baritone.utils.schematic.SchematicSystem INSTANCE -> a
    baritone.api.command.registry.Registry registry -> a
    baritone.utils.schematic.SchematicSystem[] $VALUES -> a
    baritone.utils.schematic.SchematicSystem[] values() -> values
    baritone.utils.schematic.SchematicSystem valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    baritone.api.command.registry.Registry getRegistry() -> getRegistry
    java.util.Optional getByFile(java.io.File) -> getByFile
    boolean lambda$getByFile$0(java.io.File,baritone.api.schematic.format.ISchematicFormat) -> a
    void <clinit>() -> <clinit>
baritone.utils.schematic.SelectionSchematic -> baritone.gc:
    baritone.api.selection.ISelection[] selections -> a
    void <init>(baritone.api.schematic.ISchematic,net.minecraft.core.Vec3i,baritone.api.selection.ISelection[]) -> <init>
    boolean partOfMask(int,int,int,net.minecraft.world.level.block.state.BlockState) -> partOfMask
    baritone.api.selection.ISelection[] lambda$new$1(int) -> a
    baritone.api.selection.ISelection lambda$new$0(net.minecraft.core.Vec3i,baritone.api.selection.ISelection) -> a
baritone.utils.schematic.StaticSchematic -> baritone.gd:
    net.minecraft.world.level.block.state.BlockState[][][] states -> a
    void <init>() -> <init>
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
    net.minecraft.world.level.block.state.BlockState getDirect(int,int,int) -> getDirect
    net.minecraft.world.level.block.state.BlockState[] getColumn(int,int) -> getColumn
baritone.utils.schematic.format.DefaultSchematicFormats -> baritone.ge:
    baritone.utils.schematic.format.DefaultSchematicFormats MCEDIT -> a
    baritone.utils.schematic.format.DefaultSchematicFormats SPONGE -> b
    baritone.utils.schematic.format.DefaultSchematicFormats LITEMATICA -> c
    java.lang.String extension -> a
    baritone.utils.schematic.format.DefaultSchematicFormats[] $VALUES -> a
    baritone.utils.schematic.format.DefaultSchematicFormats[] values() -> values
    baritone.utils.schematic.format.DefaultSchematicFormats valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    boolean isFileType(java.io.File) -> isFileType
    void <clinit>() -> <clinit>
baritone.utils.schematic.format.DefaultSchematicFormats$1 -> baritone.gf:
    void <init>(java.lang.String,java.lang.String) -> <init>
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> parse
baritone.utils.schematic.format.DefaultSchematicFormats$2 -> baritone.gg:
    void <init>(java.lang.String,java.lang.String) -> <init>
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> parse
baritone.utils.schematic.format.DefaultSchematicFormats$3 -> baritone.gh:
    void <init>(java.lang.String,java.lang.String) -> <init>
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> parse
baritone.utils.schematic.format.defaults.LitematicaSchematic -> baritone.gi:
    net.minecraft.core.Vec3i offsetMinCorner -> a
    net.minecraft.nbt.CompoundTag nbt -> a
    void <init>(net.minecraft.nbt.CompoundTag,boolean) -> <init>
    java.lang.String[] getRegions(net.minecraft.nbt.CompoundTag) -> a
    int getMinOfSubregion(net.minecraft.nbt.CompoundTag,java.lang.String,java.lang.String) -> a
    net.minecraft.world.level.block.state.BlockState getBlockState(net.minecraft.world.level.block.Block,net.minecraft.nbt.CompoundTag) -> a
    int getMinOfSchematic(java.lang.String) -> a
    void fillInSchematic() -> a
    void writeSubregionIntoSchematic(net.minecraft.nbt.CompoundTag,java.lang.String,net.minecraft.world.level.block.state.BlockState[],baritone.utils.schematic.format.defaults.LitematicaSchematic$LitematicaBitArray) -> a
    int getX() -> a
    int getY() -> b
    int getZ() -> c
    void setDirect(int,int,int,net.minecraft.world.level.block.state.BlockState) -> a
baritone.utils.schematic.format.defaults.LitematicaSchematic$LitematicaBitArray -> baritone.gi$a:
    long[] longArray -> a
    int bitsPerEntry -> a
    long maxEntryValue -> a
    long arraySize -> b
    void <init>(int,long,long[]) -> <init>
baritone.utils.schematic.format.defaults.MCEditSchematic -> baritone.gj:
    void <init>(net.minecraft.nbt.CompoundTag) -> <init>
baritone.utils.schematic.format.defaults.SpongeSchematic -> baritone.gk:
    void <init>(net.minecraft.nbt.CompoundTag) -> <init>
baritone.utils.schematic.format.defaults.SpongeSchematic$SerializedBlockState -> baritone.gk$a:
    java.util.regex.Pattern REGEX -> a
    net.minecraft.resources.ResourceLocation resourceLocation -> a
    java.util.Map properties -> a
    net.minecraft.world.level.block.state.BlockState blockState -> a
    void <init>(net.minecraft.resources.ResourceLocation,java.util.Map) -> <init>
    net.minecraft.world.level.block.state.BlockState deserialize() -> a
    baritone.utils.schematic.format.defaults.SpongeSchematic$SerializedBlockState getFromString(java.lang.String) -> a
    void lambda$deserialize$0(net.minecraft.world.level.block.Block,java.lang.String) -> a
    void <clinit>() -> <clinit>
baritone.utils.schematic.litematica.LitematicaHelper -> baritone.utils.schematic.litematica.LitematicaHelper:
    void <init>() -> <init>
    boolean isLitematicaPresent() -> a
    boolean hasLoadedSchematic() -> b
    java.lang.String getName(int) -> a
    net.minecraft.core.Vec3i getOrigin(int) -> a
    java.io.File getSchematicFile(int) -> a
    net.minecraft.world.level.block.Rotation getRotation(int) -> a
    net.minecraft.world.level.block.Mirror getMirror(int) -> a
    net.minecraft.core.Vec3i getCorrectedOrigin(baritone.utils.schematic.format.defaults.LitematicaSchematic,int) -> a
    net.minecraft.core.Vec3i rotate(net.minecraft.core.Vec3i,int,int) -> a
    baritone.utils.schematic.format.defaults.LitematicaSchematic blackMagicFuckery(baritone.utils.schematic.format.defaults.LitematicaSchematic,int) -> a
baritone.utils.schematic.litematica.LitematicaHelper$1 -> baritone.utils.schematic.litematica.LitematicaHelper$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    void <clinit>() -> <clinit>
baritone.utils.schematic.schematica.SchematicAdapter -> baritone.utils.schematic.schematica.SchematicAdapter:
    com.github.lunatrius.schematica.client.world.SchematicWorld schematic -> a
    void <init>(com.github.lunatrius.schematica.client.world.SchematicWorld) -> <init>
    net.minecraft.world.level.block.state.BlockState desiredState(int,int,int,net.minecraft.world.level.block.state.BlockState,java.util.List) -> desiredState
    net.minecraft.world.level.block.state.BlockState getDirect(int,int,int) -> getDirect
    int widthX() -> widthX
    int heightY() -> heightY
    int lengthZ() -> lengthZ
baritone.utils.schematic.schematica.SchematicaHelper -> baritone.utils.schematic.schematica.SchematicaHelper:
    baritone.utils.schematic.schematica.SchematicaHelper[] $VALUES -> a
    baritone.utils.schematic.schematica.SchematicaHelper[] values() -> values
    baritone.utils.schematic.schematica.SchematicaHelper valueOf(java.lang.String) -> valueOf
    boolean isSchematicaPresent() -> a
    java.util.Optional getOpenSchematic() -> a
    net.minecraft.util.Tuple lambda$getOpenSchematic$0(com.github.lunatrius.schematica.client.world.SchematicWorld) -> a
    void <clinit>() -> <clinit>
baritone.utils.type.VarInt -> baritone.gl:
    int value -> a
    byte[] serialized -> a
    int size -> b
    void <init>(int) -> <init>
    byte[] serialize0(int) -> a
    baritone.utils.type.VarInt read(byte[],int) -> a
