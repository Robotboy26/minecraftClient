baritone.Baritone -> baritone.a:
    java.util.concurrent.ThreadPoolExecutor threadPool -> a
    eqv mc -> a
    java.nio.file.Path directory -> a
    baritone.event.GameEventHandler gameEventHandler -> a
    baritone.behavior.PathingBehavior pathingBehavior -> a
    baritone.behavior.LookBehavior lookBehavior -> a
    baritone.behavior.InventoryBehavior inventoryBehavior -> a
    baritone.utils.InputOverrideHandler inputOverrideHandler -> a
    baritone.process.FollowProcess followProcess -> a
    baritone.process.MineProcess mineProcess -> a
    baritone.process.GetToBlockProcess getToBlockProcess -> a
    baritone.process.CustomGoalProcess customGoalProcess -> a
    baritone.process.BuilderProcess builderProcess -> a
    baritone.process.ExploreProcess exploreProcess -> a
    baritone.process.FarmProcess farmProcess -> a
    baritone.process.InventoryPauserProcess inventoryPauserProcess -> a
    baritone.process.ElytraProcess elytraProcess -> a
    baritone.utils.PathingControlManager pathingControlManager -> a
    baritone.selection.SelectionManager selectionManager -> a
    baritone.command.manager.CommandManager commandManager -> a
    baritone.api.utils.IPlayerContext playerContext -> a
    baritone.cache.WorldProvider worldProvider -> a
    baritone.utils.BlockStateInterface bsi -> a
    void <init>(eqv) -> <init>
    void registerBehavior$cdcab92(baritone.api.event.listener.AbstractGameEventListener) -> a
    baritone.api.event.listener.AbstractGameEventListener registerBehavior$f62ad2c(java.util.function.Function) -> a
    baritone.api.process.IBaritoneProcess registerProcess(java.util.function.Function) -> a
    baritone.api.utils.IPlayerContext getPlayerContext() -> a
    baritone.api.event.listener.IEventBus getGameEventHandler() -> a
    baritone.api.process.IElytraProcess getElytraProcess() -> a
    void openClick() -> a
    baritone.api.Settings settings() -> a
    java.util.concurrent.Executor getExecutor() -> a
    baritone.api.command.manager.ICommandManager getCommandManager() -> a
    baritone.api.selection.ISelectionManager getSelectionManager() -> a
    baritone.api.utils.IInputOverrideHandler getInputOverrideHandler() -> a
    baritone.api.pathing.calc.IPathingControlManager getPathingControlManager() -> a
    baritone.api.cache.IWorldProvider getWorldProvider() -> a
    baritone.api.process.IGetToBlockProcess getGetToBlockProcess() -> a
    baritone.api.process.ICustomGoalProcess getCustomGoalProcess() -> a
    baritone.api.process.IFarmProcess getFarmProcess() -> a
    baritone.api.process.IExploreProcess getExploreProcess() -> a
    baritone.api.process.IBuilderProcess getBuilderProcess() -> a
    baritone.api.process.IMineProcess getMineProcess() -> a
    baritone.api.process.IFollowProcess getFollowProcess() -> a
    baritone.api.behavior.ILookBehavior getLookBehavior() -> a
    baritone.api.behavior.IPathingBehavior getPathingBehavior() -> a
    void lambda$openClick$1() -> b
    void lambda$openClick$0() -> c
    void <clinit>() -> <clinit>
baritone.BaritoneProvider -> baritone.BaritoneProvider:
    java.util.List all -> a
    java.util.List allView -> b
    void <init>() -> <init>
    baritone.api.IBaritone getPrimaryBaritone() -> a
    java.util.List getAllBaritones() -> a
    baritone.api.IBaritone createBaritone(eqv) -> b
    baritone.api.cache.IWorldScanner getWorldScanner() -> a
baritone.KeepName -> baritone.b:
baritone.api.BaritoneAPI -> baritone.c:
    baritone.api.IBaritoneProvider provider -> a
    baritone.api.Settings settings -> a
    baritone.api.IBaritoneProvider getProvider() -> a
    baritone.api.Settings getSettings() -> a
    void <clinit>() -> <clinit>
baritone.api.IBaritone -> baritone.d:
    baritone.api.behavior.IPathingBehavior getPathingBehavior() -> a
    baritone.api.behavior.ILookBehavior getLookBehavior() -> a
    baritone.api.process.IFollowProcess getFollowProcess() -> a
    baritone.api.process.IMineProcess getMineProcess() -> a
    baritone.api.process.IBuilderProcess getBuilderProcess() -> a
    baritone.api.process.IExploreProcess getExploreProcess() -> a
    baritone.api.process.IFarmProcess getFarmProcess() -> a
    baritone.api.process.ICustomGoalProcess getCustomGoalProcess() -> a
    baritone.api.process.IGetToBlockProcess getGetToBlockProcess() -> a
    baritone.api.process.IElytraProcess getElytraProcess() -> a
    baritone.api.cache.IWorldProvider getWorldProvider() -> a
    baritone.api.pathing.calc.IPathingControlManager getPathingControlManager() -> a
    baritone.api.utils.IInputOverrideHandler getInputOverrideHandler() -> a
    baritone.api.utils.IPlayerContext getPlayerContext() -> a
    baritone.api.event.listener.IEventBus getGameEventHandler() -> a
    baritone.api.selection.ISelectionManager getSelectionManager() -> a
    baritone.api.command.manager.ICommandManager getCommandManager() -> a
    void openClick() -> a
baritone.api.IBaritoneProvider -> baritone.api.IBaritoneProvider:
    baritone.api.IBaritone getPrimaryBaritone() -> a
    java.util.List getAllBaritones() -> a
    baritone.api.IBaritone getBaritoneForPlayer(fng) -> a
    baritone.api.IBaritone getBaritoneForMinecraft(eqv) -> a
    baritone.api.IBaritone getBaritoneForConnection(fiy) -> a
    baritone.api.cache.IWorldScanner getWorldScanner() -> a
baritone.api.Settings -> baritone.e:
    baritone.api.Settings$Setting allowBreak -> allowBreak
    baritone.api.Settings$Setting allowBreakAnyway -> allowBreakAnyway
    baritone.api.Settings$Setting allowSprint -> allowSprint
    baritone.api.Settings$Setting allowPlace -> allowPlace
    baritone.api.Settings$Setting allowInventory -> allowInventory
    baritone.api.Settings$Setting ticksBetweenInventoryMoves -> ticksBetweenInventoryMoves
    baritone.api.Settings$Setting inventoryMoveOnlyIfStationary -> inventoryMoveOnlyIfStationary
    baritone.api.Settings$Setting assumeExternalAutoTool -> assumeExternalAutoTool
    baritone.api.Settings$Setting autoTool -> autoTool
    baritone.api.Settings$Setting blockPlacementPenalty -> blockPlacementPenalty
    baritone.api.Settings$Setting blockBreakAdditionalPenalty -> blockBreakAdditionalPenalty
    baritone.api.Settings$Setting jumpPenalty -> jumpPenalty
    baritone.api.Settings$Setting walkOnWaterOnePenalty -> walkOnWaterOnePenalty
    baritone.api.Settings$Setting strictLiquidCheck -> strictLiquidCheck
    baritone.api.Settings$Setting allowWaterBucketFall -> allowWaterBucketFall
    baritone.api.Settings$Setting assumeWalkOnWater -> assumeWalkOnWater
    baritone.api.Settings$Setting assumeWalkOnLava -> assumeWalkOnLava
    baritone.api.Settings$Setting assumeStep -> assumeStep
    baritone.api.Settings$Setting assumeSafeWalk -> assumeSafeWalk
    baritone.api.Settings$Setting allowJumpAt256 -> allowJumpAt256
    baritone.api.Settings$Setting allowParkourAscend -> allowParkourAscend
    baritone.api.Settings$Setting allowDiagonalDescend -> allowDiagonalDescend
    baritone.api.Settings$Setting allowDiagonalAscend -> allowDiagonalAscend
    baritone.api.Settings$Setting allowDownward -> allowDownward
    baritone.api.Settings$Setting acceptableThrowawayItems -> acceptableThrowawayItems
    baritone.api.Settings$Setting blocksToAvoid -> blocksToAvoid
    baritone.api.Settings$Setting blocksToDisallowBreaking -> blocksToDisallowBreaking
    baritone.api.Settings$Setting blocksToAvoidBreaking -> blocksToAvoidBreaking
    baritone.api.Settings$Setting avoidBreakingMultiplier -> avoidBreakingMultiplier
    baritone.api.Settings$Setting buildIgnoreBlocks -> buildIgnoreBlocks
    baritone.api.Settings$Setting buildSkipBlocks -> buildSkipBlocks
    baritone.api.Settings$Setting buildValidSubstitutes -> buildValidSubstitutes
    baritone.api.Settings$Setting buildSubstitutes -> buildSubstitutes
    baritone.api.Settings$Setting okIfAir -> okIfAir
    baritone.api.Settings$Setting buildIgnoreExisting -> buildIgnoreExisting
    baritone.api.Settings$Setting buildIgnoreDirection -> buildIgnoreDirection
    baritone.api.Settings$Setting buildIgnoreProperties -> buildIgnoreProperties
    baritone.api.Settings$Setting avoidUpdatingFallingBlocks -> avoidUpdatingFallingBlocks
    baritone.api.Settings$Setting allowVines -> allowVines
    baritone.api.Settings$Setting allowWalkOnBottomSlab -> allowWalkOnBottomSlab
    baritone.api.Settings$Setting allowParkour -> allowParkour
    baritone.api.Settings$Setting allowParkourPlace -> allowParkourPlace
    baritone.api.Settings$Setting considerPotionEffects -> considerPotionEffects
    baritone.api.Settings$Setting sprintAscends -> sprintAscends
    baritone.api.Settings$Setting overshootTraverse -> overshootTraverse
    baritone.api.Settings$Setting pauseMiningForFallingBlocks -> pauseMiningForFallingBlocks
    baritone.api.Settings$Setting rightClickSpeed -> rightClickSpeed
    baritone.api.Settings$Setting randomLooking113 -> randomLooking113
    baritone.api.Settings$Setting blockReachDistance -> blockReachDistance
    baritone.api.Settings$Setting randomLooking -> randomLooking
    baritone.api.Settings$Setting costHeuristic -> costHeuristic
    baritone.api.Settings$Setting pathingMaxChunkBorderFetch -> pathingMaxChunkBorderFetch
    baritone.api.Settings$Setting backtrackCostFavoringCoefficient -> backtrackCostFavoringCoefficient
    baritone.api.Settings$Setting avoidance -> avoidance
    baritone.api.Settings$Setting mobSpawnerAvoidanceCoefficient -> mobSpawnerAvoidanceCoefficient
    baritone.api.Settings$Setting mobSpawnerAvoidanceRadius -> mobSpawnerAvoidanceRadius
    baritone.api.Settings$Setting mobAvoidanceCoefficient -> mobAvoidanceCoefficient
    baritone.api.Settings$Setting mobAvoidanceRadius -> mobAvoidanceRadius
    baritone.api.Settings$Setting rightClickContainerOnArrival -> rightClickContainerOnArrival
    baritone.api.Settings$Setting enterPortal -> enterPortal
    baritone.api.Settings$Setting minimumImprovementRepropagation -> minimumImprovementRepropagation
    baritone.api.Settings$Setting cutoffAtLoadBoundary -> cutoffAtLoadBoundary
    baritone.api.Settings$Setting maxCostIncrease -> maxCostIncrease
    baritone.api.Settings$Setting costVerificationLookahead -> costVerificationLookahead
    baritone.api.Settings$Setting pathCutoffFactor -> pathCutoffFactor
    baritone.api.Settings$Setting pathCutoffMinimumLength -> pathCutoffMinimumLength
    baritone.api.Settings$Setting planningTickLookahead -> planningTickLookahead
    baritone.api.Settings$Setting pathingMapDefaultSize -> pathingMapDefaultSize
    baritone.api.Settings$Setting pathingMapLoadFactor -> pathingMapLoadFactor
    baritone.api.Settings$Setting maxFallHeightNoWater -> maxFallHeightNoWater
    baritone.api.Settings$Setting maxFallHeightBucket -> maxFallHeightBucket
    baritone.api.Settings$Setting allowOvershootDiagonalDescend -> allowOvershootDiagonalDescend
    baritone.api.Settings$Setting simplifyUnloadedYCoord -> simplifyUnloadedYCoord
    baritone.api.Settings$Setting repackOnAnyBlockChange -> repackOnAnyBlockChange
    baritone.api.Settings$Setting movementTimeoutTicks -> movementTimeoutTicks
    baritone.api.Settings$Setting primaryTimeoutMS -> primaryTimeoutMS
    baritone.api.Settings$Setting failureTimeoutMS -> failureTimeoutMS
    baritone.api.Settings$Setting planAheadPrimaryTimeoutMS -> planAheadPrimaryTimeoutMS
    baritone.api.Settings$Setting planAheadFailureTimeoutMS -> planAheadFailureTimeoutMS
    baritone.api.Settings$Setting slowPath -> slowPath
    baritone.api.Settings$Setting slowPathTimeDelayMS -> slowPathTimeDelayMS
    baritone.api.Settings$Setting slowPathTimeoutMS -> slowPathTimeoutMS
    baritone.api.Settings$Setting doBedWaypoints -> doBedWaypoints
    baritone.api.Settings$Setting doDeathWaypoints -> doDeathWaypoints
    baritone.api.Settings$Setting chunkCaching -> chunkCaching
    baritone.api.Settings$Setting pruneRegionsFromRAM -> pruneRegionsFromRAM
    baritone.api.Settings$Setting chunkPackerQueueMaxSize -> chunkPackerQueueMaxSize
    baritone.api.Settings$Setting backfill -> backfill
    baritone.api.Settings$Setting logAsToast -> logAsToast
    baritone.api.Settings$Setting toastTimer -> toastTimer
    baritone.api.Settings$Setting chatDebug -> chatDebug
    baritone.api.Settings$Setting chatControl -> chatControl
    baritone.api.Settings$Setting chatControlAnyway -> chatControlAnyway
    baritone.api.Settings$Setting renderPath -> renderPath
    baritone.api.Settings$Setting renderPathAsLine -> renderPathAsLine
    baritone.api.Settings$Setting renderGoal -> renderGoal
    baritone.api.Settings$Setting renderGoalAnimated -> renderGoalAnimated
    baritone.api.Settings$Setting renderSelectionBoxes -> renderSelectionBoxes
    baritone.api.Settings$Setting renderGoalIgnoreDepth -> renderGoalIgnoreDepth
    baritone.api.Settings$Setting renderGoalXZBeacon -> renderGoalXZBeacon
    baritone.api.Settings$Setting renderSelectionBoxesIgnoreDepth -> renderSelectionBoxesIgnoreDepth
    baritone.api.Settings$Setting renderPathIgnoreDepth -> renderPathIgnoreDepth
    baritone.api.Settings$Setting pathRenderLineWidthPixels -> pathRenderLineWidthPixels
    baritone.api.Settings$Setting goalRenderLineWidthPixels -> goalRenderLineWidthPixels
    baritone.api.Settings$Setting fadePath -> fadePath
    baritone.api.Settings$Setting freeLook -> freeLook
    baritone.api.Settings$Setting blockFreeLook -> blockFreeLook
    baritone.api.Settings$Setting elytraFreeLook -> elytraFreeLook
    baritone.api.Settings$Setting smoothLook -> smoothLook
    baritone.api.Settings$Setting elytraSmoothLook -> elytraSmoothLook
    baritone.api.Settings$Setting smoothLookTicks -> smoothLookTicks
    baritone.api.Settings$Setting remainWithExistingLookDirection -> remainWithExistingLookDirection
    baritone.api.Settings$Setting antiCheatCompatibility -> antiCheatCompatibility
    baritone.api.Settings$Setting pathThroughCachedOnly -> pathThroughCachedOnly
    baritone.api.Settings$Setting sprintInWater -> sprintInWater
    baritone.api.Settings$Setting blacklistClosestOnFailure -> blacklistClosestOnFailure
    baritone.api.Settings$Setting renderCachedChunks -> renderCachedChunks
    baritone.api.Settings$Setting cachedChunksOpacity -> cachedChunksOpacity
    baritone.api.Settings$Setting prefixControl -> prefixControl
    baritone.api.Settings$Setting prefix -> prefix
    baritone.api.Settings$Setting shortBaritonePrefix -> shortBaritonePrefix
    baritone.api.Settings$Setting useMessageTag -> useMessageTag
    baritone.api.Settings$Setting echoCommands -> echoCommands
    baritone.api.Settings$Setting censorCoordinates -> censorCoordinates
    baritone.api.Settings$Setting censorRanCommands -> censorRanCommands
    baritone.api.Settings$Setting itemSaver -> itemSaver
    baritone.api.Settings$Setting itemSaverThreshold -> itemSaverThreshold
    baritone.api.Settings$Setting preferSilkTouch -> preferSilkTouch
    baritone.api.Settings$Setting walkWhileBreaking -> walkWhileBreaking
    baritone.api.Settings$Setting splicePath -> splicePath
    baritone.api.Settings$Setting maxPathHistoryLength -> maxPathHistoryLength
    baritone.api.Settings$Setting pathHistoryCutoffAmount -> pathHistoryCutoffAmount
    baritone.api.Settings$Setting mineGoalUpdateInterval -> mineGoalUpdateInterval
    baritone.api.Settings$Setting maxCachedWorldScanCount -> maxCachedWorldScanCount
    baritone.api.Settings$Setting minYLevelWhileMining -> minYLevelWhileMining
    baritone.api.Settings$Setting maxYLevelWhileMining -> maxYLevelWhileMining
    baritone.api.Settings$Setting allowOnlyExposedOres -> allowOnlyExposedOres
    baritone.api.Settings$Setting allowOnlyExposedOresDistance -> allowOnlyExposedOresDistance
    baritone.api.Settings$Setting exploreForBlocks -> exploreForBlocks
    baritone.api.Settings$Setting worldExploringChunkOffset -> worldExploringChunkOffset
    baritone.api.Settings$Setting exploreChunkSetMinimumSize -> exploreChunkSetMinimumSize
    baritone.api.Settings$Setting exploreMaintainY -> exploreMaintainY
    baritone.api.Settings$Setting replantCrops -> replantCrops
    baritone.api.Settings$Setting replantNetherWart -> replantNetherWart
    baritone.api.Settings$Setting extendCacheOnThreshold -> extendCacheOnThreshold
    baritone.api.Settings$Setting buildInLayers -> buildInLayers
    baritone.api.Settings$Setting layerOrder -> layerOrder
    baritone.api.Settings$Setting layerHeight -> layerHeight
    baritone.api.Settings$Setting startAtLayer -> startAtLayer
    baritone.api.Settings$Setting skipFailedLayers -> skipFailedLayers
    baritone.api.Settings$Setting buildOnlySelection -> buildOnlySelection
    baritone.api.Settings$Setting buildRepeat -> buildRepeat
    baritone.api.Settings$Setting buildRepeatCount -> buildRepeatCount
    baritone.api.Settings$Setting buildRepeatSneaky -> buildRepeatSneaky
    baritone.api.Settings$Setting breakFromAbove -> breakFromAbove
    baritone.api.Settings$Setting goalBreakFromAbove -> goalBreakFromAbove
    baritone.api.Settings$Setting mapArtMode -> mapArtMode
    baritone.api.Settings$Setting okIfWater -> okIfWater
    baritone.api.Settings$Setting incorrectSize -> incorrectSize
    baritone.api.Settings$Setting breakCorrectBlockPenaltyMultiplier -> breakCorrectBlockPenaltyMultiplier
    baritone.api.Settings$Setting schematicOrientationX -> schematicOrientationX
    baritone.api.Settings$Setting schematicOrientationY -> schematicOrientationY
    baritone.api.Settings$Setting schematicOrientationZ -> schematicOrientationZ
    baritone.api.Settings$Setting schematicFallbackExtension -> schematicFallbackExtension
    baritone.api.Settings$Setting builderTickScanRadius -> builderTickScanRadius
    baritone.api.Settings$Setting mineScanDroppedItems -> mineScanDroppedItems
    baritone.api.Settings$Setting mineDropLoiterDurationMSThanksLouca -> mineDropLoiterDurationMSThanksLouca
    baritone.api.Settings$Setting distanceTrim -> distanceTrim
    baritone.api.Settings$Setting cancelOnGoalInvalidation -> cancelOnGoalInvalidation
    baritone.api.Settings$Setting axisHeight -> axisHeight
    baritone.api.Settings$Setting disconnectOnArrival -> disconnectOnArrival
    baritone.api.Settings$Setting legitMine -> legitMine
    baritone.api.Settings$Setting legitMineYLevel -> legitMineYLevel
    baritone.api.Settings$Setting legitMineIncludeDiagonals -> legitMineIncludeDiagonals
    baritone.api.Settings$Setting forceInternalMining -> forceInternalMining
    baritone.api.Settings$Setting internalMiningAirException -> internalMiningAirException
    baritone.api.Settings$Setting followOffsetDistance -> followOffsetDistance
    baritone.api.Settings$Setting followOffsetDirection -> followOffsetDirection
    baritone.api.Settings$Setting followRadius -> followRadius
    baritone.api.Settings$Setting disableCompletionCheck -> disableCompletionCheck
    baritone.api.Settings$Setting cachedChunksExpirySeconds -> cachedChunksExpirySeconds
    baritone.api.Settings$Setting logger -> logger
    baritone.api.Settings$Setting notifier -> notifier
    baritone.api.Settings$Setting toaster -> toaster
    baritone.api.Settings$Setting verboseCommandExceptions -> verboseCommandExceptions
    baritone.api.Settings$Setting yLevelBoxSize -> yLevelBoxSize
    baritone.api.Settings$Setting colorCurrentPath -> colorCurrentPath
    baritone.api.Settings$Setting colorNextPath -> colorNextPath
    baritone.api.Settings$Setting colorBlocksToBreak -> colorBlocksToBreak
    baritone.api.Settings$Setting colorBlocksToPlace -> colorBlocksToPlace
    baritone.api.Settings$Setting colorBlocksToWalkInto -> colorBlocksToWalkInto
    baritone.api.Settings$Setting colorBestPathSoFar -> colorBestPathSoFar
    baritone.api.Settings$Setting colorMostRecentConsidered -> colorMostRecentConsidered
    baritone.api.Settings$Setting colorGoalBox -> colorGoalBox
    baritone.api.Settings$Setting colorInvertedGoalBox -> colorInvertedGoalBox
    baritone.api.Settings$Setting colorSelection -> colorSelection
    baritone.api.Settings$Setting colorSelectionPos1 -> colorSelectionPos1
    baritone.api.Settings$Setting colorSelectionPos2 -> colorSelectionPos2
    baritone.api.Settings$Setting selectionOpacity -> selectionOpacity
    baritone.api.Settings$Setting selectionLineWidth -> selectionLineWidth
    baritone.api.Settings$Setting renderSelection -> renderSelection
    baritone.api.Settings$Setting renderSelectionIgnoreDepth -> renderSelectionIgnoreDepth
    baritone.api.Settings$Setting renderSelectionCorners -> renderSelectionCorners
    baritone.api.Settings$Setting useSwordToMine -> useSwordToMine
    baritone.api.Settings$Setting desktopNotifications -> desktopNotifications
    baritone.api.Settings$Setting notificationOnPathComplete -> notificationOnPathComplete
    baritone.api.Settings$Setting notificationOnFarmFail -> notificationOnFarmFail
    baritone.api.Settings$Setting notificationOnBuildFinished -> notificationOnBuildFinished
    baritone.api.Settings$Setting notificationOnExploreFinished -> notificationOnExploreFinished
    baritone.api.Settings$Setting notificationOnMineFail -> notificationOnMineFail
    baritone.api.Settings$Setting elytraSimulationTicks -> elytraSimulationTicks
    baritone.api.Settings$Setting elytraPitchRange -> elytraPitchRange
    baritone.api.Settings$Setting elytraFireworkSpeed -> elytraFireworkSpeed
    baritone.api.Settings$Setting elytraFireworkSetbackUseDelay -> elytraFireworkSetbackUseDelay
    baritone.api.Settings$Setting elytraMinimumAvoidance -> elytraMinimumAvoidance
    baritone.api.Settings$Setting elytraConserveFireworks -> elytraConserveFireworks
    baritone.api.Settings$Setting elytraRenderRaytraces -> elytraRenderRaytraces
    baritone.api.Settings$Setting elytraRenderHitboxRaytraces -> elytraRenderHitboxRaytraces
    baritone.api.Settings$Setting elytraRenderSimulation -> elytraRenderSimulation
    baritone.api.Settings$Setting elytraAutoJump -> elytraAutoJump
    baritone.api.Settings$Setting elytraNetherSeed -> elytraNetherSeed
    baritone.api.Settings$Setting elytraPredictTerrain -> elytraPredictTerrain
    baritone.api.Settings$Setting elytraAutoSwap -> elytraAutoSwap
    baritone.api.Settings$Setting elytraMinimumDurability -> elytraMinimumDurability
    baritone.api.Settings$Setting elytraMinFireworksBeforeLanding -> elytraMinFireworksBeforeLanding
    baritone.api.Settings$Setting elytraAllowEmergencyLand -> elytraAllowEmergencyLand
    baritone.api.Settings$Setting elytraTimeBetweenCacheCullSecs -> elytraTimeBetweenCacheCullSecs
    baritone.api.Settings$Setting elytraCacheCullDistance -> elytraCacheCullDistance
    baritone.api.Settings$Setting elytraAllowLandOnNetherFortress -> elytraAllowLandOnNetherFortress
    baritone.api.Settings$Setting elytraTermsAccepted -> elytraTermsAccepted
    java.util.Map byLowerName -> byLowerName
    java.util.List allSettings -> allSettings
    java.util.Map settingTypes -> settingTypes
    void <init>() -> <init>
    void lambda$new$0(tl) -> a
baritone.api.Settings$JavaOnly -> baritone.e$a:
baritone.api.Settings$Setting -> baritone.e$b:
    java.lang.Object value -> a
    java.lang.Object defaultValue -> b
    java.lang.String name -> a
    boolean javaOnly -> a
    baritone.api.Settings this$0 -> a
    void <init>(baritone.api.Settings,java.lang.Object) -> <init>
    java.lang.String getName() -> a
    java.lang.String toString() -> toString
    void reset() -> a
    java.lang.reflect.Type getType() -> a
baritone.api.behavior.ILookBehavior -> baritone.f:
    void updateTarget(baritone.api.utils.Rotation,boolean) -> a
    baritone.api.behavior.look.IAimProcessor getAimProcessor() -> a
baritone.api.behavior.IPathingBehavior -> baritone.g:
    java.util.Optional ticksRemainingInSegment() -> a
    java.util.Optional ticksRemainingInSegment(boolean) -> a
    java.util.Optional estimatedTicksToGoal() -> b
    boolean isPathing() -> a
    boolean hasPath() -> b
    boolean cancelEverything() -> c
    void forceCancel() -> a
    baritone.api.pathing.path.IPathExecutor getCurrent() -> a
baritone.api.behavior.look.IAimProcessor -> baritone.h:
    baritone.api.utils.Rotation peekRotation(baritone.api.utils.Rotation) -> a
    baritone.api.behavior.look.IAimProcessor fork$7002412() -> a
    void advance$13462e() -> a
    baritone.api.utils.Rotation nextRotation(baritone.api.utils.Rotation) -> b
baritone.api.cache.ICachedWorld -> baritone.i:
    void queueForPacking(dhq) -> a
    boolean isCached(int,int) -> a
    java.util.ArrayList getLocationsOf(java.lang.String,int,int,int,int) -> a
    void reloadAllFromDisk() -> a
    void save() -> b
baritone.api.cache.IWaypoint -> baritone.j:
    java.lang.String getName() -> a
    baritone.api.cache.IWaypoint$Tag getTag() -> a
    long getCreationTimestamp() -> a
    baritone.api.utils.BetterBlockPos getLocation() -> a
baritone.api.cache.IWaypoint$Tag -> baritone.j$a:
    baritone.api.cache.IWaypoint$Tag HOME -> c
    baritone.api.cache.IWaypoint$Tag DEATH -> a
    baritone.api.cache.IWaypoint$Tag BED -> d
    baritone.api.cache.IWaypoint$Tag USER -> b
    java.lang.String[] names -> a
    baritone.api.cache.IWaypoint$Tag[] $VALUES -> a
    baritone.api.cache.IWaypoint$Tag[] values() -> values
    baritone.api.cache.IWaypoint$Tag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    baritone.api.cache.IWaypoint$Tag getByName(java.lang.String) -> a
    java.lang.String[] getAllNames() -> a
    void <clinit>() -> <clinit>
baritone.api.cache.IWaypointCollection -> baritone.k:
    void addWaypoint(baritone.api.cache.IWaypoint) -> a
    void removeWaypoint(baritone.api.cache.IWaypoint) -> b
    java.util.Set getByTag(baritone.api.cache.IWaypoint$Tag) -> a
    java.util.Set getAllWaypoints() -> a
baritone.api.cache.IWorldData -> baritone.l:
    baritone.api.cache.ICachedWorld getCachedWorld() -> a
    baritone.api.cache.IWaypointCollection getWaypoints() -> a
baritone.api.cache.IWorldProvider -> baritone.m:
    baritone.api.cache.IWorldData getCurrentWorld() -> a
    void ifWorldLoaded(java.util.function.Consumer) -> a
baritone.api.cache.IWorldScanner -> baritone.n:
    java.util.List scanChunkRadius$7fc9620e(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,int,int) -> a
    java.util.List scanChunkRadius$1b25c07e(baritone.api.utils.IPlayerContext,java.util.List) -> a
    int repack(baritone.api.utils.IPlayerContext) -> a
baritone.api.cache.Waypoint -> baritone.o:
    java.lang.String name -> a
    baritone.api.cache.IWaypoint$Tag tag -> a
    long creationTimestamp -> a
    baritone.api.utils.BetterBlockPos location -> a
    void <init>(java.lang.String,baritone.api.cache.IWaypoint$Tag,baritone.api.utils.BetterBlockPos) -> <init>
    void <init>(java.lang.String,baritone.api.cache.IWaypoint$Tag,baritone.api.utils.BetterBlockPos,long) -> <init>
    int hashCode() -> hashCode
    java.lang.String getName() -> a
    baritone.api.cache.IWaypoint$Tag getTag() -> a
    long getCreationTimestamp() -> a
    baritone.api.utils.BetterBlockPos getLocation() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
baritone.api.command.Command -> baritone.p:
    baritone.api.IBaritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    java.util.List names -> a
    void <init>(baritone.api.IBaritone,java.lang.String[]) -> <init>
    java.util.List getNames() -> a
    java.lang.String lambda$new$0(java.lang.String) -> a
baritone.api.command.IBaritoneChatControl -> baritone.q:
    java.lang.String FORCE_COMMAND_PREFIX -> a
    void <clinit>() -> <clinit>
baritone.api.command.ICommand -> baritone.r:
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    java.util.List getNames() -> a
baritone.api.command.argparser.IArgParser -> baritone.s:
    java.lang.Class getTarget() -> a
baritone.api.command.argparser.IArgParser$Stateless -> baritone.s$a:
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> a
baritone.api.command.argument.IArgConsumer -> baritone.t:
    java.util.LinkedList getArgs() -> a
    boolean has(int) -> a
    boolean hasAny() -> a
    boolean hasAtMost(int) -> b
    boolean hasExactly(int) -> c
    boolean hasExactlyOne() -> b
    boolean is(java.lang.Class) -> a
    java.lang.String peekString() -> a
    java.lang.Object peekAsOrNull(java.lang.Class) -> a
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypeFor) -> a
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypePost) -> a
    java.lang.Object peekDatatypePostOrNull(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> a
    baritone.api.command.argument.ICommandArgument get() -> a
    java.lang.String getString() -> b
    java.lang.Enum getEnum(java.lang.Class) -> a
    java.lang.Object getAs(java.lang.Class) -> b
    java.lang.Object getAsOrDefault(java.lang.Class,java.lang.Object) -> a
    java.lang.Object getDatatypePost(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> b
    java.lang.Object getDatatypeFor(baritone.api.command.datatypes.IDatatypeFor) -> b
    java.util.stream.Stream tabCompleteDatatype(baritone.api.command.datatypes.IDatatype) -> a
    java.lang.String rawRest() -> c
    void requireMin(int) -> a
    void requireMax(int) -> b
    void requireExactly(int) -> c
    baritone.api.command.argument.ICommandArgument consumed() -> b
    java.lang.String consumedString() -> d
baritone.api.command.argument.ICommandArgument -> baritone.u:
    int getIndex() -> a
    java.lang.String getValue() -> a
    java.lang.String getRawRest() -> b
    java.lang.Enum getEnum(java.lang.Class) -> a
    java.lang.Object getAs(java.lang.Class) -> a
    boolean is(java.lang.Class) -> a
baritone.api.command.datatypes.BlockById -> baritone.v:
    baritone.api.command.datatypes.BlockById INSTANCE -> a
    java.util.regex.Pattern PATTERN -> a
    baritone.api.command.datatypes.BlockById[] $VALUES -> a
    baritone.api.command.datatypes.BlockById[] values() -> values
    baritone.api.command.datatypes.BlockById valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.EntityClassById -> baritone.w:
    baritone.api.command.datatypes.EntityClassById INSTANCE -> a
    baritone.api.command.datatypes.EntityClassById[] $VALUES -> a
    baritone.api.command.datatypes.EntityClassById[] values() -> values
    baritone.api.command.datatypes.EntityClassById valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForAxis -> baritone.x:
    baritone.api.command.datatypes.ForAxis INSTANCE -> a
    baritone.api.command.datatypes.ForAxis[] $VALUES -> a
    baritone.api.command.datatypes.ForAxis[] values() -> values
    baritone.api.command.datatypes.ForAxis valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForBlockOptionalMeta -> baritone.y:
    baritone.api.command.datatypes.ForBlockOptionalMeta INSTANCE -> a
    java.util.regex.Pattern PATTERN -> a
    baritone.api.command.datatypes.ForBlockOptionalMeta[] $VALUES -> a
    baritone.api.command.datatypes.ForBlockOptionalMeta[] values() -> values
    baritone.api.command.datatypes.ForBlockOptionalMeta valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.String[] splitLast(java.lang.String,char) -> a
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.String lambda$tabComplete$3(java.lang.String,java.lang.String) -> a
    java.lang.String lambda$tabComplete$2(java.lang.String,java.lang.String) -> b
    boolean lambda$tabComplete$1(java.util.Set,java.lang.String) -> a
    java.lang.String lambda$tabComplete$0(java.lang.String) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForDirection -> baritone.z:
    baritone.api.command.datatypes.ForDirection INSTANCE -> a
    baritone.api.command.datatypes.ForDirection[] $VALUES -> a
    baritone.api.command.datatypes.ForDirection[] values() -> values
    baritone.api.command.datatypes.ForDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.ForWaypoints -> baritone.aa:
    baritone.api.command.datatypes.ForWaypoints INSTANCE -> a
    baritone.api.command.datatypes.ForWaypoints[] $VALUES -> a
    baritone.api.command.datatypes.ForWaypoints[] values() -> values
    baritone.api.command.datatypes.ForWaypoints valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    baritone.api.cache.IWaypointCollection waypoints(baritone.api.IBaritone) -> a
    baritone.api.cache.IWaypoint[] getWaypoints(baritone.api.IBaritone) -> a
    baritone.api.cache.IWaypoint[] getWaypointsByTag(baritone.api.IBaritone,baritone.api.cache.IWaypoint$Tag) -> a
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
    baritone.api.cache.IWaypoint[] lambda$getWaypointsByName$5(int) -> a
    boolean lambda$getWaypointsByName$4(java.lang.String,baritone.api.cache.IWaypoint) -> a
    baritone.api.cache.IWaypoint[] lambda$getWaypointsByTag$3(int) -> b
    java.lang.String[] lambda$getWaypointNames$2(int) -> a
    boolean lambda$getWaypointNames$1(java.lang.String) -> a
    baritone.api.cache.IWaypoint[] lambda$getWaypoints$0(int) -> c
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.IDatatype -> baritone.ab:
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
baritone.api.command.datatypes.IDatatypeContext -> baritone.ac:
    baritone.api.IBaritone getBaritone() -> a
    baritone.api.command.argument.IArgConsumer getConsumer() -> a
baritone.api.command.datatypes.IDatatypeFor -> baritone.ad:
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
baritone.api.command.datatypes.IDatatypePost -> baritone.ae:
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
baritone.api.command.datatypes.NearbyPlayer -> baritone.af:
    baritone.api.command.datatypes.NearbyPlayer INSTANCE -> a
    baritone.api.command.datatypes.NearbyPlayer[] $VALUES -> a
    baritone.api.command.datatypes.NearbyPlayer[] values() -> values
    baritone.api.command.datatypes.NearbyPlayer valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.util.List getPlayers(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object get(baritone.api.command.datatypes.IDatatypeContext) -> a
    boolean lambda$get$0(java.lang.String,cbu) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeBlockPos -> baritone.ag:
    baritone.api.command.datatypes.RelativeBlockPos INSTANCE -> a
    baritone.api.command.datatypes.RelativeBlockPos[] $VALUES -> a
    baritone.api.command.datatypes.RelativeBlockPos[] values() -> values
    baritone.api.command.datatypes.RelativeBlockPos valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeCoordinate -> baritone.ah:
    baritone.api.command.datatypes.RelativeCoordinate INSTANCE -> a
    java.lang.String ScalesAliasRegex -> a
    java.util.regex.Pattern PATTERN -> a
    baritone.api.command.datatypes.RelativeCoordinate[] $VALUES -> a
    baritone.api.command.datatypes.RelativeCoordinate[] values() -> values
    baritone.api.command.datatypes.RelativeCoordinate valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeFile -> baritone.ai:
    baritone.api.command.datatypes.RelativeFile INSTANCE -> a
    baritone.api.command.datatypes.RelativeFile[] $VALUES -> a
    baritone.api.command.datatypes.RelativeFile[] values() -> values
    baritone.api.command.datatypes.RelativeFile valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.io.File apply(baritone.api.command.datatypes.IDatatypeContext,java.io.File) -> a
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.io.File getCanonicalFileUnchecked(java.io.File) -> a
    java.util.stream.Stream tabComplete(baritone.api.command.argument.IArgConsumer,java.io.File) -> a
    java.io.File gameDir(eqv) -> a
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
    boolean lambda$tabComplete$2(java.lang.String) -> a
    boolean lambda$tabComplete$1(java.lang.String,java.lang.String) -> a
    java.lang.String lambda$tabComplete$0(java.nio.file.Path,java.nio.file.Path,java.io.File) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoal -> baritone.aj:
    baritone.api.command.datatypes.RelativeGoal INSTANCE -> a
    baritone.api.command.datatypes.RelativeGoal[] $VALUES -> a
    baritone.api.command.datatypes.RelativeGoal[] values() -> values
    baritone.api.command.datatypes.RelativeGoal valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoalBlock -> baritone.ak:
    baritone.api.command.datatypes.RelativeGoalBlock INSTANCE -> a
    baritone.api.command.datatypes.RelativeGoalBlock[] $VALUES -> a
    baritone.api.command.datatypes.RelativeGoalBlock[] values() -> values
    baritone.api.command.datatypes.RelativeGoalBlock valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoalXZ -> baritone.al:
    baritone.api.command.datatypes.RelativeGoalXZ INSTANCE -> a
    baritone.api.command.datatypes.RelativeGoalXZ[] $VALUES -> a
    baritone.api.command.datatypes.RelativeGoalXZ[] values() -> values
    baritone.api.command.datatypes.RelativeGoalXZ valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
    void <clinit>() -> <clinit>
baritone.api.command.datatypes.RelativeGoalYLevel -> baritone.am:
    baritone.api.command.datatypes.RelativeGoalYLevel INSTANCE -> a
    baritone.api.command.datatypes.RelativeGoalYLevel[] $VALUES -> a
    baritone.api.command.datatypes.RelativeGoalYLevel[] values() -> values
    baritone.api.command.datatypes.RelativeGoalYLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.stream.Stream tabComplete(baritone.api.command.datatypes.IDatatypeContext) -> a
    java.lang.Object apply(baritone.api.command.datatypes.IDatatypeContext,java.lang.Object) -> a
    void <clinit>() -> <clinit>
baritone.api.command.exception.CommandErrorMessageException -> baritone.an:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String,java.lang.Throwable) -> <init>
    java.lang.String formatMessage(baritone.api.command.argument.ICommandArgument,java.lang.String) -> a
baritone.api.command.exception.CommandException -> baritone.ao:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.Throwable) -> <init>
baritone.api.command.exception.CommandInvalidTypeException -> baritone.ap:
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String,java.lang.Throwable) -> <init>
    void <init>(baritone.api.command.argument.ICommandArgument,java.lang.String,java.lang.String) -> <init>
baritone.api.command.exception.CommandNoParserForTypeException -> baritone.aq:
    void <init>(java.lang.Class) -> <init>
baritone.api.command.exception.CommandNotEnoughArgumentsException -> baritone.ar:
    void <init>(int) -> <init>
baritone.api.command.exception.CommandNotFoundException -> baritone.as:
    void <init>(java.lang.String) -> <init>
    void handle$400e7145() -> a
baritone.api.command.exception.CommandUnhandledException -> baritone.at:
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.Throwable) -> <init>
    void handle$400e7145() -> a
baritone.api.command.exception.ICommandException -> baritone.au:
    java.lang.String getMessage() -> getMessage
    void handle$400e7145() -> a
baritone.api.command.helpers.Paginator -> baritone.av:
    java.util.List entries -> a
    int pageSize -> a
    int page -> b
    void <init>(java.util.List) -> <init>
    int getMaxPage() -> a
    boolean validPage(int) -> a
    void paginate(baritone.api.command.argument.IArgConsumer,baritone.api.command.helpers.Paginator,java.lang.Runnable,java.util.function.Function,java.lang.String) -> a
    void paginate(baritone.api.command.argument.IArgConsumer,java.lang.Object[],java.lang.Runnable,java.util.function.Function,java.lang.String) -> a
baritone.api.command.helpers.TabCompleteHelper -> baritone.aw:
    java.util.stream.Stream stream -> a
    void <init>() -> <init>
    baritone.api.command.helpers.TabCompleteHelper append(java.util.stream.Stream) -> a
    baritone.api.command.helpers.TabCompleteHelper append(java.lang.String[]) -> a
    baritone.api.command.helpers.TabCompleteHelper append(java.lang.Class) -> a
    baritone.api.command.helpers.TabCompleteHelper prepend(java.util.stream.Stream) -> b
    baritone.api.command.helpers.TabCompleteHelper prepend(java.lang.String[]) -> b
    baritone.api.command.helpers.TabCompleteHelper map(java.util.function.Function) -> a
    baritone.api.command.helpers.TabCompleteHelper filter(java.util.function.Predicate) -> a
    baritone.api.command.helpers.TabCompleteHelper sort(java.util.Comparator) -> a
    baritone.api.command.helpers.TabCompleteHelper filterPrefix(java.lang.String) -> a
    baritone.api.command.helpers.TabCompleteHelper filterPrefixNamespaced(java.lang.String) -> b
    baritone.api.command.helpers.TabCompleteHelper addCommands(baritone.api.command.manager.ICommandManager) -> a
    baritone.api.command.helpers.TabCompleteHelper addSettings() -> a
    baritone.api.command.helpers.TabCompleteHelper addModifiedSettings() -> b
    baritone.api.command.helpers.TabCompleteHelper addToggleableSettings() -> c
    boolean lambda$addSettings$3(baritone.api.Settings$Setting) -> a
    java.util.stream.Stream lambda$addCommands$2(baritone.api.command.ICommand) -> a
    boolean lambda$filterPrefix$0(java.lang.String,java.lang.String) -> a
baritone.api.command.manager.ICommandManager -> baritone.ax:
    baritone.api.IBaritone getBaritone() -> a
    baritone.api.command.registry.Registry getRegistry() -> a
    baritone.api.command.ICommand getCommand(java.lang.String) -> a
    boolean execute(java.lang.String) -> a
    boolean execute(asw) -> a
    java.util.stream.Stream tabComplete(java.lang.String) -> a
baritone.api.command.registry.Registry -> baritone.ay:
    java.util.Deque _entries -> a
    java.util.Set registered -> a
    java.util.Collection entries -> a
    void <init>() -> <init>
    boolean register(java.lang.Object) -> a
    java.util.Iterator descendingIterator() -> a
    java.util.stream.Stream descendingStream() -> a
baritone.api.event.events.ChatEvent -> baritone.az:
    java.lang.String message -> a
    void <init>(java.lang.String) -> <init>
baritone.api.event.events.ChunkEvent -> baritone.ba:
    baritone.api.event.events.type.EventState state -> a
    baritone.api.event.events.ChunkEvent$Type type -> a
    int x -> a
    int z -> b
    void <init>(baritone.api.event.events.type.EventState,baritone.api.event.events.ChunkEvent$Type,int,int) -> <init>
    boolean isPostPopulate() -> a
baritone.api.event.events.ChunkEvent$Type -> baritone.ba$a:
    baritone.api.event.events.ChunkEvent$Type LOAD -> d
    baritone.api.event.events.ChunkEvent$Type UNLOAD -> a
    baritone.api.event.events.ChunkEvent$Type POPULATE_FULL -> b
    baritone.api.event.events.ChunkEvent$Type POPULATE_PARTIAL -> c
    baritone.api.event.events.ChunkEvent$Type[] $VALUES -> a
    baritone.api.event.events.ChunkEvent$Type[] values() -> values
    baritone.api.event.events.ChunkEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.event.events.PathEvent -> baritone.bb:
    baritone.api.event.events.PathEvent CALC_STARTED -> a
    baritone.api.event.events.PathEvent CALC_FINISHED_NOW_EXECUTING -> b
    baritone.api.event.events.PathEvent CALC_FAILED -> c
    baritone.api.event.events.PathEvent NEXT_SEGMENT_CALC_STARTED -> d
    baritone.api.event.events.PathEvent NEXT_SEGMENT_CALC_FINISHED -> e
    baritone.api.event.events.PathEvent CONTINUING_ONTO_PLANNED_NEXT -> f
    baritone.api.event.events.PathEvent SPLICING_ONTO_NEXT_EARLY -> g
    baritone.api.event.events.PathEvent AT_GOAL -> h
    baritone.api.event.events.PathEvent PATH_FINISHED_NEXT_STILL_CALCULATING -> i
    baritone.api.event.events.PathEvent NEXT_CALC_FAILED -> j
    baritone.api.event.events.PathEvent DISCARD_NEXT -> k
    baritone.api.event.events.PathEvent CANCELED -> l
    baritone.api.event.events.PathEvent[] $VALUES -> a
    baritone.api.event.events.PathEvent[] values() -> values
    baritone.api.event.events.PathEvent valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.event.events.RotationMoveEvent -> baritone.bc:
    baritone.api.utils.Rotation original -> a
    float yaw -> a
    float pitch -> b
    void <init>(float,float) -> <init>
baritone.api.event.events.RotationMoveEvent$Type -> baritone.bc$a:
    baritone.api.event.events.RotationMoveEvent$Type MOTION_UPDATE -> a
    baritone.api.event.events.RotationMoveEvent$Type JUMP -> b
    baritone.api.event.events.RotationMoveEvent$Type[] $VALUES -> a
    baritone.api.event.events.RotationMoveEvent$Type[] values() -> values
    baritone.api.event.events.RotationMoveEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.event.events.SprintStateEvent -> baritone.bd:
    java.lang.Boolean state -> a
    void <init>() -> <init>
baritone.api.event.events.TabCompleteEvent -> baritone.be:
    java.lang.String prefix -> a
    java.lang.String[] completions -> a
    void <init>(java.lang.String) -> <init>
baritone.api.event.events.TickEvent -> baritone.bf:
    int overallTickCount -> a
    baritone.api.event.events.TickEvent$Type type -> a
    void <init>(baritone.api.event.events.TickEvent$Type) -> <init>
    java.util.function.BiFunction createNextProvider() -> a
    baritone.api.event.events.TickEvent lambda$createNextProvider$0(int,baritone.api.event.events.type.EventState,baritone.api.event.events.TickEvent$Type) -> a
baritone.api.event.events.TickEvent$Type -> baritone.bf$a:
    baritone.api.event.events.TickEvent$Type IN -> a
    baritone.api.event.events.TickEvent$Type OUT -> b
    baritone.api.event.events.TickEvent$Type[] $VALUES -> a
    baritone.api.event.events.TickEvent$Type[] values() -> values
    baritone.api.event.events.TickEvent$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.event.events.WorldEvent -> baritone.bg:
    fix world -> a
    baritone.api.event.events.type.EventState state -> a
    void <init>(fix,baritone.api.event.events.type.EventState) -> <init>
baritone.api.event.events.type.Cancellable -> baritone.bh:
    boolean cancelled -> a
    void <init>() -> <init>
baritone.api.event.events.type.EventState -> baritone.bi:
    baritone.api.event.events.type.EventState PRE -> a
    baritone.api.event.events.type.EventState POST -> b
    baritone.api.event.events.type.EventState[] $VALUES -> a
    baritone.api.event.events.type.EventState[] values() -> values
    baritone.api.event.events.type.EventState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.event.listener.AbstractGameEventListener -> baritone.bj:
    void onTick(baritone.api.event.events.TickEvent) -> a
    void onPostTick(baritone.api.event.events.TickEvent) -> b
    void onPlayerUpdate$131b5bbf(baritone.api.utils.VecUtils) -> a
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> a
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> a
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> a
    void onBlockChange$4a8de162(baritone.api.utils.NotificationHelper) -> a
    void onRenderPass$493a6673(baritone.cache.ChunkPacker) -> a
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> a
    void onSendPacket$1f25927f(baritone.api.utils.RayTraceUtils) -> a
    void onReceivePacket$1f25927f(baritone.api.utils.RayTraceUtils) -> b
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> a
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> a
    void onPlayerDeath() -> c_
    void onPathEvent(baritone.api.event.events.PathEvent) -> a
baritone.api.event.listener.IEventBus -> baritone.bk:
    void registerEventListener(baritone.api.event.listener.IGameEventListener) -> a
baritone.api.event.listener.IGameEventListener -> baritone.bl:
    void onTick(baritone.api.event.events.TickEvent) -> a
    void onPostTick(baritone.api.event.events.TickEvent) -> b
    void onPlayerUpdate$131b5bbf(baritone.api.utils.VecUtils) -> a
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> a
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> a
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> a
    void onBlockChange$4a8de162(baritone.api.utils.NotificationHelper) -> a
    void onRenderPass$493a6673(baritone.cache.ChunkPacker) -> a
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> a
    void onSendPacket$1f25927f(baritone.api.utils.RayTraceUtils) -> a
    void onReceivePacket$1f25927f(baritone.api.utils.RayTraceUtils) -> b
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> a
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> a
    void onPlayerDeath() -> c_
    void onPathEvent(baritone.api.event.events.PathEvent) -> a
baritone.api.pathing.calc.IPath -> baritone.bm:
    java.util.List movements() -> a
    java.util.List positions() -> b
    baritone.api.pathing.calc.IPath postProcess() -> a
    int length() -> a
    baritone.api.pathing.goals.Goal getGoal() -> a
    int getNumNodesConsidered() -> b
    baritone.api.utils.BetterBlockPos getSrc() -> a
    baritone.api.utils.BetterBlockPos getDest() -> b
    double ticksRemainingFrom(int) -> a
    baritone.api.pathing.calc.IPath cutoffAtLoadedChunks(java.lang.Object) -> a
    baritone.api.pathing.calc.IPath staticCutoff(baritone.api.pathing.goals.Goal) -> a
    void sanityCheck() -> a
baritone.api.pathing.calc.IPathingControlManager -> baritone.bn:
    void registerProcess(baritone.api.process.IBaritoneProcess) -> a
    java.util.Optional mostRecentInControl() -> a
    java.util.Optional mostRecentCommand() -> b
baritone.api.pathing.goals.Goal -> baritone.bo:
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean isInGoal(gw) -> a
    double heuristic() -> a
baritone.api.pathing.goals.GoalAxis -> baritone.bp:
    double SQRT_2_OVER_2 -> a
    void <init>() -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
baritone.api.pathing.goals.GoalBlock -> baritone.bq:
    int x -> a
    int y -> b
    int z -> c
    void <init>(gw) -> <init>
    void <init>(int,int,int) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    gw getGoalPos() -> a
    double calculate(double,int,double) -> a
baritone.api.pathing.goals.GoalComposite -> baritone.br:
    baritone.api.pathing.goals.Goal[] goals -> a
    void <init>(baritone.api.pathing.goals.Goal[]) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    double heuristic() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalGetToBlock -> baritone.bs:
    int x -> a
    int y -> b
    int z -> c
    void <init>(gw) -> <init>
    gw getGoalPos() -> a
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalInverted -> baritone.bt:
    baritone.api.pathing.goals.Goal origin -> a
    void <init>(baritone.api.pathing.goals.Goal) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    double heuristic() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalNear -> baritone.bu:
    int x -> a
    int y -> b
    int z -> c
    int rangeSq -> d
    void <init>(gw,int) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    double heuristic() -> a
    gw getGoalPos() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalRunAway -> baritone.bv:
    gw[] from -> a
    java.lang.Integer maintainY -> a
    void <init>(gw[]) -> <init>
    void <init>(java.lang.Integer,gw[]) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    double heuristic() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalStrictDirection -> baritone.bw:
    int x -> a
    int y -> b
    int z -> c
    int dx -> d
    int dz -> e
    void <init>(gw,ha) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    double heuristic() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalTwoBlocks -> baritone.bx:
    int x -> a
    int y -> b
    int z -> c
    void <init>(gw) -> <init>
    void <init>(int,int,int) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    gw getGoalPos() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.goals.GoalXZ -> baritone.by:
    double SQRT_2 -> a
    int x -> a
    int z -> b
    void <init>(int,int) -> <init>
    void <init>(baritone.api.utils.BetterBlockPos) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    double calculate(double,double) -> a
    baritone.api.pathing.goals.GoalXZ fromDirection(ehn,float,double) -> a
    void <clinit>() -> <clinit>
baritone.api.pathing.goals.GoalYLevel -> baritone.bz:
    int level -> a
    void <init>(int) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    double calculate(int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.api.pathing.movement.ActionCosts -> baritone.ca:
    double[] FALL_N_BLOCKS_COST -> a
    double FALL_1_25_BLOCKS_COST -> a
    double FALL_0_25_BLOCKS_COST -> b
    double JUMP_ONE_BLOCK_COST -> c
    double distanceToTicks(double) -> a
    void <clinit>() -> <clinit>
baritone.api.pathing.movement.IMovement -> baritone.cb:
    double getCost() -> a
    void reset() -> a
    boolean safeToCancel() -> a
    baritone.api.utils.BetterBlockPos getSrc() -> a
    baritone.api.utils.BetterBlockPos getDest() -> b
    gw getDirection() -> a
baritone.api.pathing.movement.MovementStatus -> baritone.cc:
    baritone.api.pathing.movement.MovementStatus PREPPING -> a
    baritone.api.pathing.movement.MovementStatus WAITING -> b
    baritone.api.pathing.movement.MovementStatus RUNNING -> c
    baritone.api.pathing.movement.MovementStatus SUCCESS -> d
    baritone.api.pathing.movement.MovementStatus UNREACHABLE -> e
    baritone.api.pathing.movement.MovementStatus FAILED -> f
    baritone.api.pathing.movement.MovementStatus CANCELED -> g
    boolean complete -> a
    baritone.api.pathing.movement.MovementStatus[] $VALUES -> a
    baritone.api.pathing.movement.MovementStatus[] values() -> values
    baritone.api.pathing.movement.MovementStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,boolean) -> <init>
    void <clinit>() -> <clinit>
baritone.api.pathing.path.IPathExecutor -> baritone.cd:
    baritone.api.pathing.calc.IPath getPath() -> a
    int getPosition() -> a
baritone.api.process.IBaritoneProcess -> baritone.ce:
    boolean isActive() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    boolean isTemporary() -> b
    void onLostControl() -> a
    double priority() -> a
    java.lang.String displayName() -> a
    java.lang.String displayName0() -> b
baritone.api.process.IBuilderProcess -> baritone.cf:
    void build(java.lang.String,baritone.api.schematic.ISchematic,hy) -> a
    boolean build(java.lang.String,java.io.File,hy) -> a
    void buildOpenLitematic(int) -> a
    void resume() -> b
    void clearArea(gw,gw) -> a
baritone.api.process.ICustomGoalProcess -> baritone.cg:
    void setGoal(baritone.api.pathing.goals.Goal) -> a
    void path() -> b
    baritone.api.pathing.goals.Goal getGoal() -> a
    baritone.api.pathing.goals.Goal mostRecentGoal() -> b
    void setGoalAndPath(baritone.api.pathing.goals.Goal) -> b
baritone.api.process.IElytraProcess -> baritone.ch:
    void repackChunks() -> b
    void pathTo(baritone.api.pathing.goals.Goal) -> a
    void resetState() -> c
    boolean isLoaded() -> c
    boolean isSafeToCancel() -> d
baritone.api.process.IExploreProcess -> baritone.ci:
    void explore(int,int) -> a
    void applyJsonFilter(java.nio.file.Path,boolean) -> a
baritone.api.process.IFarmProcess -> baritone.cj:
    void farm(int,gw) -> a
baritone.api.process.IFollowProcess -> baritone.ck:
    void follow(java.util.function.Predicate) -> a
baritone.api.process.IGetToBlockProcess -> baritone.cl:
    void getToBlock(baritone.api.utils.BlockOptionalMeta) -> a
    boolean blacklistClosest() -> c
baritone.api.process.IMineProcess -> baritone.cm:
    void mine(int,baritone.api.utils.BlockOptionalMetaLookup) -> a
    void mine(int,baritone.api.utils.BlockOptionalMeta[]) -> a
    void cancel() -> b
baritone.api.process.PathingCommand -> baritone.cn:
    baritone.api.pathing.goals.Goal goal -> a
    baritone.api.process.PathingCommandType commandType -> a
    void <init>(baritone.api.pathing.goals.Goal,baritone.api.process.PathingCommandType) -> <init>
    java.lang.String toString() -> toString
baritone.api.process.PathingCommandType -> baritone.co:
    baritone.api.process.PathingCommandType SET_GOAL_AND_PATH -> a
    baritone.api.process.PathingCommandType REQUEST_PAUSE -> b
    baritone.api.process.PathingCommandType CANCEL_AND_SET_GOAL -> c
    baritone.api.process.PathingCommandType REVALIDATE_GOAL_AND_PATH -> d
    baritone.api.process.PathingCommandType FORCE_REVALIDATE_GOAL_AND_PATH -> e
    baritone.api.process.PathingCommandType DEFER -> f
    baritone.api.process.PathingCommandType SET_GOAL_AND_PAUSE -> g
    baritone.api.process.PathingCommandType[] $VALUES -> a
    baritone.api.process.PathingCommandType[] values() -> values
    baritone.api.process.PathingCommandType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.schematic.AbstractSchematic -> baritone.cp:
    int x -> a
    int y -> b
    int z -> c
    void <init>() -> <init>
    void <init>(int,int,int) -> <init>
    int widthX() -> a
    int heightY() -> b
    int lengthZ() -> c
baritone.api.schematic.CompositeSchematic -> baritone.cq:
    java.util.List schematics -> a
    baritone.api.schematic.CompositeSchematicEntry[] schematicArr -> a
    void recalcArr() -> b
    void <init>() -> <init>
    void put(baritone.api.schematic.ISchematic,int,int,int) -> a
    baritone.api.schematic.CompositeSchematicEntry getSchematic(int,int,int,dfj) -> a
    boolean inSchematic(int,int,int,dfj) -> a
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
    void reset() -> a
baritone.api.schematic.CompositeSchematicEntry -> baritone.cr:
    baritone.api.schematic.ISchematic schematic -> a
    int x -> a
    int y -> b
    int z -> c
    void <init>(baritone.api.schematic.ISchematic,int,int,int) -> <init>
baritone.api.schematic.FillSchematic -> baritone.cs:
    baritone.api.utils.BlockOptionalMeta bom -> a
    void <init>(int,int,int,baritone.api.utils.BlockOptionalMeta) -> <init>
    void <init>(int,int,int,dfj) -> <init>
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
baritone.api.schematic.ISchematic -> baritone.ct:
    boolean inSchematic(int,int,int,dfj) -> a
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
    void reset() -> a
    int widthX() -> a
    int heightY() -> b
    int lengthZ() -> c
baritone.api.schematic.IStaticSchematic -> baritone.cu:
    dfj getDirect(int,int,int) -> a
    dfj[] getColumn(int,int) -> a
baritone.api.schematic.MaskSchematic -> baritone.cv:
    baritone.api.schematic.ISchematic schematic -> a
    void <init>(baritone.api.schematic.ISchematic) -> <init>
    boolean partOfMask(int,int,int,dfj) -> b
    boolean inSchematic(int,int,int,dfj) -> a
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
    baritone.api.schematic.MaskSchematic create(baritone.api.schematic.ISchematic,baritone.api.schematic.mask.Mask) -> a
baritone.api.schematic.MaskSchematic$1 -> baritone.cw:
    baritone.api.schematic.mask.Mask val$function -> a
    void <init>(baritone.api.schematic.ISchematic,baritone.api.schematic.mask.Mask) -> <init>
    boolean partOfMask(int,int,int,dfj) -> b
baritone.api.schematic.ReplaceSchematic -> baritone.cx:
    baritone.api.utils.BlockOptionalMetaLookup filter -> a
    java.lang.Boolean[][][] cache -> a
    void <init>(baritone.api.schematic.ISchematic,baritone.api.utils.BlockOptionalMetaLookup) -> <init>
    void reset() -> a
    boolean partOfMask(int,int,int,dfj) -> b
baritone.api.schematic.ShellSchematic -> baritone.cy:
    void <init>(baritone.api.schematic.ISchematic) -> <init>
    boolean partOfMask(int,int,int,dfj) -> b
baritone.api.schematic.SubstituteSchematic -> baritone.cz:
    baritone.api.schematic.ISchematic schematic -> a
    java.util.Map substitutions -> a
    java.util.Map blockStateCache -> b
    void <init>(baritone.api.schematic.ISchematic,java.util.Map) -> <init>
    boolean inSchematic(int,int,int,dfj) -> a
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
    dfj withBlock(dfj,csv) -> a
    java.util.Map lambda$withBlock$0(dfj) -> a
baritone.api.schematic.WallsSchematic -> baritone.da:
    void <init>(baritone.api.schematic.ISchematic) -> <init>
    boolean partOfMask(int,int,int,dfj) -> b
baritone.api.schematic.format.ISchematicFormat -> baritone.db:
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> a
    boolean isFileType(java.io.File) -> a
baritone.api.schematic.mask.AbstractMask -> baritone.dc:
    int widthX -> a
    int heightY -> b
    int lengthZ -> c
    void <init>(int,int,int) -> <init>
    int widthX() -> a
    int heightY() -> b
    int lengthZ() -> c
baritone.api.schematic.mask.Mask -> baritone.dd:
    boolean partOfMask$383347cf(int,int,int) -> a
    int widthX() -> a
    int heightY() -> b
    int lengthZ() -> c
baritone.api.schematic.mask.PreComputedMask -> baritone.de:
    boolean[][][] mask -> a
    void <init>(baritone.api.schematic.mask.StaticMask) -> <init>
    boolean partOfMask(int,int,int) -> b
baritone.api.schematic.mask.StaticMask -> baritone.df:
    boolean partOfMask(int,int,int) -> b
    boolean partOfMask$383347cf(int,int,int) -> a
    baritone.api.schematic.mask.StaticMask compute() -> a
baritone.api.schematic.mask.shape.CylinderMask -> baritone.dg:
    double centerA -> a
    double centerB -> b
    double radiusSqA -> c
    double radiusSqB -> d
    boolean filled -> a
    ha$a alignment -> a
    void <init>(int,int,int,boolean,ha$a) -> <init>
    boolean partOfMask(int,int,int) -> b
    boolean outside(double,double) -> a
    int getA(int,int,ha$a) -> a
    int getB(int,int,ha$a) -> b
baritone.api.schematic.mask.shape.SphereMask -> baritone.dh:
    double centerX -> a
    double centerY -> b
    double centerZ -> c
    double radiusSqX -> d
    double radiusSqY -> e
    double radiusSqZ -> f
    boolean filled -> a
    void <init>(int,int,int,boolean) -> <init>
    boolean partOfMask(int,int,int) -> b
    boolean outside(double,double,double) -> a
baritone.api.selection.ISelection -> baritone.di:
    baritone.api.utils.BetterBlockPos pos1() -> a
    baritone.api.utils.BetterBlockPos pos2() -> b
    baritone.api.utils.BetterBlockPos min() -> c
    baritone.api.utils.BetterBlockPos max() -> d
    hy size() -> a
    ehi aabb() -> a
    baritone.api.selection.ISelection expand(ha,int) -> a
    baritone.api.selection.ISelection contract(ha,int) -> b
    baritone.api.selection.ISelection shift(ha,int) -> c
baritone.api.selection.ISelectionManager -> baritone.dj:
    baritone.api.selection.ISelection addSelection(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> a
    baritone.api.selection.ISelection removeSelection(baritone.api.selection.ISelection) -> a
    baritone.api.selection.ISelection[] removeAllSelections() -> a
    baritone.api.selection.ISelection[] getSelections() -> b
    baritone.api.selection.ISelection expand(baritone.api.selection.ISelection,ha,int) -> a
    baritone.api.selection.ISelection contract(baritone.api.selection.ISelection,ha,int) -> b
    baritone.api.selection.ISelection shift(baritone.api.selection.ISelection,ha,int) -> c
baritone.api.utils.BetterBlockPos -> baritone.dk:
    baritone.api.utils.BetterBlockPos ORIGIN -> a
    int x -> a
    int y -> b
    int z -> d
    void <init>(int,int,int) -> <init>
    void <init>(double,double,double) -> <init>
    void <init>(gw) -> <init>
    baritone.api.utils.BetterBlockPos from(gw) -> a
    int hashCode() -> hashCode
    long longHash(baritone.api.utils.BetterBlockPos) -> a
    long longHash(int,int,int) -> b
    boolean equals(java.lang.Object) -> equals
    baritone.api.utils.BetterBlockPos above() -> a
    baritone.api.utils.BetterBlockPos above(int) -> a
    baritone.api.utils.BetterBlockPos below() -> b
    baritone.api.utils.BetterBlockPos below(int) -> b
    baritone.api.utils.BetterBlockPos relative(ha) -> a
    baritone.api.utils.BetterBlockPos relative(ha,int) -> a
    baritone.api.utils.BetterBlockPos north() -> c
    baritone.api.utils.BetterBlockPos north(int) -> c
    baritone.api.utils.BetterBlockPos south() -> d
    baritone.api.utils.BetterBlockPos south(int) -> d
    baritone.api.utils.BetterBlockPos east() -> e
    baritone.api.utils.BetterBlockPos east(int) -> e
    baritone.api.utils.BetterBlockPos west() -> f
    baritone.api.utils.BetterBlockPos west(int) -> f
    double distanceSq(baritone.api.utils.BetterBlockPos) -> a
    double distanceTo(baritone.api.utils.BetterBlockPos) -> b
    java.lang.String toString() -> toString
    baritone.api.utils.BetterBlockPos deserializeFromLong(long) -> a
    gw a(ha,int) -> a
    gw a(ha) -> a
    gw g(int) -> g
    gw h() -> h
    gw f(int) -> f
    gw g() -> g
    gw e(int) -> e
    gw f() -> f
    gw d(int) -> d
    gw e() -> e
    gw c(int) -> c
    gw d() -> d
    gw b(int) -> b
    gw c() -> c
    hy d(hy) -> d
    hy b(ha$a,int) -> b
    hy b(ha,int) -> b
    hy b(ha) -> b
    hy i(int) -> i
    hy k() -> k
    hy j(int) -> j
    hy l() -> l
    hy k(int) -> k
    hy m() -> m
    hy l(int) -> l
    hy n() -> n
    hy m(int) -> m
    hy o() -> o
    hy n(int) -> n
    hy p() -> p
    hy o(int) -> o
    hy e(hy) -> e
    hy f(hy) -> f
    hy c(int,int,int) -> c
    int compareTo(java.lang.Object) -> compareTo
    void <clinit>() -> <clinit>
baritone.api.utils.BlockOptionalMeta -> baritone.api.utils.BlockOptionalMeta:
    java.util.regex.Pattern PATTERN -> a
    csv block -> a
    java.lang.String propertiesDescription -> a
    java.util.Set blockstates -> a
    com.google.common.collect.ImmutableSet stateHashes -> b
    com.google.common.collect.ImmutableSet stackHashes -> a
    ect lootTables -> a
    java.util.Map drops -> a
    java.lang.reflect.Method getVanillaServerPack -> a
    void <init>(csv) -> <init>
    void <init>(java.lang.String) -> <init>
    java.util.Map parseProperties(csv,java.lang.String) -> a
    java.util.Set getStates(csv,java.util.Map) -> a
    com.google.common.collect.ImmutableSet getStateHashes(java.util.Set) -> a
    com.google.common.collect.ImmutableSet getStackHashes(java.util.Set) -> b
    boolean matches(dfj) -> a
    java.lang.String toString() -> toString
    amk getVanillaServerPack() -> a
    ect getManager() -> a
    java.util.List drops(csv) -> a
    java.util.List lambda$drops$10(csv) -> b
    void lambda$drops$9(java.util.List,cjf) -> a
    boolean lambda$getVanillaServerPack$8(java.lang.reflect.Method) -> a
    java.lang.Integer[] lambda$getStackHashes$7(int) -> a
    java.lang.Integer lambda$getStackHashes$6(cjf) -> a
    java.util.stream.Stream lambda$getStackHashes$5(dfj) -> a
    cjf lambda$getStackHashes$4(cja) -> a
    java.lang.Integer[] lambda$getStateHashes$3(int) -> b
    boolean lambda$getStates$2(java.util.Map,dfj) -> a
    boolean lambda$getStates$1(dfj,java.util.Map$Entry) -> a
    java.lang.IllegalArgumentException lambda$parseProperties$0(java.lang.String,dgm,csv) -> a
    void <clinit>() -> <clinit>
baritone.api.utils.BlockOptionalMeta$ServerLevelStub -> baritone.api.utils.BlockOptionalMeta$a:
    eqv client -> a
    sun.misc.Unsafe unsafe -> a
    boolean $assertionsDisabled -> a
    cec G() -> G
    baritone.api.utils.BlockOptionalMeta$ServerLevelStub fastCreate() -> a
    sun.misc.Unsafe getUnsafe() -> a
    dhj J() -> J
    eiv K() -> K
    eiv L() -> L
    dhf a(int,int) -> a
    eim I() -> I
    void <clinit>() -> <clinit>
baritone.api.utils.BlockOptionalMetaLookup -> baritone.dl:
    com.google.common.collect.ImmutableSet blockStateSet -> a
    com.google.common.collect.ImmutableSet stackHashes -> b
    baritone.api.utils.BlockOptionalMeta[] boms -> a
    void <init>(baritone.api.utils.BlockOptionalMeta[]) -> <init>
    void <init>(csv[]) -> <init>
    boolean has(dfj) -> a
    boolean has(cjf) -> a
    java.lang.String toString() -> toString
    baritone.api.utils.BlockOptionalMeta[] lambda$new$0(int) -> a
baritone.api.utils.BlockUtils -> baritone.dm:
    java.util.Map resourceCache -> a
    java.lang.String blockToString(csv) -> a
    csv stringToBlockRequired(java.lang.String) -> a
    void <clinit>() -> <clinit>
baritone.api.utils.Helper -> baritone.dn:
    baritone.api.utils.Helper HELPER -> a
    eqv mc -> a
    eqq MESSAGE_TAG -> a
    tl getPrefix() -> a
    void logToast(tl,tl) -> a
    void logNotification(java.lang.String,boolean) -> a_
    void logNotificationDirect(java.lang.String,boolean) -> b
    void logDebug(java.lang.String) -> a
    void logDirect(boolean,tl[]) -> a
    void logDirect(tl[]) -> a
    void logDirect(java.lang.String,n,boolean) -> a
    void logDirect(java.lang.String,n) -> a
    void logDirect(java.lang.String,boolean) -> c
    void logDirect(java.lang.String) -> b
    void logUnhandledException(java.lang.Throwable) -> a
    void lambda$logDirect$3(n,boolean,java.lang.String) -> a
    void lambda$logDirect$2(ty) -> a
    void lambda$logNotificationDirect$1(java.lang.String,boolean) -> d
    void lambda$logToast$0(tl,tl) -> b
    void <clinit>() -> <clinit>
baritone.api.utils.Helper$1 -> baritone.do:
    void <init>() -> <init>
baritone.api.utils.IInputOverrideHandler -> baritone.dp:
    void setInputForceState(baritone.api.utils.input.Input,boolean) -> a
    void clearAllKeys() -> a
baritone.api.utils.IPlayerContext -> baritone.dq:
    eqv minecraft() -> a
    fng player() -> a
    baritone.api.utils.IPlayerController playerController() -> a
    cpv world() -> a
    java.lang.Iterable entities() -> a
    java.util.stream.Stream entitiesStream() -> a
    baritone.api.cache.IWorldData worldData() -> a
    ehl objectMouseOver() -> a
    baritone.api.utils.BetterBlockPos playerFeet() -> a
    ehn playerFeetAsVec() -> a
    ehn playerHead() -> b
    ehn playerMotion() -> c
    baritone.api.utils.BetterBlockPos viewerPos() -> b
    baritone.api.utils.Rotation playerRotations() -> a
    java.util.Optional getSelectedBlock() -> a
    boolean isLookingAt(gw) -> a
baritone.api.utils.IPlayerController -> baritone.dr:
    void syncHeldItem() -> a
    boolean hasBrokenBlock() -> a
    boolean onPlayerDamageBlock(gw,ha) -> a
    void resetBlockRemoving() -> b
    void windowClick(int,int,int,ceu,cbu) -> a
    cps getGameType() -> a
    bgy processRightClickBlock$1201604c(fng,bgx,ehj) -> a
    bgy processRightClick$1b269b60(fng,bgx) -> a
    boolean clickBlock(gw,ha) -> b
    void setHittingBlock(boolean) -> a
    double getBlockReachDistance() -> a
baritone.api.utils.MyChunkPos -> baritone.api.utils.MyChunkPos:
    int x -> x
    int z -> z
    void <init>() -> <init>
    java.lang.String toString() -> toString
baritone.api.utils.NotificationHelper -> baritone.ds:
    java.awt.TrayIcon trayIcon -> a
    cpc chunk -> a
    java.util.List blocks -> a
    void notify(java.lang.String,boolean) -> a
    void <init>(cpc,java.util.List) -> <init>
    java.lang.Class resolveBaseClass(java.lang.reflect.Type) -> a
    int fastFloor(double) -> a
    int fastCeil(double) -> b
baritone.api.utils.Pair -> baritone.dt:
    java.lang.Object a -> a
    java.lang.Object b -> b
    void <init>(java.lang.Object,java.lang.Object) -> <init>
    java.lang.Object second() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
baritone.api.utils.PathCalculationResult -> baritone.du:
    baritone.api.pathing.calc.IPath path -> a
    baritone.api.utils.PathCalculationResult$Type type -> a
    void <init>(baritone.api.utils.PathCalculationResult$Type) -> <init>
    void <init>(baritone.api.utils.PathCalculationResult$Type,baritone.api.pathing.calc.IPath) -> <init>
baritone.api.utils.PathCalculationResult$Type -> baritone.du$a:
    baritone.api.utils.PathCalculationResult$Type SUCCESS_TO_GOAL -> a
    baritone.api.utils.PathCalculationResult$Type SUCCESS_SEGMENT -> b
    baritone.api.utils.PathCalculationResult$Type FAILURE -> c
    baritone.api.utils.PathCalculationResult$Type CANCELLATION -> d
    baritone.api.utils.PathCalculationResult$Type EXCEPTION -> e
    baritone.api.utils.PathCalculationResult$Type[] $VALUES -> a
    baritone.api.utils.PathCalculationResult$Type[] values() -> values
    baritone.api.utils.PathCalculationResult$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.utils.RayTraceUtils -> baritone.dv:
    vd packet -> a
    ehl rayTraceTowards(biq,baritone.api.utils.Rotation,double,boolean) -> a
    ehn inferSneakingEyePosition(biq) -> a
    void <init>(vd) -> <init>
baritone.api.utils.Rotation -> baritone.dw:
    float yaw -> a
    float pitch -> b
    void <init>(float,float) -> <init>
    baritone.api.utils.Rotation add(baritone.api.utils.Rotation) -> a
    baritone.api.utils.Rotation withPitch(float) -> a
    boolean isReallyCloseTo(baritone.api.utils.Rotation) -> a
    boolean yawIsReallyClose(baritone.api.utils.Rotation) -> b
    float normalizeYaw(float) -> a
    java.lang.String toString() -> toString
baritone.api.utils.RotationUtils -> baritone.dx:
    ehn[] BLOCK_SIDE_MULTIPLIERS -> a
    baritone.api.utils.Rotation calcRotationFromVec3d(ehn,ehn,baritone.api.utils.Rotation) -> a
    ehn calcLookDirectionFromRotation(baritone.api.utils.Rotation) -> a
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,gw) -> a
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,gw,boolean) -> a
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,gw,double) -> a
    java.util.Optional reachable(baritone.api.utils.IPlayerContext,gw,double,boolean) -> a
    java.util.Optional reachableOffset(baritone.api.utils.IPlayerContext,gw,ehn,double,boolean) -> a
    java.util.Optional reachableCenter(baritone.api.utils.IPlayerContext,gw,double,boolean) -> b
    void <clinit>() -> <clinit>
baritone.api.utils.SettingsUtil -> baritone.dy:
    java.util.regex.Pattern SETTING_PATTERN -> a
    void readAndApply(baritone.api.Settings,java.lang.String) -> a
    void save(baritone.api.Settings) -> a
    java.nio.file.Path settingsByName(java.lang.String) -> a
    java.util.List modifiedSettings(baritone.api.Settings) -> a
    java.lang.String settingTypeToString(baritone.api.Settings$Setting) -> a
    java.lang.String settingValueToString(baritone.api.Settings$Setting,java.lang.Object) -> a
    java.lang.String settingValueToString(baritone.api.Settings$Setting) -> b
    java.lang.String settingDefaultToString(baritone.api.Settings$Setting) -> c
    java.lang.String maybeCensor(int) -> a
    java.lang.String settingToString(baritone.api.Settings$Setting) -> d
    void parseAndApply(baritone.api.Settings,java.lang.String,java.lang.String) -> a
    void lambda$readAndApply$0(baritone.api.Settings,java.lang.String) -> b
    void <clinit>() -> <clinit>
baritone.api.utils.SettingsUtil$ISettingParser -> baritone.dy$a:
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> a
baritone.api.utils.SettingsUtil$Parser -> baritone.dy$b:
    baritone.api.utils.SettingsUtil$Parser DOUBLE -> a
    baritone.api.utils.SettingsUtil$Parser BOOLEAN -> b
    baritone.api.utils.SettingsUtil$Parser INTEGER -> c
    baritone.api.utils.SettingsUtil$Parser FLOAT -> d
    baritone.api.utils.SettingsUtil$Parser LONG -> e
    baritone.api.utils.SettingsUtil$Parser STRING -> f
    baritone.api.utils.SettingsUtil$Parser DIRECTION -> g
    baritone.api.utils.SettingsUtil$Parser COLOR -> h
    baritone.api.utils.SettingsUtil$Parser VEC3I -> i
    baritone.api.utils.SettingsUtil$Parser BLOCK -> j
    baritone.api.utils.SettingsUtil$Parser ITEM -> k
    baritone.api.utils.SettingsUtil$Parser LIST -> l
    baritone.api.utils.SettingsUtil$Parser MAPPING -> m
    java.lang.Class cla$$ -> a
    java.util.function.Function parser -> a
    java.util.function.Function toString -> b
    baritone.api.utils.SettingsUtil$Parser[] $VALUES -> a
    baritone.api.utils.SettingsUtil$Parser[] values() -> values
    baritone.api.utils.SettingsUtil$Parser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <init>(java.lang.String,int,java.lang.Class,java.util.function.Function) -> <init>
    void <init>(java.lang.String,int,java.lang.Class,java.util.function.Function,java.util.function.Function) -> <init>
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> a
    java.lang.String toString(baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> a
    boolean accepts(java.lang.reflect.Type) -> a
    baritone.api.utils.SettingsUtil$Parser getParser(java.lang.reflect.Type) -> a
    boolean lambda$getParser$8(java.lang.reflect.Type,baritone.api.utils.SettingsUtil$Parser) -> a
    java.lang.String lambda$new$7(java.util.function.Function,java.lang.Object) -> a
    java.lang.String lambda$static$6(cja) -> a
    cja lambda$static$5(java.lang.String) -> a
    csv lambda$static$4(java.lang.String) -> a
    java.lang.String lambda$static$3(hy) -> a
    hy lambda$static$2(java.lang.String) -> a
    java.lang.String lambda$static$1(java.awt.Color) -> a
    java.awt.Color lambda$static$0(java.lang.String) -> a
    void <clinit>() -> <clinit>
baritone.api.utils.SettingsUtil$Parser$1 -> baritone.dz:
    void <init>(java.lang.String) -> <init>
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> a
    java.lang.String toString(baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> a
    boolean accepts(java.lang.reflect.Type) -> a
    java.lang.String lambda$toString$1(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> a
    java.lang.Object lambda$parse$0(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> a
baritone.api.utils.SettingsUtil$Parser$2 -> baritone.ea:
    void <init>(java.lang.String) -> <init>
    java.lang.Object parse(baritone.api.utils.SettingsUtil$ParserContext,java.lang.String) -> a
    java.lang.String toString(baritone.api.utils.SettingsUtil$ParserContext,java.lang.Object) -> a
    boolean accepts(java.lang.reflect.Type) -> a
    java.lang.String lambda$toString$3(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,baritone.api.utils.SettingsUtil$Parser,java.util.Map$Entry) -> a
    java.lang.Object lambda$parse$2(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.String[]) -> a
    java.lang.Object lambda$parse$1(baritone.api.utils.SettingsUtil$Parser,baritone.api.utils.SettingsUtil$ParserContext,java.lang.String[]) -> b
    java.lang.String[] lambda$parse$0(java.lang.String) -> a
baritone.api.utils.SettingsUtil$ParserContext -> baritone.dy$c:
    baritone.api.Settings$Setting setting -> a
    void <init>(baritone.api.Settings$Setting) -> <init>
baritone.api.utils.VecUtils -> baritone.eb:
    baritone.api.event.events.type.EventState state -> a
    ehn calculateBlockCenter(cpv,gw) -> a
    ehn getBlockPosCenter(gw) -> a
    double distanceToCenter(gw,double,double,double) -> a
    double entityFlatDistanceToCenter(biq,gw) -> a
    void <init>(baritone.api.event.events.type.EventState) -> <init>
baritone.api.utils.accessor.IItemStack -> baritone.ec:
    int getBaritoneHash() -> getBaritoneHash
baritone.api.utils.gui.BaritoneToast -> baritone.ed:
    java.lang.String title -> a
    java.lang.String subtitle -> b
    long firstDrawTime -> a
    boolean newDisplay -> a
    long totalShowTime -> b
    void <init>(tl,tl,long) -> <init>
    eux$a a(esf,euy,long) -> a
    void addOrUpdate(tl,tl) -> a
baritone.api.utils.input.Input -> baritone.ee:
    baritone.api.utils.input.Input MOVE_FORWARD -> a
    baritone.api.utils.input.Input MOVE_BACK -> b
    baritone.api.utils.input.Input MOVE_LEFT -> c
    baritone.api.utils.input.Input MOVE_RIGHT -> d
    baritone.api.utils.input.Input CLICK_LEFT -> e
    baritone.api.utils.input.Input CLICK_RIGHT -> f
    baritone.api.utils.input.Input JUMP -> g
    baritone.api.utils.input.Input SNEAK -> h
    baritone.api.utils.input.Input SPRINT -> i
    baritone.api.utils.input.Input[] $VALUES -> a
    baritone.api.utils.input.Input[] values() -> values
    baritone.api.utils.input.Input valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.api.utils.interfaces.IGoalRenderPos -> baritone.ef:
    gw getGoalPos() -> a
baritone.behavior.Behavior -> baritone.eg:
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    void <init>(baritone.Baritone) -> <init>
baritone.behavior.InventoryBehavior -> baritone.eh:
    int ticksSinceLastInventoryMove -> a
    int[] lastTickRequestedMove -> a
    void <init>(baritone.Baritone) -> <init>
    void onTick(baritone.api.event.events.TickEvent) -> a
    boolean attemptToPutOnHotbar(int,java.util.function.Predicate) -> a
    boolean requestSwapWithHotBar(int,int) -> a
    int firstValidThrowaway() -> a
    boolean hasGenericThrowaway() -> a
    boolean selectThrowawayForLocation(boolean,int,int,int) -> a
    boolean throwaway(boolean,java.util.function.Predicate) -> a
    boolean throwaway(boolean,java.util.function.Predicate,boolean) -> a
    boolean lambda$selectThrowawayForLocation$3(cja,cjf) -> a
    boolean lambda$selectThrowawayForLocation$2(dfj,cjf) -> a
    boolean lambda$selectThrowawayForLocation$1(dfj,cjf) -> b
    boolean lambda$hasGenericThrowaway$0(cja,cjf) -> b
baritone.behavior.InventoryBehavior$1 -> baritone.ei:
    void <init>(cpv,cbu,bgx,cjf,ehj) -> <init>
baritone.behavior.LookBehavior -> baritone.ej:
    baritone.behavior.LookBehavior$Target target -> a
    baritone.api.utils.Rotation serverRotation -> a
    baritone.api.utils.Rotation prevRotation -> b
    baritone.behavior.LookBehavior$AimProcessor processor -> a
    java.util.Deque smoothYawBuffer -> a
    java.util.Deque smoothPitchBuffer -> b
    void <init>(baritone.Baritone) -> <init>
    void updateTarget(baritone.api.utils.Rotation,boolean) -> a
    baritone.api.behavior.look.IAimProcessor getAimProcessor() -> a
    void onTick(baritone.api.event.events.TickEvent) -> a
    void onPlayerUpdate$131b5bbf(baritone.api.utils.VecUtils) -> a
    void onSendPacket$1f25927f(baritone.api.utils.RayTraceUtils) -> a
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> a
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> a
    double lambda$onPlayerUpdate$1(java.lang.Float) -> a
    double lambda$onPlayerUpdate$0(java.lang.Float) -> b
baritone.behavior.LookBehavior$1 -> baritone.ek:
    int[] $SwitchMap$baritone$api$event$events$type$EventState -> a
    void <clinit>() -> <clinit>
baritone.behavior.LookBehavior$AbstractAimProcessor -> baritone.ej$a:
    baritone.api.utils.IPlayerContext ctx -> a
    baritone.behavior.look.ForkableRandom rand -> a
    double randomYawOffset -> a
    double randomPitchOffset -> b
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    void <init>(baritone.behavior.LookBehavior$AbstractAimProcessor) -> <init>
    baritone.api.utils.Rotation peekRotation(baritone.api.utils.Rotation) -> a
    void tick() -> b
    void advance$13462e() -> a
    baritone.api.utils.Rotation nextRotation(baritone.api.utils.Rotation) -> b
    baritone.api.behavior.look.IAimProcessor fork$7002412() -> a
    baritone.api.utils.Rotation getPrevRotation() -> a
    float calculateMouseMove(float,float) -> a
    double angleToMouse(float) -> a
    float mouseToAngle(double) -> a
baritone.behavior.LookBehavior$AbstractAimProcessor$1 -> baritone.el:
    baritone.api.utils.Rotation prev -> a
    baritone.behavior.LookBehavior$AbstractAimProcessor this$0 -> a
    void <init>(baritone.behavior.LookBehavior$AbstractAimProcessor,baritone.behavior.LookBehavior$AbstractAimProcessor) -> <init>
    baritone.api.utils.Rotation nextRotation(baritone.api.utils.Rotation) -> b
    baritone.api.utils.Rotation getPrevRotation() -> a
baritone.behavior.LookBehavior$AimProcessor -> baritone.ej$b:
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    baritone.api.utils.Rotation getPrevRotation() -> a
baritone.behavior.LookBehavior$Target -> baritone.ej$c:
    baritone.api.utils.Rotation rotation -> a
    baritone.behavior.LookBehavior$Target$Mode mode -> a
    void <init>(baritone.api.utils.Rotation,baritone.behavior.LookBehavior$Target$Mode) -> <init>
baritone.behavior.LookBehavior$Target$Mode -> baritone.ej$c$a:
    baritone.behavior.LookBehavior$Target$Mode CLIENT -> c
    baritone.behavior.LookBehavior$Target$Mode SERVER -> a
    baritone.behavior.LookBehavior$Target$Mode NONE -> b
    baritone.behavior.LookBehavior$Target$Mode[] $VALUES -> a
    baritone.behavior.LookBehavior$Target$Mode[] values() -> values
    baritone.behavior.LookBehavior$Target$Mode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    baritone.behavior.LookBehavior$Target$Mode resolve(baritone.api.utils.IPlayerContext,boolean) -> a
    void <clinit>() -> <clinit>
baritone.behavior.PathingBehavior -> baritone.em:
    baritone.pathing.path.PathExecutor current -> a
    baritone.pathing.path.PathExecutor next -> b
    baritone.api.pathing.goals.Goal goal -> a
    baritone.pathing.movement.CalculationContext context -> a
    int ticksElapsedSoFar -> a
    baritone.api.utils.BetterBlockPos startPosition -> a
    boolean safeToCancel -> b
    boolean pauseRequestedLastTick -> c
    boolean unpausedLastTick -> d
    boolean pausedThisTick -> e
    boolean cancelRequested -> f
    boolean calcFailedLastTick -> a
    baritone.pathing.calc.AbstractNodeCostSearch inProgress -> a
    java.lang.Object pathCalcLock -> a
    java.lang.Object pathPlanLock -> b
    boolean lastAutoJump -> g
    baritone.api.utils.BetterBlockPos expectedSegmentStart -> b
    java.util.concurrent.LinkedBlockingQueue toDispatch -> a
    void <init>(baritone.Baritone) -> <init>
    void queuePathEvent(baritone.api.event.events.PathEvent) -> b
    void dispatchEvents() -> e
    void onTick(baritone.api.event.events.TickEvent) -> a
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> a
    void onPlayerUpdate$131b5bbf(baritone.api.utils.VecUtils) -> a
    boolean secretInternalSetGoalAndPath(baritone.api.process.PathingCommand) -> a
    boolean isPathing() -> a
    boolean isSafeToCancel() -> d
    boolean cancelSegmentIfSafe() -> e
    boolean cancelEverything() -> c
    void softCancelIfSafe() -> c
    void secretInternalSegmentCancel() -> d
    void forceCancel() -> a
    java.util.Optional estimatedTicksToGoal() -> b
    void resetEstimatedTicksToGoal(baritone.api.utils.BetterBlockPos) -> a
    baritone.api.utils.BetterBlockPos pathStart() -> a
    void findPathInNewThread(gw,boolean,baritone.pathing.movement.CalculationContext) -> a
    baritone.pathing.calc.AbstractNodeCostSearch createPathfinder(gw,baritone.api.pathing.goals.Goal,baritone.api.pathing.calc.IPath,baritone.pathing.movement.CalculationContext) -> a
    void onRenderPass$493a6673(baritone.cache.ChunkPacker) -> a
    baritone.api.pathing.path.IPathExecutor getCurrent() -> a
    void lambda$findPathInNewThread$2(boolean,gw,baritone.api.pathing.goals.Goal,baritone.pathing.calc.AbstractNodeCostSearch,long,long) -> a
    baritone.pathing.path.PathExecutor lambda$findPathInNewThread$1(baritone.api.pathing.calc.IPath) -> a
    double lambda$pathStart$0(double,double,baritone.api.utils.BetterBlockPos) -> a
baritone.behavior.PathingBehavior$1 -> baritone.en:
    int[] $SwitchMap$baritone$api$event$events$type$EventState -> a
    void <clinit>() -> <clinit>
baritone.behavior.WaypointBehavior -> baritone.eo:
    void <init>(baritone.Baritone) -> <init>
    void onPlayerDeath() -> c_
baritone.behavior.look.ForkableRandom -> baritone.ep:
    long[] s -> a
    void <init>() -> <init>
    void <init>(long) -> <init>
    void <init>(long[]) -> <init>
    double nextDouble() -> a
    long next() -> a
    long rotl(long,int) -> a
    long lambda$new$0(java.util.concurrent.atomic.AtomicLong) -> a
baritone.cache.CachedChunk -> baritone.eq:
    com.google.common.collect.ImmutableSet BLOCKS_TO_KEEP_TRACK_OF -> a
    int height -> d
    int size -> e
    int sizeInBytes -> a
    int x -> b
    int z -> c
    java.util.BitSet data -> a
    it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap special -> a
    dfj[] overview -> a
    int[] heightMap -> a
    java.util.Map specialBlockLocations -> a
    long cacheTimestamp -> a
    void <init>(int,int,int,java.util.BitSet,dfj[],java.util.Map,long) -> <init>
    int size(int) -> a
    int sizeInBytes(int) -> b
    void setSpecial() -> a
    void calculateHeightMap() -> b
    java.util.ArrayList getAbsoluteBlocks(java.lang.String) -> a
    int getPositionIndex(int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.cache.CachedRegion -> baritone.er:
    baritone.cache.CachedChunk[][] chunks -> a
    int x -> a
    int z -> b
    dis dimension -> a
    boolean hasUnsavedChanges -> a
    void <init>(int,int,dis) -> <init>
    dfj getBlock(int,int,int) -> a
    boolean isCached(int,int) -> a
    java.util.ArrayList getLocationsOf(java.lang.String) -> a
    void updateCachedChunk(int,int,baritone.cache.CachedChunk) -> a
    void save(java.lang.String) -> a
    void load(java.lang.String) -> b
    void removeExpired() -> a
    baritone.cache.CachedChunk mostRecentlyModified() -> a
    java.nio.file.Path getRegionFile(java.nio.file.Path,int,int) -> a
baritone.cache.CachedWorld -> baritone.es:
    it.unimi.dsi.fastutil.longs.Long2ObjectMap cachedRegions -> a
    java.lang.String directory -> a
    java.util.concurrent.LinkedBlockingQueue toPackQueue -> a
    java.util.Map toPackMap -> a
    dis dimension -> a
    void <init>(java.nio.file.Path,dis) -> <init>
    void queueForPacking(dhq) -> a
    boolean isCached(int,int) -> a
    java.util.ArrayList getLocationsOf(java.lang.String,int,int,int,int) -> a
    void save() -> b
    void prune() -> c
    java.util.List allRegions() -> a
    void reloadAllFromDisk() -> a
    baritone.cache.CachedRegion getRegion(int,int) -> a
    baritone.cache.CachedRegion getOrCreateRegion(int,int) -> b
    long getRegionID(int,int) -> a
    boolean isRegionInWorld(int,int) -> b
    baritone.cache.CachedRegion lambda$getOrCreateRegion$4(int,int,long) -> a
    void lambda$reloadAllFromDisk$3(baritone.cache.CachedRegion) -> a
    void lambda$save$2(baritone.cache.CachedRegion) -> b
    void lambda$save$1(baritone.cache.CachedRegion) -> c
    void lambda$new$0() -> d
baritone.cache.CachedWorld$PackerThread -> baritone.es$a:
    baritone.cache.CachedWorld this$0 -> a
    void <init>(baritone.cache.CachedWorld) -> <init>
    void run() -> run
baritone.cache.ChunkPacker -> baritone.et:
    float partialTicks -> a
    org.joml.Matrix4f projectionMatrix -> a
    elp modelViewStack -> a
    baritone.cache.CachedChunk pack(dhq) -> a
    java.util.List lambda$pack$0(java.lang.String) -> a
    void <init>(float,elp,org.joml.Matrix4f) -> <init>
baritone.cache.ChunkPacker$1 -> baritone.eu:
    int[] $SwitchMap$baritone$utils$pathing$PathingBlockType -> a
    void <clinit>() -> <clinit>
baritone.cache.FasterWorldScanner -> baritone.ev:
    baritone.cache.FasterWorldScanner INSTANCE -> a
    baritone.cache.FasterWorldScanner[] $VALUES -> a
    boolean $assertionsDisabled -> a
    baritone.cache.FasterWorldScanner[] values() -> values
    baritone.cache.FasterWorldScanner valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.List scanChunkRadius$7fc9620e(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,int,int) -> a
    int repack(baritone.api.utils.IPlayerContext) -> a
    java.util.List getChunkRange(int,int,int) -> a
    java.util.List scanChunksInternal(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,int) -> a
    void visitSection(baritone.api.utils.BlockOptionalMetaLookup,dhr,java.util.List,long,int,long) -> a
    java.util.stream.Stream lambda$scanChunksInternal$0(baritone.api.utils.IPlayerContext,baritone.api.utils.BlockOptionalMetaLookup,cpc) -> a
    void <clinit>() -> <clinit>
baritone.cache.WaypointCollection -> baritone.ew:
    java.nio.file.Path directory -> a
    java.util.Map waypoints -> a
    void <init>(java.nio.file.Path) -> <init>
    void load() -> a
    void load(baritone.api.cache.IWaypoint$Tag) -> a
    void save(baritone.api.cache.IWaypoint$Tag) -> b
    void addWaypoint(baritone.api.cache.IWaypoint) -> a
    void removeWaypoint(baritone.api.cache.IWaypoint) -> b
    java.util.Set getByTag(baritone.api.cache.IWaypoint$Tag) -> a
    java.util.Set getAllWaypoints() -> a
baritone.cache.WorldData -> baritone.ex:
    baritone.cache.CachedWorld cache -> a
    baritone.cache.WaypointCollection waypoints -> a
    void <init>(java.nio.file.Path,dis) -> <init>
    void onClose() -> a
    baritone.api.cache.ICachedWorld getCachedWorld() -> a
    baritone.api.cache.IWaypointCollection getWaypoints() -> a
    void lambda$onClose$0() -> b
baritone.cache.WorldProvider -> baritone.ey:
    java.util.Map worldCache -> a
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    baritone.cache.WorldData currentWorld -> a
    cpv mcWorld -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.cache.WorldData getCurrentWorld() -> a
    void initWorld(cpv) -> a
    void closeWorld() -> a
    void detectAndHandleBrokenLoading() -> b
    baritone.api.cache.IWorldData getCurrentWorld() -> a
    void lambda$initWorld$1(cpv,asw) -> a
    baritone.cache.WorldData lambda$initWorld$0(cpv,java.nio.file.Path) -> a
    void <clinit>() -> <clinit>
baritone.command.ExampleBaritoneControl -> baritone.ez:
    baritone.api.Settings settings -> a
    baritone.api.command.manager.ICommandManager manager -> a
    void <init>(baritone.Baritone) -> <init>
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> a
    void logRanCommand(java.lang.String,java.lang.String) -> a
    boolean runCommand(java.lang.String) -> a
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> a
    java.util.stream.Stream tabComplete(java.lang.String) -> a
    java.lang.String[] lambda$onPreTabComplete$1(int) -> a
    java.lang.String lambda$onPreTabComplete$0(java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.ArgParserManager -> baritone.fa:
    baritone.command.argparser.ArgParserManager INSTANCE -> a
    baritone.api.command.registry.Registry registry -> a
    baritone.command.argparser.ArgParserManager[] $VALUES -> a
    baritone.command.argparser.ArgParserManager[] values() -> values
    baritone.command.argparser.ArgParserManager valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Object parseStateless(java.lang.Class,baritone.api.command.argument.ICommandArgument) -> a
    boolean lambda$getParserStateless$0(java.lang.Class,baritone.api.command.argparser.IArgParser$Stateless) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers -> baritone.fb:
    java.util.List ALL -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$BooleanArgumentParser -> baritone.fb$a:
    baritone.command.argparser.DefaultArgParsers$BooleanArgumentParser INSTANCE -> a
    java.util.List TRUTHY_VALUES -> a
    java.util.List FALSY_VALUES -> b
    void <init>() -> <init>
    java.lang.Class getTarget() -> a
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser -> baritone.fb$b:
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$DoubleArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> a
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$FloatArgumentParser -> baritone.fb$c:
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$FloatArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> a
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$IntArgumentParser -> baritone.fb$d:
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$IntArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> a
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> a
    void <clinit>() -> <clinit>
baritone.command.argparser.DefaultArgParsers$LongArgumentParser -> baritone.fb$e:
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser INSTANCE -> a
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser[] $VALUES -> a
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser[] values() -> values
    baritone.command.argparser.DefaultArgParsers$LongArgumentParser valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.lang.Class getTarget() -> a
    java.lang.Object parseArg(baritone.api.command.argument.ICommandArgument) -> a
    void <clinit>() -> <clinit>
baritone.command.argument.ArgConsumer -> baritone.fc:
    baritone.api.command.manager.ICommandManager manager -> a
    baritone.api.command.datatypes.IDatatypeContext context -> a
    java.util.LinkedList args -> a
    java.util.Deque consumed -> a
    void <init>(baritone.api.command.manager.ICommandManager,java.util.Deque,java.util.Deque) -> <init>
    void <init>(baritone.api.command.manager.ICommandManager,java.util.List) -> <init>
    java.util.LinkedList getArgs() -> a
    boolean has(int) -> a
    boolean hasAny() -> a
    boolean hasAtMost(int) -> b
    boolean hasExactly(int) -> c
    boolean hasExactlyOne() -> b
    baritone.api.command.argument.ICommandArgument peek$12d00f26() -> c
    boolean is(java.lang.Class) -> a
    java.lang.String peekString() -> a
    java.lang.Object peekAsOrDefault$d36c42d(java.lang.Class,java.lang.Object) -> b
    java.lang.Object peekAsOrNull(java.lang.Class) -> a
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypeFor) -> a
    java.lang.Object peekDatatypeOrNull(baritone.api.command.datatypes.IDatatypePost) -> a
    java.lang.Object peekDatatypePostOrNull(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> a
    baritone.api.command.argument.ICommandArgument get() -> a
    java.lang.String getString() -> b
    java.lang.Enum getEnum(java.lang.Class) -> a
    java.lang.Object getAs(java.lang.Class) -> b
    java.lang.Object getAsOrDefault(java.lang.Class,java.lang.Object) -> a
    java.lang.Object getDatatypePost(baritone.api.command.datatypes.IDatatypePost,java.lang.Object) -> b
    java.lang.Object getDatatypePostOrDefault(baritone.api.command.datatypes.IDatatypePost,java.lang.Object,java.lang.Object) -> a
    java.lang.Object getDatatypeFor(baritone.api.command.datatypes.IDatatypeFor) -> b
    java.lang.Object getDatatypeForOrDefault(baritone.api.command.datatypes.IDatatypeFor,java.lang.Object) -> a
    java.util.stream.Stream tabCompleteDatatype(baritone.api.command.datatypes.IDatatype) -> a
    java.lang.String rawRest() -> c
    void requireMin(int) -> a
    void requireMax(int) -> b
    void requireExactly(int) -> c
    baritone.api.command.argument.ICommandArgument consumed() -> b
    java.lang.String consumedString() -> d
    baritone.command.argument.ArgConsumer copy() -> a
baritone.command.argument.ArgConsumer$Context -> baritone.fc$a:
    baritone.command.argument.ArgConsumer this$0 -> a
    void <init>(baritone.command.argument.ArgConsumer) -> <init>
    baritone.api.IBaritone getBaritone() -> a
    baritone.api.command.argument.IArgConsumer getConsumer() -> a
baritone.command.argument.CommandArgument -> baritone.fd:
    int index -> a
    java.lang.String value -> a
    java.lang.String rawRest -> b
    void <init>(int,java.lang.String,java.lang.String) -> <init>
    int getIndex() -> a
    java.lang.String getValue() -> a
    java.lang.String getRawRest() -> b
    java.lang.Enum getEnum(java.lang.Class) -> a
    java.lang.Object getAs(java.lang.Class) -> a
    boolean is(java.lang.Class) -> a
    baritone.api.command.exception.CommandInvalidTypeException lambda$getEnum$1(java.lang.Class) -> a
    boolean lambda$getEnum$0(java.lang.Enum) -> a
baritone.command.argument.CommandArguments -> baritone.fe:
    java.util.regex.Pattern ARG_PATTERN -> a
    java.util.List from(java.lang.String,boolean) -> a
    baritone.command.argument.CommandArgument unknown() -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.AxisCommand -> baritone.ff:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.BlacklistCommand -> baritone.fg:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.BuildCommand -> baritone.fh:
    java.io.File schematicsDir -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ClickCommand -> baritone.fi:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ComeCommand -> baritone.fj:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.CommandAlias -> baritone.fk:
    java.lang.String shortDesc -> a
    java.lang.String target -> b
    void <init>(baritone.api.IBaritone,java.util.List,java.lang.String,java.lang.String) -> <init>
    void <init>(baritone.api.IBaritone,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ETACommand -> baritone.fl:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ElytraCommand -> baritone.fm:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    tl suggest2b2tSeeds() -> b
    boolean detectOn2b2t() -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    java.lang.String unsupportedSystemMessage() -> b
baritone.command.defaults.ExecutionControlCommands -> baritone.fn:
    baritone.api.command.Command pauseCommand -> a
    baritone.api.command.Command resumeCommand -> b
    baritone.api.command.Command pausedCommand -> c
    baritone.api.command.Command cancelCommand -> d
    void <init>(baritone.api.IBaritone) -> <init>
baritone.command.defaults.ExecutionControlCommands$1 -> baritone.fo:
    boolean[] val$paused -> a
    baritone.api.IBaritone val$baritone -> a
    void <init>(boolean[],baritone.api.IBaritone) -> <init>
    boolean isActive() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    boolean isTemporary() -> b
    void onLostControl() -> a
    double priority() -> a
    java.lang.String displayName0() -> b
baritone.command.defaults.ExecutionControlCommands$2 -> baritone.fp:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ExecutionControlCommands$3 -> baritone.fq:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ExecutionControlCommands$4 -> baritone.fr:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ExecutionControlCommands$5 -> baritone.fs:
    boolean[] val$paused -> a
    void <init>(baritone.api.IBaritone,java.lang.String[],boolean[]) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ExploreCommand -> baritone.ft:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ExploreFilterCommand -> baritone.fu:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.FarmCommand -> baritone.fv:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.FindCommand -> baritone.fw:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    tl positionToComponent(baritone.api.utils.BetterBlockPos) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    void lambda$execute$2(baritone.command.defaults.FindCommand,tl) -> a
    tl[] lambda$execute$1(int) -> a
    java.util.stream.Stream lambda$execute$0(baritone.api.utils.BetterBlockPos,csv) -> a
baritone.command.defaults.FollowCommand -> baritone.command.defaults.FollowCommand:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    boolean lambda$execute$1(java.util.List,biq) -> a
    boolean lambda$execute$0(biq,biu) -> a
baritone.command.defaults.FollowCommand$FollowGroup -> baritone.command.defaults.FollowCommand$FollowGroup:
    baritone.command.defaults.FollowCommand$FollowGroup ENTITIES -> a
    baritone.command.defaults.FollowCommand$FollowGroup PLAYERS -> b
    java.util.function.Predicate filter -> a
    baritone.command.defaults.FollowCommand$FollowGroup[] $VALUES -> a
    baritone.command.defaults.FollowCommand$FollowGroup[] values() -> values
    baritone.command.defaults.FollowCommand$FollowGroup valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.util.function.Predicate) -> <init>
    void <clinit>() -> <clinit>
baritone.command.defaults.FollowCommand$FollowList -> baritone.command.defaults.FollowCommand$FollowList:
    baritone.command.defaults.FollowCommand$FollowList ENTITY -> a
    baritone.command.defaults.FollowCommand$FollowList PLAYER -> b
    baritone.api.command.datatypes.IDatatypeFor datatype -> a
    baritone.command.defaults.FollowCommand$FollowList[] $VALUES -> a
    baritone.command.defaults.FollowCommand$FollowList[] values() -> values
    baritone.command.defaults.FollowCommand$FollowList valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,baritone.api.command.datatypes.IDatatypeFor) -> <init>
    void <clinit>() -> <clinit>
baritone.command.defaults.FollowCommand$NoEntitiesException -> baritone.command.defaults.FollowCommand$a:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void <init>(int) -> <init>
baritone.command.defaults.ForceCancelCommand -> baritone.fx:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.GcCommand -> baritone.fy:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.GoalCommand -> baritone.fz:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.GotoCommand -> baritone.ga:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.HelpCommand -> baritone.gb:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    tl lambda$execute$2(java.lang.String,baritone.api.command.ICommand) -> a
    void lambda$execute$1() -> a
    boolean lambda$execute$0(baritone.api.command.ICommand) -> a
baritone.command.defaults.InvertCommand -> baritone.gc:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.LitematicaCommand -> baritone.gd:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.MineCommand -> baritone.ge:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.PathCommand -> baritone.gf:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ProcCommand -> baritone.gg:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ReloadAllCommand -> baritone.gh:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.RenderCommand -> baritone.gi:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.RepackCommand -> baritone.gj:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.SaveAllCommand -> baritone.gk:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.SelCommand -> baritone.gl:
    baritone.api.selection.ISelectionManager manager -> a
    baritone.api.utils.BetterBlockPos pos1 -> a
    baritone.api.schematic.ISchematic clipboard -> a
    hy clipboardOffset -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    baritone.api.schematic.ISchematic lambda$execute$0(baritone.command.defaults.SelCommand$Action,baritone.api.utils.BlockOptionalMetaLookup,ha$a,baritone.api.schematic.ISchematic) -> a
baritone.command.defaults.SelCommand$1 -> baritone.gm:
    baritone.command.defaults.SelCommand this$0 -> a
    void <init>(baritone.command.defaults.SelCommand) -> <init>
    void onRenderPass$493a6673(baritone.cache.ChunkPacker) -> a
baritone.command.defaults.SelCommand$2 -> baritone.gn:
    dfj[][][] val$blockstates -> b
    hy val$size -> a
    void <init>(dfj[][][],hy) -> <init>
baritone.command.defaults.SelCommand$3 -> baritone.go:
    int[] $SwitchMap$baritone$command$defaults$SelCommand$Action -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.SelCommand$Action -> baritone.gl$a:
    baritone.command.defaults.SelCommand$Action POS1 -> a
    baritone.command.defaults.SelCommand$Action POS2 -> b
    baritone.command.defaults.SelCommand$Action CLEAR -> c
    baritone.command.defaults.SelCommand$Action UNDO -> d
    baritone.command.defaults.SelCommand$Action SET -> r
    baritone.command.defaults.SelCommand$Action WALLS -> e
    baritone.command.defaults.SelCommand$Action SHELL -> f
    baritone.command.defaults.SelCommand$Action SPHERE -> g
    baritone.command.defaults.SelCommand$Action HSPHERE -> h
    baritone.command.defaults.SelCommand$Action CYLINDER -> i
    baritone.command.defaults.SelCommand$Action HCYLINDER -> j
    baritone.command.defaults.SelCommand$Action CLEARAREA -> k
    baritone.command.defaults.SelCommand$Action REPLACE -> l
    baritone.command.defaults.SelCommand$Action EXPAND -> m
    baritone.command.defaults.SelCommand$Action COPY -> n
    baritone.command.defaults.SelCommand$Action PASTE -> o
    baritone.command.defaults.SelCommand$Action CONTRACT -> p
    baritone.command.defaults.SelCommand$Action SHIFT -> q
    java.lang.String[] names -> a
    baritone.command.defaults.SelCommand$Action[] $VALUES -> a
    baritone.command.defaults.SelCommand$Action[] values() -> values
    baritone.command.defaults.SelCommand$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    baritone.command.defaults.SelCommand$Action getByName(java.lang.String) -> a
    java.lang.String[] getAllNames() -> a
    boolean isFillAction() -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.SelCommand$TransformTarget -> baritone.gl$b:
    baritone.command.defaults.SelCommand$TransformTarget ALL -> a
    baritone.command.defaults.SelCommand$TransformTarget NEWEST -> b
    baritone.command.defaults.SelCommand$TransformTarget OLDEST -> c
    java.util.function.Function transform -> a
    java.lang.String[] names -> a
    baritone.command.defaults.SelCommand$TransformTarget[] $VALUES -> a
    baritone.command.defaults.SelCommand$TransformTarget[] values() -> values
    baritone.command.defaults.SelCommand$TransformTarget valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.util.function.Function,java.lang.String[]) -> <init>
    baritone.command.defaults.SelCommand$TransformTarget getByName(java.lang.String) -> a
    java.lang.String[] getAllNames() -> a
    baritone.api.selection.ISelection[] lambda$static$2(baritone.api.selection.ISelection[]) -> a
    baritone.api.selection.ISelection[] lambda$static$1(baritone.api.selection.ISelection[]) -> b
    baritone.api.selection.ISelection[] lambda$static$0(baritone.api.selection.ISelection[]) -> c
    void <clinit>() -> <clinit>
baritone.command.defaults.SetCommand -> baritone.gp:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    boolean lambda$execute$5(java.lang.String,baritone.api.Settings$Setting) -> a
    tl lambda$execute$4(baritone.api.Settings$Setting) -> a
    void lambda$execute$3(java.lang.String,boolean) -> d
    int lambda$execute$2(baritone.api.Settings$Setting,baritone.api.Settings$Setting) -> a
    boolean lambda$execute$1(java.lang.String,baritone.api.Settings$Setting) -> b
    boolean lambda$execute$0(baritone.api.Settings$Setting) -> a
baritone.command.defaults.SurfaceCommand -> baritone.gq:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.ThisWayCommand -> baritone.gr:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.TunnelCommand -> baritone.gs:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.TunnelCommand$1 -> baritone.gt:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    void <clinit>() -> <clinit>
baritone.command.defaults.VersionCommand -> baritone.gu:
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
baritone.command.defaults.WaypointsCommand -> baritone.gv:
    java.util.Map deletedWaypoints -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void execute(java.lang.String,baritone.api.command.argument.IArgConsumer) -> a
    java.util.stream.Stream tabComplete$4a48d085(baritone.api.command.argument.IArgConsumer) -> a
    java.lang.String getShortDesc() -> a
    java.util.List getLongDesc() -> b
    java.util.List lambda$execute$6(baritone.api.cache.IWorldData) -> a
    void lambda$execute$5() -> a
    java.lang.String lambda$execute$4(baritone.api.cache.IWaypoint) -> a
    java.util.List lambda$execute$3(baritone.api.cache.IWorldData) -> b
    void lambda$execute$2(baritone.api.cache.IWaypoint$Tag) -> a
    tl lambda$execute$1(java.util.function.BiFunction,baritone.command.defaults.WaypointsCommand$Action,baritone.api.cache.IWaypoint) -> a
    tl lambda$execute$0(java.lang.String,baritone.api.cache.IWaypoint,baritone.command.defaults.WaypointsCommand$Action) -> a
baritone.command.defaults.WaypointsCommand$Action -> baritone.gv$a:
    baritone.command.defaults.WaypointsCommand$Action LIST -> a
    baritone.command.defaults.WaypointsCommand$Action CLEAR -> b
    baritone.command.defaults.WaypointsCommand$Action SAVE -> c
    baritone.command.defaults.WaypointsCommand$Action INFO -> d
    baritone.command.defaults.WaypointsCommand$Action DELETE -> e
    baritone.command.defaults.WaypointsCommand$Action RESTORE -> f
    baritone.command.defaults.WaypointsCommand$Action GOAL -> g
    baritone.command.defaults.WaypointsCommand$Action GOTO -> h
    java.lang.String[] names -> a
    baritone.command.defaults.WaypointsCommand$Action[] $VALUES -> a
    baritone.command.defaults.WaypointsCommand$Action[] values() -> values
    baritone.command.defaults.WaypointsCommand$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    baritone.command.defaults.WaypointsCommand$Action getByName(java.lang.String) -> a
    java.lang.String[] getAllNames() -> a
    void <clinit>() -> <clinit>
baritone.command.manager.CommandManager -> baritone.gw:
    baritone.api.command.registry.Registry registry -> a
    baritone.Baritone baritone -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.api.IBaritone getBaritone() -> a
    baritone.api.command.registry.Registry getRegistry() -> a
    baritone.api.command.ICommand getCommand(java.lang.String) -> a
    boolean execute(java.lang.String) -> a
    boolean execute(asw) -> a
    java.util.stream.Stream tabComplete(java.lang.String) -> a
    baritone.command.manager.CommandManager$ExecutionWrapper from(asw) -> a
    asw expand(java.lang.String,boolean) -> a
baritone.command.manager.CommandManager$ExecutionWrapper -> baritone.gw$a:
    baritone.api.command.ICommand command -> a
    java.lang.String label -> a
    baritone.command.argument.ArgConsumer args -> a
    void <init>(baritone.api.command.ICommand,java.lang.String,baritone.command.argument.ArgConsumer) -> <init>
    void execute() -> a
    java.util.stream.Stream tabComplete() -> a
baritone.event.GameEventHandler -> baritone.gx:
    baritone.Baritone baritone -> a
    java.util.List listeners -> a
    void <init>(baritone.Baritone) -> <init>
    void onTick(baritone.api.event.events.TickEvent) -> a
    void onPostTick(baritone.api.event.events.TickEvent) -> b
    void onPlayerUpdate$131b5bbf(baritone.api.utils.VecUtils) -> a
    void onSendChatMessage(baritone.api.event.events.ChatEvent) -> a
    void onPreTabComplete(baritone.api.event.events.TabCompleteEvent) -> a
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> a
    void onBlockChange$4a8de162(baritone.api.utils.NotificationHelper) -> a
    void onRenderPass$493a6673(baritone.cache.ChunkPacker) -> a
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> a
    void onSendPacket$1f25927f(baritone.api.utils.RayTraceUtils) -> a
    void onReceivePacket$1f25927f(baritone.api.utils.RayTraceUtils) -> b
    void onPlayerRotationMove(baritone.api.event.events.RotationMoveEvent) -> a
    void onPlayerSprintState(baritone.api.event.events.SprintStateEvent) -> a
    void onPlayerDeath() -> c_
    void onPathEvent(baritone.api.event.events.PathEvent) -> a
    void registerEventListener(baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPathEvent$16(baritone.api.event.events.PathEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPlayerSprintState$14(baritone.api.event.events.SprintStateEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPlayerRotationMove$13(baritone.api.event.events.RotationMoveEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onReceivePacket$12$69ed122f(baritone.api.utils.RayTraceUtils,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onSendPacket$11$69ed122f(baritone.api.utils.RayTraceUtils,baritone.api.event.listener.IGameEventListener) -> b
    void lambda$onWorldEvent$10(baritone.api.event.events.WorldEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onRenderPass$9$2a6f60df(baritone.cache.ChunkPacker,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onBlockChange$8$2a95354c(baritone.api.utils.NotificationHelper,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onBlockChange$7$5f760443(baritone.api.utils.NotificationHelper,baritone.api.cache.IWorldData) -> a
    void lambda$onChunkEvent$6(baritone.api.event.events.ChunkEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onChunkEvent$5(cpv,baritone.api.event.events.ChunkEvent,baritone.api.cache.IWorldData) -> a
    void lambda$onPreTabComplete$4(baritone.api.event.events.TabCompleteEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onSendChatMessage$3(baritone.api.event.events.ChatEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPlayerUpdate$2$1352b393(baritone.api.utils.VecUtils,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onPostTick$1(baritone.api.event.events.TickEvent,baritone.api.event.listener.IGameEventListener) -> a
    void lambda$onTick$0(baritone.api.event.events.TickEvent,baritone.api.event.listener.IGameEventListener) -> b
baritone.launch.BaritoneMixinConnector -> baritone.launch.BaritoneMixinConnector:
    void <init>() -> <init>
    void connect() -> connect
baritone.launch.BaritoneTweaker -> baritone.launch.BaritoneTweaker:
    void <init>() -> <init>
    void injectIntoClassLoader(net.minecraft.launchwrapper.LaunchClassLoader) -> injectIntoClassLoader
    boolean lambda$injectIntoClassLoader$0(java.lang.String) -> lambda$injectIntoClassLoader$0
baritone.launch.mixins.MixinChunkArray -> baritone.launch.mixins.MixinChunkArray:
    java.util.concurrent.atomic.AtomicReferenceArray b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    void <init>() -> <init>
    boolean b(int,int) -> b
    int a(int,int) -> a
    void a(int,dhq) -> a
    int centerX() -> centerX
    int centerZ() -> centerZ
    int viewDistance() -> viewDistance
    java.util.concurrent.atomic.AtomicReferenceArray getChunks() -> getChunks
    void copyFrom(baritone.utils.accessor.IChunkArray) -> copyFrom
baritone.launch.mixins.MixinClientChunkProvider -> baritone.launch.mixins.MixinClientChunkProvider:
    fix e -> e
    void <init>() -> <init>
    fit createThreadSafeCopy() -> createThreadSafeCopy
    baritone.utils.accessor.IChunkArray extractReferenceArray() -> extractReferenceArray
baritone.launch.mixins.MixinClientPlayNetHandler -> baritone.launch.mixins.MixinClientPlayNetHandler:
    void <init>(eqv,sm,fjb) -> <init>
    void sendChatMessage(java.lang.String,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> sendChatMessage
    void postHandleChunkData(yg,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postHandleChunkData
    void preChunkUnload(ya,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preChunkUnload
    void postChunkUnload(ya,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postChunkUnload
    void postHandleBlockChange(xf,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postHandleBlockChange
    void postHandleMultiBlockChange(zi,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postHandleMultiBlockChange
    void onPlayerDeath(yy,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPlayerDeath
    void lambda$postHandleMultiBlockChange$0(java.util.List,gw,dfj) -> lambda$postHandleMultiBlockChange$0
baritone.launch.mixins.MixinClientPlayerEntity -> baritone.launch.mixins.MixinClientPlayerEntity:
    void <init>() -> <init>
    void onPreUpdate(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPreUpdate
    boolean isAllowFlying(cbr) -> isAllowFlying
    boolean isKeyDown(eqt) -> isKeyDown
    void updateRidden(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> updateRidden
    boolean tryToStartFallFlying(fng) -> tryToStartFallFlying
baritone.launch.mixins.MixinCommandSuggestionHelper -> baritone.launch.mixins.MixinCommandSuggestionHelper:
    esz g -> g
    java.util.List o -> o
    com.mojang.brigadier.ParseResults r -> r
    java.util.concurrent.CompletableFuture s -> s
    est$a t -> t
    boolean v -> v
    void <init>() -> <init>
    void preUpdateSuggestion(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preUpdateSuggestion
    com.mojang.brigadier.suggestion.Suggestion lambda$preUpdateSuggestion$0(com.mojang.brigadier.context.StringRange,java.lang.String) -> lambda$preUpdateSuggestion$0
baritone.launch.mixins.MixinEntity -> baritone.launch.mixins.MixinEntity:
    float aG -> aG
    float aH -> aH
    baritone.api.event.events.RotationMoveEvent motionUpdateRotationEvent -> motionUpdateRotationEvent
    void <init>() -> <init>
    void moveRelativeHead(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> moveRelativeHead
    void moveRelativeReturn(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> moveRelativeReturn
baritone.launch.mixins.MixinEntityRenderManager -> baritone.launch.mixins.MixinEntityRenderManager:
    void <init>() -> <init>
    double renderPosX() -> renderPosX
    double renderPosY() -> renderPosY
    double renderPosZ() -> renderPosZ
baritone.launch.mixins.MixinFireworkRocketEntity -> baritone.launch.mixins.MixinFireworkRocketEntity:
    aee c -> c
    bjg g -> g
    boolean y() -> y
    void <init>(cpv) -> <init>
    bjg getBoostedEntity() -> getBoostedEntity
baritone.launch.mixins.MixinItemStack -> baritone.launch.mixins.MixinItemStack:
    cja u -> u
    int baritoneHash -> baritoneHash
    void <init>() -> <init>
    int k() -> k
    void recalculateHash() -> recalculateHash
    void onInit(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onInit
    void onItemDamageSet(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onItemDamageSet
    int getBaritoneHash() -> getBaritoneHash
baritone.launch.mixins.MixinLivingEntity -> baritone.launch.mixins.MixinLivingEntity:
    baritone.api.event.events.RotationMoveEvent jumpRotationEvent -> jumpRotationEvent
    baritone.api.event.events.RotationMoveEvent elytraRotationEvent -> elytraRotationEvent
    void <init>(biu,cpv) -> <init>
    void preMoveRelative(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preMoveRelative
    float overrideYaw(bjg) -> overrideYaw
    void onPreElytraMove(ehn,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPreElytraMove
    void onPostElytraMove(ehn,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onPostElytraMove
    java.util.Optional getBaritone() -> getBaritone
    void lambda$onPreElytraMove$1(baritone.api.IBaritone) -> lambda$onPreElytraMove$1
    void lambda$preMoveRelative$0(baritone.api.IBaritone) -> lambda$preMoveRelative$0
baritone.launch.mixins.MixinLootContext -> baritone.launch.mixins.MixinLootContext:
    void <init>() -> <init>
    net.minecraft.server.MinecraftServer getServer(akq) -> getServer
    ect getLootTableManager(net.minecraft.server.MinecraftServer) -> getLootTableManager
baritone.launch.mixins.MixinMinecraft -> baritone.launch.mixins.MixinMinecraft:
    fng s -> s
    fix r -> r
    java.util.function.BiFunction tickProvider -> tickProvider
    void <init>() -> <init>
    void postInit(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postInit
    void runTick(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> runTick
    void postRunTick(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postRunTick
    void postUpdateEntities(org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postUpdateEntities
    void preLoadWorld(fix,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preLoadWorld
    void postLoadWorld(fix,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postLoadWorld
    eyk passEvents(eqv) -> passEvents
baritone.launch.mixins.MixinNetworkManager -> baritone.launch.mixins.MixinNetworkManager:
    io.netty.channel.Channel n -> n
    ve l -> l
    void <init>() -> <init>
    void preDispatchPacket(vd,sv,boolean,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preDispatchPacket
    void postDispatchPacket(vd,sv,boolean,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postDispatchPacket
    void preProcessPacket(io.netty.channel.ChannelHandlerContext,vd,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> preProcessPacket
    void postProcessPacket(io.netty.channel.ChannelHandlerContext,vd,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> postProcessPacket
baritone.launch.mixins.MixinPalettedContainer -> baritone.launch.mixins.MixinPalettedContainer:
    java.lang.invoke.MethodHandle DATA_GETTER -> DATA_GETTER
    void <init>() -> <init>
    dhw getPalette() -> getPalette
    aqp getStorage() -> getStorage
    baritone.utils.accessor.IPalettedContainer$IData data() -> data
    java.lang.Throwable sneaky(java.lang.Throwable,java.lang.Class) -> sneaky
    void <clinit>() -> <clinit>
baritone.launch.mixins.MixinPalettedContainer$Data -> baritone.launch.mixins.MixinPalettedContainer$Data:
    void <init>() -> <init>
    dhw getPalette() -> getPalette
    aqp getStorage() -> getStorage
baritone.launch.mixins.MixinPlayerController -> baritone.launch.mixins.MixinPlayerController:
    void <init>() -> <init>
    void setIsHittingBlock(boolean) -> setIsHittingBlock
    gw getCurrentBlock() -> getCurrentBlock
    void callSyncCurrentPlayItem() -> callSyncCurrentPlayItem
baritone.launch.mixins.MixinScreen -> baritone.launch.mixins.MixinScreen:
    void <init>() -> <init>
    void openLinkInvoker(java.net.URI) -> openLinkInvoker
    void handleCustomClickEvent(uh,org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable) -> handleCustomClickEvent
baritone.launch.mixins.MixinWorldRenderer -> baritone.launch.mixins.MixinWorldRenderer:
    void <init>() -> <init>
    void onStartHand(elp,float,long,boolean,eqg,fnx,fod,org.joml.Matrix4f,org.spongepowered.asm.mixin.injection.callback.CallbackInfo) -> onStartHand
baritone.pathing.calc.AStarPathFinder -> baritone.gy:
    baritone.utils.pathing.Favoring favoring -> a
    baritone.pathing.movement.CalculationContext calcContext -> a
    void <init>(int,int,int,baritone.api.pathing.goals.Goal,baritone.utils.pathing.Favoring,baritone.pathing.movement.CalculationContext) -> <init>
    java.util.Optional calculate0(long,long) -> a
baritone.pathing.calc.AbstractNodeCostSearch -> baritone.gz:
    int startX -> a
    int startY -> b
    int startZ -> c
    baritone.api.pathing.goals.Goal goal -> a
    baritone.pathing.movement.CalculationContext context -> a
    it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap map -> a
    baritone.pathing.calc.PathNode startNode -> a
    baritone.pathing.calc.PathNode mostRecentConsidered -> b
    baritone.pathing.calc.PathNode[] bestSoFar -> a
    boolean isFinished -> b
    boolean cancelRequested -> a
    double[] COEFFICIENTS -> a
    void <init>(int,int,int,baritone.api.pathing.goals.Goal,baritone.pathing.movement.CalculationContext) -> <init>
    void cancel() -> a
    baritone.api.utils.PathCalculationResult calculate(long,long) -> a
    java.util.Optional calculate0(long,long) -> a
    double getDistFromStartSq(baritone.pathing.calc.PathNode) -> a
    baritone.pathing.calc.PathNode getNodeAtPosition(int,int,int,long) -> a
    java.util.Optional pathToMostRecentNodeConsidered() -> a
    java.util.Optional bestPathSoFar() -> b
    java.util.Optional bestSoFar(boolean,int) -> a
    baritone.api.pathing.goals.Goal getGoal() -> a
    baritone.api.utils.BetterBlockPos getStart() -> a
    int mapSize() -> a
    baritone.api.pathing.calc.IPath lambda$pathToMostRecentNodeConsidered$0(baritone.pathing.calc.PathNode) -> a
    void <clinit>() -> <clinit>
baritone.pathing.calc.Path -> baritone.ha:
    baritone.api.utils.BetterBlockPos start -> a
    baritone.api.utils.BetterBlockPos end -> b
    java.util.List path -> a
    java.util.List movements -> b
    java.util.List nodes -> c
    baritone.api.pathing.goals.Goal goal -> a
    int numNodes -> a
    baritone.pathing.movement.CalculationContext context -> a
    boolean verified -> a
    void <init>(baritone.pathing.calc.PathNode,baritone.pathing.calc.PathNode,int,baritone.api.pathing.goals.Goal,baritone.pathing.movement.CalculationContext) -> <init>
    baritone.api.pathing.goals.Goal getGoal() -> a
    boolean assembleMovements() -> a
    baritone.pathing.movement.Movement runBackwards(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,double) -> a
    baritone.api.pathing.calc.IPath postProcess() -> a
    java.util.List movements() -> a
    java.util.List positions() -> b
    int getNumNodesConsidered() -> b
    baritone.api.utils.BetterBlockPos getSrc() -> a
    baritone.api.utils.BetterBlockPos getDest() -> b
    void lambda$postProcess$0(baritone.pathing.movement.Movement) -> a
baritone.pathing.calc.PathNode -> baritone.hb:
    int x -> a
    int y -> b
    int z -> c
    double estimatedCostToGoal -> a
    double cost -> b
    double combinedCost -> c
    baritone.pathing.calc.PathNode previous -> a
    int heapPosition -> d
    void <init>(int,int,int,baritone.api.pathing.goals.Goal) -> <init>
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
baritone.pathing.calc.openset.BinaryHeapOpenSet -> baritone.hc:
    baritone.pathing.calc.PathNode[] array -> a
    int size -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void insert(baritone.pathing.calc.PathNode) -> a
    void update(baritone.pathing.calc.PathNode) -> b
baritone.pathing.movement.CalculationContext -> baritone.hd:
    cjf STACK_BUCKET_WATER -> a
    boolean safeForThreadedUse -> a
    baritone.api.IBaritone baritone -> a
    cpv world -> a
    baritone.cache.WorldData worldData -> a
    baritone.utils.BlockStateInterface bsi -> a
    baritone.utils.ToolSet toolSet -> a
    boolean hasWaterBucket -> b
    boolean hasThrowaway -> c
    boolean canSprint -> d
    double placeBlockCost -> a
    boolean allowBreak -> e
    java.util.List allowBreakAnyway -> a
    boolean allowParkour -> f
    boolean allowParkourPlace -> g
    boolean allowJumpAt256 -> h
    boolean allowParkourAscend -> i
    boolean assumeWalkOnWater -> j
    boolean allowFallIntoLava -> k
    int frostWalker -> a
    boolean allowDiagonalDescend -> l
    boolean allowDiagonalAscend -> m
    boolean allowDownward -> n
    int minFallHeight -> b
    int maxFallHeightNoWater -> c
    int maxFallHeightBucket -> d
    double waterWalkSpeed -> b
    double breakBlockAdditionalCost -> c
    double backtrackCostFavoringCoefficient -> d
    double jumpPenalty -> e
    double walkOnWaterOnePenalty -> f
    baritone.utils.pathing.BetterWorldBorder worldBorder -> a
    baritone.pathing.precompute.PrecomputedData precomputedData -> a
    void <init>(baritone.api.IBaritone) -> <init>
    void <init>(baritone.api.IBaritone,boolean) -> <init>
    dfj get(int,int,int) -> a
    dfj get(gw) -> a
    csv getBlock(int,int,int) -> a
    double costOfPlacingAt(int,int,int,dfj) -> a
    double breakCostMultiplierAt(int,int,int,dfj) -> b
    double placeBucketCost() -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.Movement -> baritone.he:
    ha[] HORIZONTALS_BUT_ALSO_DOWN_____SO_EVERY_DIRECTION_EXCEPT_UP -> a
    baritone.api.IBaritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    baritone.pathing.movement.MovementState currentState -> a
    baritone.api.utils.BetterBlockPos src -> a
    baritone.api.utils.BetterBlockPos dest -> b
    baritone.api.utils.BetterBlockPos[] positionsToBreak -> a
    baritone.api.utils.BetterBlockPos positionToPlace -> c
    java.lang.Double cost -> a
    java.util.List toBreakCached -> a
    java.util.List toPlaceCached -> b
    java.util.List toWalkIntoCached -> c
    java.util.Set validPositionsCached -> a
    java.lang.Boolean calculatedWhileLoaded -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos[],baritone.api.utils.BetterBlockPos) -> <init>
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos[]) -> <init>
    double getCost() -> a
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    java.util.Set getValidPositions() -> b
    boolean playerInValidPosition() -> b
    baritone.api.pathing.movement.MovementStatus update() -> a
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel() -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    baritone.api.utils.BetterBlockPos getSrc() -> a
    baritone.api.utils.BetterBlockPos getDest() -> b
    void reset() -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    gw getDirection() -> a
    void checkLoadedChunk(baritone.pathing.movement.CalculationContext) -> a
    java.util.List toBreak(baritone.utils.BlockStateInterface) -> a
    java.util.List toPlace(baritone.utils.BlockStateInterface) -> b
    java.util.List toWalkInto(baritone.utils.BlockStateInterface) -> c
    gw[] toBreakAll() -> a
    void lambda$update$2(baritone.api.utils.input.Input,java.lang.Boolean) -> a
    void lambda$update$1(baritone.api.utils.Rotation) -> a
    void lambda$update$0(gw) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.MovementHelper -> baritone.hf:
    boolean avoidBreaking(baritone.utils.BlockStateInterface,int,int,int,dfj) -> a
    boolean avoidAdjacentBreaking(baritone.utils.BlockStateInterface,int,int,int,boolean) -> a
    boolean canWalkThrough(baritone.api.utils.IPlayerContext,baritone.api.utils.BetterBlockPos) -> a
    boolean canWalkThrough(baritone.utils.BlockStateInterface,int,int,int) -> a
    boolean canWalkThrough(baritone.pathing.movement.CalculationContext,int,int,int,dfj) -> a
    boolean canWalkThrough(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    boolean canWalkThrough(baritone.utils.BlockStateInterface,int,int,int,dfj) -> b
    baritone.pathing.precompute.Ternary canWalkThroughBlockState(dfj) -> a
    boolean canWalkThroughPosition(baritone.utils.BlockStateInterface,int,int,int,dfj) -> c
    baritone.pathing.precompute.Ternary fullyPassableBlockState(dfj) -> b
    boolean fullyPassable(baritone.pathing.movement.CalculationContext,int,int,int) -> b
    boolean fullyPassable(baritone.pathing.movement.CalculationContext,int,int,int,dfj) -> b
    boolean fullyPassable(baritone.api.utils.IPlayerContext,gw) -> a
    boolean fullyPassablePosition(baritone.utils.BlockStateInterface,int,int,int,dfj) -> d
    boolean isReplaceable$4516ae8e(int,int,dfj,baritone.utils.BlockStateInterface) -> a
    boolean isDoorPassable(baritone.api.utils.IPlayerContext,gw,gw) -> a
    boolean isGatePassable(baritone.api.utils.IPlayerContext,gw,gw) -> b
    boolean avoidWalkingInto(dfj) -> a
    boolean canWalkOn(baritone.utils.BlockStateInterface,int,int,int,dfj) -> e
    baritone.pathing.precompute.Ternary canWalkOnBlockState(dfj) -> c
    boolean canWalkOnPosition(baritone.utils.BlockStateInterface,int,int,int,dfj) -> f
    boolean canWalkOn(baritone.pathing.movement.CalculationContext,int,int,int,dfj) -> c
    boolean canWalkOn(baritone.pathing.movement.CalculationContext,int,int,int) -> c
    boolean canWalkOn(baritone.api.utils.IPlayerContext,gw) -> b
    boolean canWalkOn(baritone.api.utils.IPlayerContext,baritone.api.utils.BetterBlockPos) -> b
    boolean canWalkOn(baritone.utils.BlockStateInterface,int,int,int) -> b
    boolean canUseFrostWalker(baritone.pathing.movement.CalculationContext,dfj) -> a
    boolean canUseFrostWalker(baritone.api.utils.IPlayerContext,gw) -> c
    boolean mustBeSolidToWalkOn(baritone.pathing.movement.CalculationContext,int,int,int,dfj) -> d
    boolean canPlaceAgainst(baritone.utils.BlockStateInterface,int,int,int) -> c
    boolean canPlaceAgainst(baritone.api.utils.IPlayerContext,gw) -> d
    boolean canPlaceAgainst$1b41728e(baritone.utils.BlockStateInterface,int,int,dfj) -> a
    double getMiningDurationTicks(baritone.pathing.movement.CalculationContext,int,int,int,boolean) -> a
    double getMiningDurationTicks(baritone.pathing.movement.CalculationContext,int,int,int,dfj,boolean) -> a
    boolean isBottomSlab(dfj) -> b
    void switchToBestToolFor(baritone.api.utils.IPlayerContext,dfj) -> a
    void switchToBestToolFor(baritone.api.utils.IPlayerContext,dfj,baritone.utils.ToolSet,boolean) -> a
    void moveTowards(baritone.api.utils.IPlayerContext,baritone.pathing.movement.MovementState,gw) -> a
    boolean isWater(dfj) -> c
    boolean isWater(baritone.api.utils.IPlayerContext,gw) -> e
    boolean isLava(dfj) -> d
    boolean isLiquid(baritone.api.utils.IPlayerContext,gw) -> f
    boolean isLiquid(dfj) -> e
    boolean possiblyFlowing(dfj) -> f
    boolean isFlowing(int,int,int,dfj,baritone.utils.BlockStateInterface) -> a
    boolean isBlockNormalCube(dfj) -> g
    baritone.pathing.movement.MovementHelper$PlaceResult attemptToPlaceABlock(baritone.pathing.movement.MovementState,baritone.api.IBaritone,gw,boolean,boolean) -> a
    boolean isTransparent(csv) -> a
baritone.pathing.movement.MovementHelper$PlaceResult -> baritone.hf$a:
    baritone.pathing.movement.MovementHelper$PlaceResult READY_TO_PLACE -> a
    baritone.pathing.movement.MovementHelper$PlaceResult ATTEMPTING -> b
    baritone.pathing.movement.MovementHelper$PlaceResult NO_OPTION -> c
    baritone.pathing.movement.MovementHelper$PlaceResult[] $VALUES -> a
    baritone.pathing.movement.MovementHelper$PlaceResult[] values() -> values
    baritone.pathing.movement.MovementHelper$PlaceResult valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.pathing.movement.MovementState -> baritone.hg:
    baritone.api.pathing.movement.MovementStatus status -> a
    baritone.pathing.movement.MovementState$MovementTarget target -> a
    java.util.Map inputState -> a
    void <init>() -> <init>
    baritone.pathing.movement.MovementState setTarget(baritone.pathing.movement.MovementState$MovementTarget) -> a
    baritone.pathing.movement.MovementState setInput(baritone.api.utils.input.Input,boolean) -> a
baritone.pathing.movement.MovementState$MovementTarget -> baritone.hg$a:
    baritone.api.utils.Rotation rotation -> a
    boolean forceRotations -> a
    void <init>() -> <init>
    void <init>(baritone.api.utils.Rotation,boolean) -> <init>
baritone.pathing.movement.Moves -> baritone.hh:
    baritone.pathing.movement.Moves DOWNWARD -> a
    baritone.pathing.movement.Moves PILLAR -> b
    baritone.pathing.movement.Moves TRAVERSE_NORTH -> c
    baritone.pathing.movement.Moves TRAVERSE_SOUTH -> d
    baritone.pathing.movement.Moves TRAVERSE_EAST -> e
    baritone.pathing.movement.Moves TRAVERSE_WEST -> f
    baritone.pathing.movement.Moves ASCEND_NORTH -> g
    baritone.pathing.movement.Moves ASCEND_SOUTH -> h
    baritone.pathing.movement.Moves ASCEND_EAST -> i
    baritone.pathing.movement.Moves ASCEND_WEST -> j
    baritone.pathing.movement.Moves DESCEND_EAST -> k
    baritone.pathing.movement.Moves DESCEND_WEST -> l
    baritone.pathing.movement.Moves DESCEND_NORTH -> m
    baritone.pathing.movement.Moves DESCEND_SOUTH -> n
    baritone.pathing.movement.Moves DIAGONAL_NORTHEAST -> o
    baritone.pathing.movement.Moves DIAGONAL_NORTHWEST -> p
    baritone.pathing.movement.Moves DIAGONAL_SOUTHEAST -> q
    baritone.pathing.movement.Moves DIAGONAL_SOUTHWEST -> r
    baritone.pathing.movement.Moves PARKOUR_NORTH -> s
    baritone.pathing.movement.Moves PARKOUR_SOUTH -> t
    baritone.pathing.movement.Moves PARKOUR_EAST -> u
    baritone.pathing.movement.Moves PARKOUR_WEST -> v
    boolean dynamicXZ -> a
    boolean dynamicY -> b
    int xOffset -> a
    int yOffset -> b
    int zOffset -> c
    baritone.pathing.movement.Moves[] $VALUES -> a
    baritone.pathing.movement.Moves[] values() -> values
    baritone.pathing.movement.Moves valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int,int,int,boolean,boolean) -> <init>
    void <init>(java.lang.String,int,int,int,int) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.Moves$1 -> baritone.hi:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$10 -> baritone.hj:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$11 -> baritone.hk:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$12 -> baritone.hl:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$13 -> baritone.hm:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$14 -> baritone.hn:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$15 -> baritone.ho:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$16 -> baritone.hp:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$17 -> baritone.hq:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$18 -> baritone.hr:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$19 -> baritone.hs:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$2 -> baritone.ht:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$20 -> baritone.hu:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$21 -> baritone.hv:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$22 -> baritone.hw:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void apply(baritone.pathing.movement.CalculationContext,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
baritone.pathing.movement.Moves$3 -> baritone.hx:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$4 -> baritone.hy:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$5 -> baritone.hz:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$6 -> baritone.ia:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$7 -> baritone.ib:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$8 -> baritone.ic:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.Moves$9 -> baritone.id:
    void <init>(java.lang.String) -> <init>
    baritone.pathing.movement.Movement apply0(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
baritone.pathing.movement.movements.MovementAscend -> baritone.ie:
    int ticksWithoutPlacement -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> a
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
baritone.pathing.movement.movements.MovementDescend -> baritone.if:
    int numTicks -> a
    boolean forceSafeMode -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> a
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    void cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
    boolean dynamicFallCost$336e4d5d(baritone.pathing.movement.CalculationContext,int,int,int,double,dfj,baritone.utils.pathing.MutableMoveResult) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeMode() -> c
    boolean skipToAscend() -> d
baritone.pathing.movement.movements.MovementDiagonal -> baritone.ig:
    double SQRT_2 -> d
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,ha,ha,int) -> <init>
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,ha,int) -> <init>
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    void cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int,baritone.utils.pathing.MutableMoveResult) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    java.util.List toBreak(baritone.utils.BlockStateInterface) -> a
    java.util.List toWalkInto(baritone.utils.BlockStateInterface) -> c
    void <clinit>() -> <clinit>
baritone.pathing.movement.movements.MovementDownward -> baritone.ih:
    int numTicks -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> a
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
baritone.pathing.movement.movements.MovementFall -> baritone.ii:
    cjf STACK_BUCKET_WATER -> a
    cjf STACK_BUCKET_EMPTY -> b
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    baritone.api.utils.BetterBlockPos[] buildPositionsToBreak(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> a
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.movements.MovementParkour -> baritone.ij:
    baritone.api.utils.BetterBlockPos[] EMPTY -> b
    ha direction -> a
    int dist -> a
    boolean ascend -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,int,ha,boolean) -> <init>
    baritone.pathing.movement.movements.MovementParkour cost(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos,ha) -> a
    void cost(baritone.pathing.movement.CalculationContext,int,int,int,ha,baritone.utils.pathing.MutableMoveResult) -> a
    boolean checkOvershootSafety(baritone.utils.BlockStateInterface,int,int,int) -> d
    double costFromJumpDistance(int) -> a
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    void <clinit>() -> <clinit>
baritone.pathing.movement.movements.MovementPillar -> baritone.ik:
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int) -> a
    boolean hasAgainst(baritone.pathing.movement.CalculationContext,int,int,int) -> d
    gw getAgainst(baritone.pathing.movement.CalculationContext,baritone.api.utils.BetterBlockPos) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean prepared(baritone.pathing.movement.MovementState) -> a
    baritone.pathing.movement.MovementState$MovementTarget lambda$updateState$0(baritone.api.utils.Rotation) -> a
baritone.pathing.movement.movements.MovementTraverse -> baritone.il:
    boolean wasTheBridgeBlockAlwaysThere -> a
    void <init>(baritone.api.IBaritone,baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    void reset() -> a
    double calculateCost(baritone.pathing.movement.CalculationContext) -> a
    java.util.Set calculateValidPositions() -> a
    double cost(baritone.pathing.movement.CalculationContext,int,int,int,int,int) -> a
    baritone.pathing.movement.MovementState updateState(baritone.pathing.movement.MovementState) -> a
    boolean safeToCancel(baritone.pathing.movement.MovementState) -> b
    boolean prepared(baritone.pathing.movement.MovementState) -> a
baritone.pathing.movement.movements.MovementTraverse$1 -> baritone.im:
    int[] $SwitchMap$baritone$pathing$movement$MovementHelper$PlaceResult -> a
    void <clinit>() -> <clinit>
baritone.pathing.path.CutoffPath -> baritone.in:
    java.util.List path -> b
    java.util.List movements -> a
    int numNodes -> a
    baritone.api.pathing.goals.Goal goal -> a
    void <init>(baritone.api.pathing.calc.IPath,int,int) -> <init>
    void <init>(baritone.api.pathing.calc.IPath,int) -> <init>
    baritone.api.pathing.goals.Goal getGoal() -> a
    java.util.List movements() -> a
    java.util.List positions() -> b
    int getNumNodesConsidered() -> b
baritone.pathing.path.PathExecutor -> baritone.io:
    baritone.api.pathing.calc.IPath path -> a
    int pathPosition -> a
    int ticksAway -> b
    int ticksOnCurrent -> c
    java.lang.Double currentMovementOriginalCostEstimate -> a
    java.lang.Integer costEstimateIndex -> a
    boolean failed -> a
    boolean recalcBP -> c
    java.util.HashSet toBreak -> a
    java.util.HashSet toPlace -> b
    java.util.HashSet toWalkInto -> c
    baritone.behavior.PathingBehavior behavior -> a
    baritone.api.utils.IPlayerContext ctx -> a
    boolean sprintNextTick -> b
    void <init>(baritone.behavior.PathingBehavior,baritone.api.pathing.calc.IPath) -> <init>
    boolean onTick() -> a
    boolean possiblyOffPath(asw,double) -> a
    asw overrideFall(baritone.pathing.movement.movements.MovementFall) -> a
    boolean sprintableAscend(baritone.api.utils.IPlayerContext,baritone.pathing.movement.movements.MovementTraverse,baritone.pathing.movement.movements.MovementAscend,baritone.api.pathing.movement.IMovement) -> a
    boolean canSprintFromDescendInto(baritone.api.utils.IPlayerContext,baritone.api.pathing.movement.IMovement,baritone.api.pathing.movement.IMovement) -> a
    void onChangeInPathPosition() -> b
    void clearKeys() -> a
    void cancel() -> c
    int getPosition() -> a
    baritone.pathing.path.PathExecutor trySplice(baritone.pathing.path.PathExecutor) -> a
    baritone.pathing.path.PathExecutor cutIfTooLong() -> a
    baritone.api.pathing.calc.IPath getPath() -> a
    boolean finished() -> b
    baritone.pathing.path.PathExecutor lambda$trySplice$0(baritone.pathing.path.PathExecutor,baritone.pathing.path.SplicedPath) -> a
baritone.pathing.path.SplicedPath -> baritone.ip:
    java.util.List path -> a
    java.util.List movements -> b
    int numNodes -> a
    baritone.api.pathing.goals.Goal goal -> a
    void <init>(java.util.List,java.util.List,int,baritone.api.pathing.goals.Goal) -> <init>
    baritone.api.pathing.goals.Goal getGoal() -> a
    java.util.List movements() -> a
    java.util.List positions() -> b
    int getNumNodesConsidered() -> b
    int length() -> a
baritone.pathing.precompute.PrecomputedData -> baritone.iq:
    int[] data -> a
    void <init>() -> <init>
    int fillData(int,dfj) -> a
    boolean canWalkThrough(baritone.utils.BlockStateInterface,int,int,int,dfj) -> a
    boolean fullyPassable(baritone.utils.BlockStateInterface,int,int,int,dfj) -> b
baritone.pathing.precompute.Ternary -> baritone.ir:
    baritone.pathing.precompute.Ternary YES -> a
    baritone.pathing.precompute.Ternary MAYBE -> b
    baritone.pathing.precompute.Ternary NO -> c
    baritone.pathing.precompute.Ternary[] $VALUES -> a
    baritone.pathing.precompute.Ternary[] values() -> values
    baritone.pathing.precompute.Ternary valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.process.BackfillProcess -> baritone.is:
    java.util.HashMap blocksToReplace -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    java.util.List toFillIn() -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    boolean isTemporary() -> b
    double priority() -> a
    boolean lambda$toFillIn$2(gw) -> a
    boolean lambda$toFillIn$1(gw) -> b
    boolean lambda$toFillIn$0(gw) -> c
baritone.process.BackfillProcess$1 -> baritone.it:
    int[] $SwitchMap$baritone$pathing$movement$MovementHelper$PlaceResult -> a
    void <clinit>() -> <clinit>
baritone.process.BuilderProcess -> baritone.iu:
    java.util.HashSet incorrectPositions -> a
    it.unimi.dsi.fastutil.longs.LongOpenHashSet observedCompleted -> a
    java.lang.String name -> a
    baritone.api.schematic.ISchematic realSchematic -> b
    baritone.api.schematic.ISchematic schematic -> a
    hy origin -> a
    int ticks -> a
    boolean paused -> a
    int layer -> b
    int numRepeats -> c
    java.util.List approxPlaceable -> a
    int stopAtHeight -> d
    java.util.Set orientationProps -> a
    void <init>(baritone.Baritone) -> <init>
    void build(java.lang.String,baritone.api.schematic.ISchematic,hy) -> a
    void resume() -> b
    boolean build(java.lang.String,java.io.File,hy) -> a
    baritone.api.schematic.ISchematic applyMapArtAndSelection(hy,baritone.api.schematic.IStaticSchematic) -> a
    void buildOpenLitematic(int) -> a
    void clearArea(gw,gw) -> a
    boolean isActive() -> a
    java.util.Optional toBreakNearPlayer(baritone.process.BuilderProcess$BuilderCalculationContext) -> a
    java.util.Optional searchForPlacables(baritone.process.BuilderProcess$BuilderCalculationContext,java.util.List) -> a
    boolean placementPlausible(gw,dfj) -> a
    java.util.OptionalInt hasAnyItemThatWouldPlace(dfj,ehl,baritone.api.utils.Rotation) -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    void recalcNearby(baritone.process.BuilderProcess$BuilderCalculationContext) -> a
    void fullRecalc(baritone.process.BuilderProcess$BuilderCalculationContext) -> b
    baritone.api.pathing.goals.Goal assemble(baritone.process.BuilderProcess$BuilderCalculationContext,java.util.List,boolean) -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    java.util.List approxPlaceable(int) -> a
    boolean sameBlockstate(dfj,dfj) -> a
    boolean valid(dfj,dfj,boolean) -> a
    java.lang.String lambda$assemble$8(baritone.api.utils.BetterBlockPos) -> a
    java.lang.String lambda$assemble$7(java.util.Map$Entry) -> a
    void lambda$assemble$6(java.util.List,baritone.api.utils.BetterBlockPos) -> a
    void lambda$assemble$5(java.util.List,java.util.List,baritone.process.BuilderProcess$BuilderCalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void lambda$assemble$4(java.util.List,baritone.process.BuilderProcess$BuilderCalculationContext,baritone.api.utils.BetterBlockPos) -> a
    void lambda$assemble$3(baritone.process.BuilderProcess$BuilderCalculationContext,java.util.List,java.util.List,java.util.Map,java.util.List,java.util.List,java.util.List,baritone.api.utils.BetterBlockPos) -> a
    boolean lambda$trim$2(baritone.api.utils.BetterBlockPos) -> a
    int lambda$build$1(baritone.api.selection.ISelection) -> a
    int lambda$build$0(baritone.api.selection.ISelection) -> b
    baritone.Baritone access$000(baritone.process.BuilderProcess) -> a
    void <clinit>() -> <clinit>
baritone.process.BuilderProcess$1 -> baritone.iv:
    void <init>(cpv,cbu,bgx,cjf,ehj) -> <init>
baritone.process.BuilderProcess$2 -> baritone.iw:
    baritone.api.schematic.ISchematic val$realSchematic -> a
    int val$minYInclusive -> a
    int val$maxYInclusive -> b
    baritone.process.BuilderProcess this$0 -> a
    void <init>(baritone.process.BuilderProcess,baritone.api.schematic.ISchematic,int,int) -> <init>
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
    boolean inSchematic(int,int,int,dfj) -> a
    void reset() -> a
    int widthX() -> a
    int heightY() -> b
    int lengthZ() -> c
baritone.process.BuilderProcess$3 -> baritone.ix:
    void <init>(gw) -> <init>
    boolean isInGoal(int,int,int) -> a
baritone.process.BuilderProcess$4 -> baritone.iy:
    void <init>(cpv,cbu,bgx,cjf,ehj) -> <init>
baritone.process.BuilderProcess$5 -> baritone.iz:
    int[] $SwitchMap$net$minecraft$core$Direction -> a
    void <clinit>() -> <clinit>
baritone.process.BuilderProcess$BuilderCalculationContext -> baritone.iu$a:
    java.util.List placeable -> b
    baritone.api.schematic.ISchematic schematic -> a
    int originX -> e
    int originY -> f
    int originZ -> g
    baritone.process.BuilderProcess this$0 -> a
    void <init>(baritone.process.BuilderProcess) -> <init>
    dfj getSchematic(int,int,int,dfj) -> a
    double costOfPlacingAt(int,int,int,dfj) -> a
    double breakCostMultiplierAt(int,int,int,dfj) -> b
baritone.process.BuilderProcess$GoalAdjacent -> baritone.iu$b:
    boolean allowSameLevel -> a
    gw no -> a
    void <init>(gw,gw,boolean) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.BuilderProcess$GoalBreak -> baritone.iu$c:
    void <init>(gw) -> <init>
    boolean isInGoal(int,int,int) -> a
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
baritone.process.BuilderProcess$GoalPlace -> baritone.iu$d:
    void <init>(gw) -> <init>
    double heuristic(int,int,int) -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.BuilderProcess$JankyGoalComposite -> baritone.iu$e:
    baritone.api.pathing.goals.Goal primary -> a
    baritone.api.pathing.goals.Goal fallback -> b
    void <init>(baritone.api.pathing.goals.Goal,baritone.api.pathing.goals.Goal) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.BuilderProcess$Placement -> baritone.iu$f:
    int hotbarSelection -> a
    gw placeAgainst -> a
    ha side -> a
    baritone.api.utils.Rotation rot -> a
    void <init>(int,gw,ha,baritone.api.utils.Rotation) -> <init>
baritone.process.CustomGoalProcess -> baritone.ja:
    baritone.api.pathing.goals.Goal goal -> a
    baritone.api.pathing.goals.Goal mostRecentGoal -> b
    baritone.process.CustomGoalProcess$State state -> a
    void <init>(baritone.Baritone) -> <init>
    void setGoal(baritone.api.pathing.goals.Goal) -> a
    void path() -> b
    baritone.api.pathing.goals.Goal getGoal() -> a
    baritone.api.pathing.goals.Goal mostRecentGoal() -> b
    boolean isActive() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
baritone.process.CustomGoalProcess$1 -> baritone.jb:
    int[] $SwitchMap$baritone$process$CustomGoalProcess$State -> a
    void <clinit>() -> <clinit>
baritone.process.CustomGoalProcess$State -> baritone.ja$a:
    baritone.process.CustomGoalProcess$State NONE -> a
    baritone.process.CustomGoalProcess$State GOAL_SET -> b
    baritone.process.CustomGoalProcess$State PATH_REQUESTED -> c
    baritone.process.CustomGoalProcess$State EXECUTING -> d
    baritone.process.CustomGoalProcess$State[] $VALUES -> a
    baritone.process.CustomGoalProcess$State[] values() -> values
    baritone.process.CustomGoalProcess$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.process.ElytraProcess -> baritone.jc:
    baritone.process.ElytraProcess$State state -> a
    boolean goingToLandingSpot -> a
    baritone.api.utils.BetterBlockPos landingSpot -> a
    boolean reachedGoal -> b
    baritone.api.pathing.goals.Goal goal -> a
    baritone.process.elytra.ElytraBehavior behavior -> a
    boolean predictingTerrain -> c
    java.util.Set badLandingSpots -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.api.process.IElytraProcess create(baritone.Baritone) -> a
    boolean isActive() -> a
    void resetState() -> c
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    void landingSpotIsBad(baritone.api.utils.BetterBlockPos) -> a
    void onLostControl() -> a
    void destroyBehaviorAsync() -> d
    double priority() -> a
    java.lang.String displayName0() -> b
    void repackChunks() -> b
    void pathTo0(gw,boolean) -> a
    void pathTo(baritone.api.pathing.goals.Goal) -> a
    boolean shouldLandForSafety() -> e
    boolean isLoaded() -> c
    boolean isSafeToCancel() -> d
    void onRenderPass$493a6673(baritone.cache.ChunkPacker) -> a
    void onWorldEvent(baritone.api.event.events.WorldEvent) -> a
    void onChunkEvent(baritone.api.event.events.ChunkEvent) -> a
    void onBlockChange$4a8de162(baritone.api.utils.NotificationHelper) -> a
    void onReceivePacket$1f25927f(baritone.api.utils.RayTraceUtils) -> b
    void onPostTick(baritone.api.event.events.TickEvent) -> b
    boolean isSafeBlock(csv) -> a
    boolean isSafeBlock(gw) -> a
    boolean isColumnAir$5a0b67ad(gw) -> b
    boolean hasAirBubble(gw) -> c
    baritone.api.utils.BetterBlockPos checkLandingSpot(gw,it.unimi.dsi.fastutil.longs.LongOpenHashSet) -> a
    int lambda$findSafeLandingSpot$3(baritone.api.utils.BetterBlockPos) -> a
    int lambda$findSafeLandingSpot$2(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> a
    void lambda$onTick$1(java.lang.Void,java.lang.Throwable) -> a
    boolean lambda$onTick$0(baritone.api.pathing.movement.IMovement) -> a
baritone.process.ElytraProcess$State -> baritone.jc$a:
    baritone.process.ElytraProcess$State LOCATE_JUMP -> a
    baritone.process.ElytraProcess$State PAUSE -> b
    baritone.process.ElytraProcess$State GET_TO_JUMP -> c
    baritone.process.ElytraProcess$State START_FLYING -> d
    baritone.process.ElytraProcess$State FLYING -> e
    baritone.process.ElytraProcess$State LANDING -> f
    java.lang.String description -> a
    baritone.process.ElytraProcess$State[] $VALUES -> a
    baritone.process.ElytraProcess$State[] values() -> values
    baritone.process.ElytraProcess$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
baritone.process.ElytraProcess$WalkOffCalculationContext -> baritone.jc$b:
    void <init>(baritone.api.IBaritone) -> <init>
    double costOfPlacingAt(int,int,int,dfj) -> a
    double breakCostMultiplierAt(int,int,int,dfj) -> b
    double placeBucketCost() -> a
baritone.process.ExploreProcess -> baritone.jd:
    gw explorationOrigin -> a
    baritone.process.ExploreProcess$IChunkFilter filter -> a
    int distanceCompleted -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> a
    void explore(int,int) -> a
    void applyJsonFilter(java.nio.file.Path,boolean) -> a
    baritone.process.ExploreProcess$IChunkFilter calcFilter() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    baritone.api.pathing.goals.Goal[] closestUncachedChunks(gw,baritone.process.ExploreProcess$IChunkFilter) -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    baritone.api.pathing.goals.Goal[] lambda$closestUncachedChunks$1(int) -> a
    baritone.api.pathing.goals.Goal lambda$closestUncachedChunks$0(gw) -> a
    baritone.Baritone access$000(baritone.process.ExploreProcess) -> a
baritone.process.ExploreProcess$1 -> baritone.je:
    void <init>(int,int) -> <init>
    double heuristic(int,int,int) -> a
baritone.process.ExploreProcess$2 -> baritone.jf:
    int[] $SwitchMap$baritone$process$ExploreProcess$Status -> a
    void <clinit>() -> <clinit>
baritone.process.ExploreProcess$BaritoneChunkCache -> baritone.jd$a:
    baritone.api.cache.ICachedWorld cache -> a
    baritone.process.ExploreProcess this$0 -> a
    void <init>(baritone.process.ExploreProcess) -> <init>
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
    void lambda$isAlreadyExplored$0(int,int) -> a
baritone.process.ExploreProcess$EitherChunk -> baritone.jd$b:
    baritone.process.ExploreProcess$IChunkFilter a -> a
    baritone.process.ExploreProcess$IChunkFilter b -> b
    void <init>(baritone.process.ExploreProcess$IChunkFilter,baritone.process.ExploreProcess$IChunkFilter) -> <init>
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
baritone.process.ExploreProcess$IChunkFilter -> baritone.jd$c:
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
baritone.process.ExploreProcess$JsonChunkFilter -> baritone.jd$d:
    boolean invert -> a
    it.unimi.dsi.fastutil.longs.LongOpenHashSet inFilter -> a
    baritone.api.utils.MyChunkPos[] positions -> a
    baritone.process.ExploreProcess this$0 -> a
    void <init>(baritone.process.ExploreProcess,java.nio.file.Path,boolean) -> <init>
    baritone.process.ExploreProcess$Status isAlreadyExplored(int,int) -> a
    int countRemain() -> a
baritone.process.ExploreProcess$Status -> baritone.jd$e:
    baritone.process.ExploreProcess$Status EXPLORED -> a
    baritone.process.ExploreProcess$Status NOT_EXPLORED -> b
    baritone.process.ExploreProcess$Status UNKNOWN -> c
    baritone.process.ExploreProcess$Status[] $VALUES -> a
    baritone.process.ExploreProcess$Status[] values() -> values
    baritone.process.ExploreProcess$Status valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
baritone.process.FarmProcess -> baritone.jg:
    boolean active -> a
    java.util.List locations -> a
    int tickCount -> a
    int range -> b
    gw center -> a
    java.util.List FARMLAND_PLANTABLE -> b
    java.util.List PICKUP_DROPPED -> c
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> a
    void farm(int,gw) -> a
    boolean readyForHarvest(cpv,gw,dfj) -> a
    boolean isPlantable(cjf) -> a
    boolean isBoneMeal(cjf) -> b
    boolean isNetherWart(cjf) -> c
    boolean isCocoa(cjf) -> d
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    void lambda$onTick$0(java.util.ArrayList) -> a
    void <clinit>() -> <clinit>
baritone.process.FarmProcess$Harvest -> baritone.jg$a:
    baritone.process.FarmProcess$Harvest WHEAT -> a
    baritone.process.FarmProcess$Harvest CARROTS -> b
    baritone.process.FarmProcess$Harvest POTATOES -> c
    baritone.process.FarmProcess$Harvest BEETROOT -> d
    baritone.process.FarmProcess$Harvest PUMPKIN -> e
    baritone.process.FarmProcess$Harvest MELON -> f
    baritone.process.FarmProcess$Harvest NETHERWART -> g
    baritone.process.FarmProcess$Harvest COCOA -> h
    baritone.process.FarmProcess$Harvest SUGARCANE -> i
    baritone.process.FarmProcess$Harvest CACTUS -> j
    csv block -> a
    java.util.function.Predicate readyToHarvest -> a
    baritone.process.FarmProcess$Harvest[] $VALUES -> a
    baritone.process.FarmProcess$Harvest[] values() -> values
    baritone.process.FarmProcess$Harvest valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,cum) -> <init>
    void <init>(java.lang.String,int,csv,java.util.function.Predicate) -> <init>
    boolean readyToHarvest(cpv,gw,dfj) -> a
    boolean lambda$static$3(dfj) -> a
    boolean lambda$static$2(dfj) -> b
    boolean lambda$static$1(dfj) -> c
    boolean lambda$static$0(dfj) -> d
    void <clinit>() -> <clinit>
baritone.process.FarmProcess$Harvest$1 -> baritone.jh:
    void <init>(java.lang.String,csv,java.util.function.Predicate) -> <init>
    boolean readyToHarvest(cpv,gw,dfj) -> a
baritone.process.FarmProcess$Harvest$2 -> baritone.ji:
    void <init>(java.lang.String,csv,java.util.function.Predicate) -> <init>
    boolean readyToHarvest(cpv,gw,dfj) -> a
baritone.process.FollowProcess -> baritone.jj:
    java.util.function.Predicate filter -> a
    java.util.List cache -> a
    void <init>(baritone.Baritone) -> <init>
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    baritone.api.pathing.goals.Goal towards(biq) -> a
    boolean followable(biq) -> a
    void scanWorld() -> b
    boolean isActive() -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    void follow(java.util.function.Predicate) -> a
    baritone.api.pathing.goals.Goal[] lambda$onTick$0(int) -> a
baritone.process.GetToBlockProcess -> baritone.jk:
    baritone.api.utils.BlockOptionalMeta gettingTo -> a
    java.util.List knownLocations -> a
    java.util.List blacklist -> b
    gw start -> a
    int tickCount -> a
    int arrivalTickCount -> b
    void <init>(baritone.Baritone) -> <init>
    void getToBlock(baritone.api.utils.BlockOptionalMeta) -> a
    boolean isActive() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    boolean blacklistClosest() -> c
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    void rescan(java.util.List,baritone.pathing.movement.CalculationContext) -> a
    baritone.api.pathing.goals.Goal createGoal(gw) -> a
    boolean rightClick() -> d
    boolean rightClickOnArrival(csv) -> a
    void lambda$onTick$1(java.util.List,baritone.pathing.movement.CalculationContext) -> b
    baritone.api.pathing.goals.Goal[] lambda$onTick$0(int) -> a
    baritone.Baritone access$001(baritone.process.GetToBlockProcess) -> a
baritone.process.GetToBlockProcess$1 -> baritone.jl:
    void <init>(gw[]) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic() -> a
baritone.process.GetToBlockProcess$GetToBlockCalculationContext -> baritone.jk$a:
    void <init>(baritone.process.GetToBlockProcess,boolean) -> <init>
    double breakCostMultiplierAt(int,int,int,dfj) -> b
baritone.process.InventoryPauserProcess -> baritone.jm:
    boolean pauseRequestedLastTick -> a
    boolean safeToCancelLastTick -> b
    int ticksOfStationary -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> a
    boolean stationaryForInventoryMove() -> c
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    double priority() -> a
    boolean isTemporary() -> b
baritone.process.MineProcess -> baritone.jn:
    baritone.api.utils.BlockOptionalMetaLookup filter -> a
    java.util.List knownOreLocations -> a
    java.util.List blacklist -> b
    java.util.Map anticipatedDrops -> a
    gw branchPoint -> a
    baritone.api.pathing.goals.GoalRunAway branchPointRunaway -> a
    int desiredQuantity -> a
    int tickCount -> b
    void <init>(baritone.Baritone) -> <init>
    boolean isActive() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    void rescan(java.util.List,baritone.pathing.movement.CalculationContext) -> a
    boolean internalMiningGoal(gw,baritone.pathing.movement.CalculationContext,java.util.List) -> a
    java.util.List droppedItemsScan() -> a
    java.util.List searchWorld$ce463e5(baritone.pathing.movement.CalculationContext,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,java.util.List,java.util.List) -> a
    boolean addNearby() -> c
    java.util.List prune$79f92267(baritone.pathing.movement.CalculationContext,java.util.List,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,java.util.List) -> a
    boolean plausibleToBreak(baritone.pathing.movement.CalculationContext,gw) -> a
    void mine(int,baritone.api.utils.BlockOptionalMetaLookup) -> a
    baritone.api.utils.BlockOptionalMetaLookup filterFilter() -> a
    baritone.api.utils.BlockOptionalMeta[] lambda$filterFilter$17(int) -> a
    boolean lambda$filterFilter$16(baritone.api.utils.BlockOptionalMeta) -> a
    boolean lambda$prune$15(java.util.List,gw) -> a
    boolean lambda$prune$14(gw) -> a
    boolean lambda$prune$13(baritone.pathing.movement.CalculationContext,gw) -> b
    boolean lambda$prune$12(baritone.pathing.movement.CalculationContext,gw) -> c
    boolean lambda$prune$11(baritone.pathing.movement.CalculationContext,gw) -> d
    boolean lambda$prune$10(baritone.pathing.movement.CalculationContext,baritone.api.utils.BlockOptionalMetaLookup,java.util.List,gw) -> a
    boolean lambda$prune$9(java.util.List,baritone.api.utils.BlockOptionalMetaLookup,baritone.pathing.movement.CalculationContext,gw) -> a
    boolean lambda$addNearby$8(gw,gw) -> a
    baritone.api.pathing.goals.Goal[] lambda$updateGoal$7(int) -> a
    baritone.api.pathing.goals.Goal lambda$updateGoal$6(java.util.List,baritone.pathing.movement.CalculationContext,gw) -> a
    void lambda$updateLoucaSystem$5(java.util.Map,gw) -> a
    boolean lambda$onTick$4(gw) -> b
    boolean lambda$onTick$3(gw) -> c
    boolean lambda$onTick$2(gw) -> d
    void lambda$onTick$1(java.util.List,baritone.pathing.movement.CalculationContext) -> b
    boolean lambda$onTick$0(cjf) -> a
baritone.process.MineProcess$1 -> baritone.jo:
    void <init>(java.lang.Integer,gw[]) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic() -> a
baritone.process.MineProcess$GoalThreeBlocks -> baritone.jn$a:
    void <init>(gw) -> <init>
    boolean isInGoal(int,int,int) -> a
    double heuristic(int,int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
baritone.process.elytra.BlockStateOctreeInterface -> baritone.jp:
    long contextPtr -> a
    long chunkPtr -> b
    int prevChunkX -> a
    int prevChunkZ -> b
    void <init>(baritone.process.elytra.NetherPathfinderContext) -> <init>
baritone.process.elytra.ElytraBehavior -> baritone.jq:
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    java.util.List clearLines -> a
    java.util.List blockedLines -> b
    java.util.List simulationLine -> c
    gw aimPos -> a
    java.util.List visiblePath -> d
    baritone.process.elytra.NetherPathfinderContext context -> a
    baritone.process.elytra.ElytraBehavior$PathManager pathManager -> a
    baritone.process.ElytraProcess process -> a
    int remainingFireworkTicks -> a
    int remainingSetBackTicks -> b
    boolean landingMode -> a
    int minimumBoostTicks -> c
    boolean deployedFireworkLastTick -> b
    int[] nextTickBoostCounter -> a
    baritone.utils.BlockStateInterface bsi -> a
    baritone.process.elytra.BlockStateOctreeInterface boi -> a
    baritone.api.utils.BetterBlockPos destination -> a
    boolean appendDestination -> c
    java.util.concurrent.ExecutorService solverExecutor -> a
    java.util.concurrent.Future solver -> a
    baritone.process.elytra.ElytraBehavior$Solution pendingSolution -> a
    boolean solveNextTick -> d
    long timeLastCacheCull -> a
    int invTickCountdown -> d
    java.util.Queue invTransactionQueue -> a
    void <init>(baritone.Baritone,baritone.process.ElytraProcess,gw,boolean) -> <init>
    void onReceivePacket$1f25927f(baritone.api.utils.RayTraceUtils) -> a
    void pathTo() -> a
    void destroy() -> b
    void repackChunks() -> c
    void onPostTick(baritone.api.event.events.TickEvent) -> a
    baritone.process.elytra.ElytraBehavior$Solution solveAngles(baritone.process.elytra.ElytraBehavior$SolverContext) -> a
    void tickUseFireworks(ehn,ehn,boolean,boolean) -> a
    boolean isFireworks(cjf) -> a
    boolean isBoostingFireworks(cjf) -> b
    java.util.OptionalInt getFireworkBoost(cjf) -> a
    java.util.Optional getAttachedFirework() -> a
    boolean isHitboxClear(baritone.process.elytra.ElytraBehavior$SolverContext,ehn,java.lang.Double) -> a
    boolean clearView(ehn,ehn,boolean) -> a
    it.unimi.dsi.fastutil.floats.FloatArrayList pitchesToSolveFor(float,boolean) -> a
    java.util.List simulate(baritone.process.elytra.ElytraBehavior$SolverContext,ehn,float,int,int,int) -> a
    boolean passable(int,int,int,boolean) -> a
    void queueWindowClick$367557c0(int,int,ceu) -> a
    int findGoodElytra() -> a
    void lambda$queueWindowClick$8(int,int,int,ceu) -> a
    baritone.process.elytra.ElytraBehavior$PitchResult lambda$solvePitch$7(baritone.process.elytra.ElytraBehavior$IntTriFunction,baritone.process.elytra.ElytraBehavior$IntTriple) -> a
    baritone.process.elytra.ElytraBehavior$PitchResult lambda$solvePitch$6(baritone.process.elytra.ElytraBehavior$IntTriFunction,baritone.process.elytra.ElytraBehavior$IntTriple) -> b
    baritone.process.elytra.ElytraBehavior$PitchResult lambda$solvePitch$5(baritone.process.elytra.ElytraBehavior$SolverContext,ehn,int,it.unimi.dsi.fastutil.floats.FloatArrayList,int,int,int) -> a
    cch lambda$getAttachedFirework$4(biq) -> a
    boolean lambda$getAttachedFirework$3(biq) -> a
    boolean lambda$getAttachedFirework$2(biq) -> b
    baritone.process.elytra.ElytraBehavior$Solution lambda$onPostTick$1(baritone.process.elytra.ElytraBehavior$SolverContext) -> b
    void lambda$onReceivePacket$0() -> d
baritone.process.elytra.ElytraBehavior$FireworkBoost -> baritone.jq$a:
    java.lang.Integer fireworkTicksExisted -> a
    int minimumBoostTicks -> b
    int maximumBoostTicks -> a
    void <init>(java.lang.Integer,int) -> <init>
    boolean isBoosted() -> a
    int getGuaranteedBoostTicks() -> a
    boolean equals(java.lang.Object) -> equals
baritone.process.elytra.ElytraBehavior$IntTriFunction -> baritone.jq$b:
    java.lang.Object apply(int,int,int) -> apply
baritone.process.elytra.ElytraBehavior$IntTriple -> baritone.jq$c:
    int first -> a
    int second -> b
    int third -> c
    void <init>(int,int,int) -> <init>
baritone.process.elytra.ElytraBehavior$PathManager -> baritone.jq$d:
    baritone.process.elytra.NetherPath path -> a
    boolean completePath -> a
    boolean recalculating -> b
    int maxPlayerNear -> a
    int ticksNearUnchanged -> b
    int playerNear -> c
    baritone.process.elytra.ElytraBehavior this$0 -> a
    void <init>(baritone.process.elytra.ElytraBehavior) -> <init>
    java.util.concurrent.CompletableFuture pathToDestination() -> a
    java.util.concurrent.CompletableFuture pathToDestination(gw) -> a
    java.util.concurrent.CompletableFuture pathRecalcSegment(java.util.OptionalInt) -> a
    void pathNextSegment(int) -> a
    void clear() -> a
    void setPath(baritone.process.elytra.UnpackedSegment) -> a
    java.util.concurrent.CompletableFuture path0(gw,gw,java.util.function.UnaryOperator) -> a
    void pathfindAroundObstacles() -> b
    void updatePlayerNear() -> c
    void lambda$pathfindAroundObstacles$9() -> d
    void lambda$pathfindAroundObstacles$8(baritone.api.utils.BetterBlockPos,double,long) -> a
    void lambda$pathfindAroundObstacles$7() -> e
    void lambda$pathNextSegment$6(baritone.api.utils.BetterBlockPos,java.lang.Void,java.lang.Throwable) -> a
    void lambda$pathNextSegment$5(java.util.List,long) -> a
    baritone.process.elytra.UnpackedSegment lambda$pathNextSegment$4(java.util.List,baritone.process.elytra.UnpackedSegment) -> a
    void lambda$pathRecalcSegment$3(java.lang.Void,java.lang.Throwable) -> a
    baritone.process.elytra.UnpackedSegment lambda$pathRecalcSegment$2(java.util.List,boolean,java.util.OptionalInt,baritone.process.elytra.UnpackedSegment) -> a
    void lambda$pathToDestination$1(java.lang.Void,java.lang.Throwable) -> b
    void lambda$pathToDestination$0(long) -> a
baritone.process.elytra.ElytraBehavior$PitchResult -> baritone.jq$e:
    float pitch -> a
    double dot -> a
    java.util.List steps -> a
    void <init>(float,double,java.util.List) -> <init>
baritone.process.elytra.ElytraBehavior$Solution -> baritone.jq$f:
    baritone.process.elytra.ElytraBehavior$SolverContext context -> a
    baritone.api.utils.Rotation rotation -> a
    ehn goingTo -> a
    boolean solvedPitch -> a
    boolean forceUseFirework -> b
    void <init>(baritone.process.elytra.ElytraBehavior$SolverContext,baritone.api.utils.Rotation,ehn,boolean,boolean) -> <init>
baritone.process.elytra.ElytraBehavior$SolverContext -> baritone.jq$g:
    baritone.process.elytra.NetherPath path -> a
    int playerNear -> a
    ehn start -> a
    ehn motion -> b
    ehi boundingBox -> a
    boolean ignoreLava -> a
    baritone.process.elytra.ElytraBehavior$FireworkBoost boost -> a
    baritone.api.behavior.look.IAimProcessor aimProcessor -> a
    void <init>(baritone.process.elytra.ElytraBehavior,boolean) -> <init>
    boolean equals(java.lang.Object) -> equals
    java.lang.Integer lambda$new$0(cch) -> a
baritone.process.elytra.NetherPath -> baritone.jr:
    baritone.process.elytra.NetherPath EMPTY_PATH -> a
    java.util.List backing -> a
    void <init>(java.util.List) -> <init>
    baritone.api.utils.BetterBlockPos get(int) -> a
    int size() -> size
    baritone.api.utils.BetterBlockPos getLast() -> a
    ehn getVec(int) -> a
    baritone.process.elytra.NetherPath emptyPath() -> a
    java.lang.Object get(int) -> get
    void <clinit>() -> <clinit>
baritone.process.elytra.NetherPathfinderContext -> baritone.js:
    dfj AIR_BLOCK_STATE -> a
    java.lang.Object cullingLock -> a
    long context -> a
    long seed -> b
    java.util.concurrent.ExecutorService executor -> a
    void <init>(long) -> <init>
    void queueCacheCulling(int,int,int,baritone.process.elytra.BlockStateOctreeInterface) -> a
    void queueForPacking(dhq) -> a
    void queueBlockUpdate$4a8de162(baritone.api.utils.NotificationHelper) -> a
    java.util.concurrent.CompletableFuture pathFindAsync(gw,gw) -> a
    boolean raytrace(ehn,ehn) -> a
    boolean isSupported() -> a
    dev.babbaj.pathfinder.PathSegment lambda$pathFindAsync$4(gw,gw) -> a
    void lambda$queueBlockUpdate$3$4a8de162(baritone.api.utils.NotificationHelper) -> b
    void lambda$queueBlockUpdate$2(long,baritone.api.utils.Pair) -> a
    void lambda$queueForPacking$1(java.lang.ref.SoftReference) -> a
    void lambda$queueCacheCulling$0(baritone.process.elytra.BlockStateOctreeInterface,int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.process.elytra.NullElytraProcess -> baritone.jt:
    void <init>(baritone.Baritone) -> <init>
    void repackChunks() -> b
    void pathTo(baritone.api.pathing.goals.Goal) -> a
    void resetState() -> c
    boolean isActive() -> a
    baritone.api.process.PathingCommand onTick(boolean,boolean) -> a
    void onLostControl() -> a
    java.lang.String displayName0() -> b
    boolean isLoaded() -> c
    boolean isSafeToCancel() -> d
baritone.process.elytra.PathCalculationException -> baritone.ju:
    void <init>(java.lang.String) -> <init>
baritone.process.elytra.UnpackedSegment -> baritone.jv:
    java.util.stream.Stream path -> a
    boolean finished -> a
    void <init>(java.util.stream.Stream,boolean) -> <init>
    baritone.process.elytra.UnpackedSegment from(dev.babbaj.pathfinder.PathSegment) -> a
baritone.selection.Selection -> baritone.jw:
    baritone.api.utils.BetterBlockPos pos1 -> a
    baritone.api.utils.BetterBlockPos pos2 -> b
    baritone.api.utils.BetterBlockPos min -> c
    baritone.api.utils.BetterBlockPos max -> d
    hy size -> a
    ehi aabb -> a
    void <init>(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> <init>
    baritone.api.utils.BetterBlockPos pos1() -> a
    baritone.api.utils.BetterBlockPos pos2() -> b
    baritone.api.utils.BetterBlockPos min() -> c
    baritone.api.utils.BetterBlockPos max() -> d
    hy size() -> a
    ehi aabb() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean isPos2(ha) -> a
    baritone.api.selection.ISelection expand(ha,int) -> a
    baritone.api.selection.ISelection contract(ha,int) -> b
    baritone.api.selection.ISelection shift(ha,int) -> c
baritone.selection.Selection$1 -> baritone.jx:
    int[] $SwitchMap$net$minecraft$core$Direction$Axis -> a
    void <clinit>() -> <clinit>
baritone.selection.SelectionManager -> baritone.jy:
    java.util.LinkedList selections -> a
    baritone.api.selection.ISelection[] selectionsArr -> a
    void <init>(baritone.Baritone) -> <init>
    void resetSelectionsArr() -> a
    baritone.api.selection.ISelection addSelection(baritone.api.selection.ISelection) -> b
    baritone.api.selection.ISelection addSelection(baritone.api.utils.BetterBlockPos,baritone.api.utils.BetterBlockPos) -> a
    baritone.api.selection.ISelection removeSelection(baritone.api.selection.ISelection) -> a
    baritone.api.selection.ISelection[] removeAllSelections() -> a
    baritone.api.selection.ISelection[] getSelections() -> b
    baritone.api.selection.ISelection expand(baritone.api.selection.ISelection,ha,int) -> a
    baritone.api.selection.ISelection contract(baritone.api.selection.ISelection,ha,int) -> b
    baritone.api.selection.ISelection shift(baritone.api.selection.ISelection,ha,int) -> c
baritone.selection.SelectionRenderer -> baritone.jz:
    baritone.selection.SelectionManager manager -> a
    void <init>(baritone.Baritone,baritone.selection.SelectionManager) -> <init>
    void onRenderPass$493a6673(baritone.cache.ChunkPacker) -> a
baritone.utils.BaritoneProcessHelper -> baritone.ka:
    baritone.Baritone baritone -> a
    baritone.api.utils.IPlayerContext ctx -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isTemporary() -> b
baritone.utils.BlockBreakHelper -> baritone.kb:
    baritone.api.utils.IPlayerContext ctx -> a
    boolean didBreakLastTick -> a
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    void stopBreakingBlock() -> a
baritone.utils.BlockPlaceHelper -> baritone.kc:
    baritone.api.utils.IPlayerContext ctx -> a
    int rightClickTimer -> a
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
baritone.utils.BlockStateInterface -> baritone.kd:
    fit provider -> a
    baritone.cache.WorldData worldData -> a
    cpv world -> a
    gw$a isPassableBlockPos -> a
    cpb access -> a
    baritone.utils.pathing.BetterWorldBorder worldBorder -> a
    dhq prev -> a
    baritone.cache.CachedRegion prevCached -> a
    boolean useTheRealWorld -> a
    dfj AIR -> a
    void <init>(baritone.api.utils.IPlayerContext) -> <init>
    void <init>(baritone.api.utils.IPlayerContext,boolean) -> <init>
    boolean worldContainsLoadedChunk(int,int) -> a
    csv getBlock(baritone.api.utils.IPlayerContext,gw) -> a
    dfj get(baritone.api.utils.IPlayerContext,gw) -> a
    dfj get0(gw) -> a
    dfj get0(int,int,int) -> a
    dfj getFromChunk(dhq,int,int,int) -> a
    void <clinit>() -> <clinit>
baritone.utils.BlockStateInterfaceAccessWrapper -> baritone.ke:
    baritone.utils.BlockStateInterface bsi -> a
    void <init>(baritone.utils.BlockStateInterface) -> <init>
    dcv c_(gw) -> c_
    dfj a_(gw) -> a_
    eam b_(gw) -> b_
    int I_() -> I_
    int H_() -> H_
baritone.utils.GuiClick -> baritone.kf:
    org.joml.Matrix4f projectionViewMatrix -> a
    gw clickStart -> a
    gw currentMouseOver -> b
    void <init>() -> <init>
    boolean j() -> j
    void a(esf,int,int,float) -> a
    boolean b(double,double,int) -> b
    boolean a(double,double,int) -> a
    ehn toWorld(double,double,double) -> a
baritone.utils.IRenderer -> baritone.kg:
    elr tessellator -> a
    elk buffer -> a
    baritone.utils.accessor.IEntityRenderManager renderManager -> a
    fzf textureManager -> a
    baritone.api.Settings settings -> a
    float[] color -> a
    void glColor(java.awt.Color,float) -> a
    void startLines(java.awt.Color,float,float,boolean) -> a
    void startLines(java.awt.Color,float,boolean) -> a
    void endLines(boolean) -> a
    void emitLine(elp,double,double,double,double,double,double) -> a
    void emitLine(elp,double,double,double,double,double,double,double,double,double) -> a
    void emitLine(elp,float,float,float,float,float,float,float,float,float) -> a
    void emitAABB(elp,ehi) -> a
    void emitAABB(elp,ehi,double) -> a
    void emitLine(elp,ehn,ehn) -> a
    void <clinit>() -> <clinit>
baritone.utils.InputOverrideHandler -> baritone.kh:
    java.util.Map inputForceStateMap -> a
    baritone.utils.BlockBreakHelper blockBreakHelper -> a
    baritone.utils.BlockPlaceHelper blockPlaceHelper -> a
    void <init>(baritone.Baritone) -> <init>
    boolean isInputForcedDown(baritone.api.utils.input.Input) -> a
    void setInputForceState(baritone.api.utils.input.Input,boolean) -> a
    void clearAllKeys() -> a
    void onTick(baritone.api.event.events.TickEvent) -> a
baritone.utils.PathRenderer -> baritone.ki:
    aew TEXTURE_BEACON_BEAM -> a
    double posX() -> a
    double posY() -> b
    double posZ() -> c
    void render$3f238dfb(baritone.cache.ChunkPacker,baritone.behavior.PathingBehavior) -> a
    void drawPath$789a82a5(elp,java.util.List,int,java.awt.Color,boolean) -> a
    void drawPath(elp,java.util.List,int,java.awt.Color,boolean,int,int,double) -> a
    void emitPathLine(elp,double,double,double,double,double,double,double) -> a
    void drawManySelectionBoxes(elp,biq,java.util.Collection,java.awt.Color) -> a
    void drawGoal(elp,baritone.api.utils.IPlayerContext,baritone.api.pathing.goals.Goal,float,java.awt.Color) -> a
    void drawGoal(elp,baritone.api.utils.IPlayerContext,baritone.api.pathing.goals.Goal,float,java.awt.Color,boolean) -> a
    void drawDankLitGoalBox(elp,java.awt.Color,double,double,double,double,double,double,double,double,boolean) -> a
    void renderHorizontalQuad(elp,double,double,double,double,double) -> a
    void lambda$drawManySelectionBoxes$3(baritone.utils.BlockStateInterface,biq,elp,gw) -> a
    void lambda$render$2$1b087156(baritone.cache.ChunkPacker,baritone.api.utils.IPlayerContext,baritone.pathing.calc.AbstractNodeCostSearch) -> a
    void lambda$render$1$14b79f0a(baritone.cache.ChunkPacker,baritone.api.utils.IPlayerContext,baritone.api.pathing.calc.IPath) -> a
    void lambda$render$0$67adce(baritone.cache.ChunkPacker,baritone.api.pathing.calc.IPath) -> a
    void <clinit>() -> <clinit>
baritone.utils.PathingCommandContext -> baritone.kj:
    baritone.pathing.movement.CalculationContext desiredCalcContext -> a
    void <init>(baritone.api.pathing.goals.Goal,baritone.api.process.PathingCommandType,baritone.pathing.movement.CalculationContext) -> <init>
baritone.utils.PathingControlManager -> baritone.kk:
    baritone.Baritone baritone -> a
    java.util.HashSet processes -> a
    java.util.List active -> a
    baritone.api.process.IBaritoneProcess inControlLastTick -> a
    baritone.api.process.IBaritoneProcess inControlThisTick -> b
    baritone.api.process.PathingCommand command -> a
    void <init>(baritone.Baritone) -> <init>
    void registerProcess(baritone.api.process.IBaritoneProcess) -> a
    void cancelEverything() -> a
    java.util.Optional mostRecentInControl() -> a
    java.util.Optional mostRecentCommand() -> b
    boolean revalidateGoal(baritone.api.pathing.goals.Goal) -> a
    baritone.api.process.PathingCommand executeProcesses() -> a
baritone.utils.PathingControlManager$1 -> baritone.kl:
    baritone.utils.PathingControlManager this$0 -> a
    void <init>(baritone.utils.PathingControlManager) -> <init>
    void onTick(baritone.api.event.events.TickEvent) -> a
baritone.utils.PathingControlManager$2 -> baritone.km:
    int[] $SwitchMap$baritone$api$process$PathingCommandType -> a
    void <clinit>() -> <clinit>
baritone.utils.PlayerMovementInput -> baritone.kn:
    baritone.utils.InputOverrideHandler handler -> a
    void <init>(baritone.utils.InputOverrideHandler) -> <init>
    void a(boolean,float) -> a
baritone.utils.ToolSet -> baritone.ko:
    java.util.Map breakStrengthCache -> a
    java.util.function.Function backendCalculation -> a
    fng player -> a
    void <init>(fng) -> <init>
    double getStrVsBlock(dfj) -> a
    int getMaterialCost(cjf) -> a
    boolean hasSilkTouch(cjf) -> a
    int getBestSlot(csv,boolean,boolean) -> a
    double getBestDestructionTime(csv) -> a
    double calculateSpeedVsBlock(cjf,dfj) -> a
    java.lang.Double lambda$new$0(double,java.lang.Double) -> a
baritone.utils.accessor.IChunkArray -> baritone.kp:
    void copyFrom(baritone.utils.accessor.IChunkArray) -> copyFrom
    java.util.concurrent.atomic.AtomicReferenceArray getChunks() -> getChunks
    int centerX() -> centerX
    int centerZ() -> centerZ
    int viewDistance() -> viewDistance
baritone.utils.accessor.IClientChunkProvider -> baritone.kq:
    fit createThreadSafeCopy() -> createThreadSafeCopy
    baritone.utils.accessor.IChunkArray extractReferenceArray() -> extractReferenceArray
baritone.utils.accessor.IEntityRenderManager -> baritone.kr:
    double renderPosX() -> renderPosX
    double renderPosY() -> renderPosY
    double renderPosZ() -> renderPosZ
baritone.utils.accessor.IFireworkRocketEntity -> baritone.ks:
    bjg getBoostedEntity() -> getBoostedEntity
baritone.utils.accessor.IGuiScreen -> baritone.kt:
    void openLinkInvoker(java.net.URI) -> openLinkInvoker
baritone.utils.accessor.IPalettedContainer -> baritone.ku:
    dhw getPalette() -> getPalette
    aqp getStorage() -> getStorage
baritone.utils.accessor.IPalettedContainer$IData -> baritone.ku$a:
    dhw getPalette() -> getPalette
    aqp getStorage() -> getStorage
baritone.utils.accessor.IPlayerControllerMP -> baritone.kv:
    void setIsHittingBlock(boolean) -> setIsHittingBlock
    gw getCurrentBlock() -> getCurrentBlock
    void callSyncCurrentPlayItem() -> callSyncCurrentPlayItem
baritone.utils.pathing.Avoidance -> baritone.kw:
    int centerX -> a
    int centerY -> b
    int centerZ -> c
    double coefficient -> a
    int radius -> d
    void <init>(gw,double,int) -> <init>
    void <init>(int,int,int,double,int) -> <init>
    java.util.List create(baritone.api.utils.IPlayerContext) -> a
    void lambda$create$5(java.util.List,double,biq) -> a
    boolean lambda$create$4(biq) -> a
    boolean lambda$create$3(biq) -> b
    boolean lambda$create$2(baritone.api.utils.IPlayerContext,biq) -> a
    boolean lambda$create$1(biq) -> c
    void lambda$create$0(java.util.List,double,gw) -> a
baritone.utils.pathing.BetterWorldBorder -> baritone.kx:
    double minX -> a
    double maxX -> b
    double minZ -> c
    double maxZ -> d
    void <init>(dha) -> <init>
    boolean entirelyContains(int,int) -> a
    boolean canPlaceAt(int,int) -> b
baritone.utils.pathing.Favoring -> baritone.ky:
    it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap favorings -> a
    void <init>(baritone.api.utils.IPlayerContext,baritone.api.pathing.calc.IPath,baritone.pathing.movement.CalculationContext) -> <init>
    void <init>(baritone.api.pathing.calc.IPath,baritone.pathing.movement.CalculationContext) -> <init>
    void lambda$new$0(double,baritone.api.utils.BetterBlockPos) -> a
baritone.utils.pathing.MutableMoveResult -> baritone.kz:
    int x -> a
    int y -> b
    int z -> c
    double cost -> a
    void <init>() -> <init>
    void reset() -> a
baritone.utils.pathing.PathBase -> baritone.la:
    void <init>() -> <init>
    baritone.api.pathing.calc.IPath staticCutoff(baritone.api.pathing.goals.Goal) -> a
    baritone.api.pathing.calc.IPath cutoffAtLoadedChunks(java.lang.Object) -> a
baritone.utils.pathing.PathingBlockType -> baritone.lb:
    baritone.utils.pathing.PathingBlockType AIR -> a
    baritone.utils.pathing.PathingBlockType WATER -> b
    baritone.utils.pathing.PathingBlockType AVOID -> c
    baritone.utils.pathing.PathingBlockType SOLID -> d
    boolean[] bits -> a
    baritone.utils.pathing.PathingBlockType[] $VALUES -> a
    baritone.utils.pathing.PathingBlockType[] values() -> values
    baritone.utils.pathing.PathingBlockType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    baritone.utils.pathing.PathingBlockType fromBits(boolean,boolean) -> a
    void <clinit>() -> <clinit>
baritone.utils.player.BaritonePlayerContext -> baritone.lc:
    baritone.Baritone baritone -> a
    eqv mc -> a
    baritone.api.utils.IPlayerController playerController -> a
    void <init>(baritone.Baritone,eqv) -> <init>
    eqv minecraft() -> a
    fng player() -> a
    baritone.api.utils.IPlayerController playerController() -> a
    cpv world() -> a
    baritone.api.cache.IWorldData worldData() -> a
    baritone.api.utils.BetterBlockPos viewerPos() -> b
    baritone.api.utils.Rotation playerRotations() -> a
    ehl objectMouseOver() -> a
    baritone.api.utils.Rotation lambda$playerRotations$0() -> b
baritone.utils.player.BaritonePlayerController -> baritone.ld:
    eqv mc -> a
    void <init>(eqv) -> <init>
    void syncHeldItem() -> a
    boolean hasBrokenBlock() -> a
    boolean onPlayerDamageBlock(gw,ha) -> a
    void resetBlockRemoving() -> b
    void windowClick(int,int,int,ceu,cbu) -> a
    cps getGameType() -> a
    bgy processRightClickBlock$1201604c(fng,bgx,ehj) -> a
    bgy processRightClick$1b269b60(fng,bgx) -> a
    boolean clickBlock(gw,ha) -> b
    void setHittingBlock(boolean) -> a
baritone.utils.schematic.MapArtSchematic -> baritone.le:
    int[][] heightMap -> a
    void <init>(baritone.api.schematic.IStaticSchematic) -> <init>
    boolean partOfMask(int,int,int,dfj) -> b
    boolean lambda$generateHeightMap$0(dfj) -> a
baritone.utils.schematic.SchematicSystem -> baritone.lf:
    baritone.utils.schematic.SchematicSystem INSTANCE -> a
    baritone.api.command.registry.Registry registry -> a
    baritone.utils.schematic.SchematicSystem[] $VALUES -> a
    baritone.utils.schematic.SchematicSystem[] values() -> values
    baritone.utils.schematic.SchematicSystem valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String) -> <init>
    java.util.Optional getByFile(java.io.File) -> a
    boolean lambda$getByFile$0(java.io.File,baritone.api.schematic.format.ISchematicFormat) -> a
    void <clinit>() -> <clinit>
baritone.utils.schematic.SelectionSchematic -> baritone.lg:
    baritone.api.selection.ISelection[] selections -> a
    void <init>(baritone.api.schematic.ISchematic,hy,baritone.api.selection.ISelection[]) -> <init>
    boolean partOfMask(int,int,int,dfj) -> b
    baritone.api.selection.ISelection[] lambda$new$1(int) -> a
    baritone.api.selection.ISelection lambda$new$0(hy,baritone.api.selection.ISelection) -> a
baritone.utils.schematic.StaticSchematic -> baritone.lh:
    dfj[][][] states -> a
    void <init>() -> <init>
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
    dfj getDirect(int,int,int) -> a
    dfj[] getColumn(int,int) -> a
baritone.utils.schematic.format.DefaultSchematicFormats -> baritone.li:
    baritone.utils.schematic.format.DefaultSchematicFormats MCEDIT -> a
    baritone.utils.schematic.format.DefaultSchematicFormats SPONGE -> b
    baritone.utils.schematic.format.DefaultSchematicFormats LITEMATICA -> c
    java.lang.String extension -> a
    baritone.utils.schematic.format.DefaultSchematicFormats[] $VALUES -> a
    baritone.utils.schematic.format.DefaultSchematicFormats[] values() -> values
    baritone.utils.schematic.format.DefaultSchematicFormats valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    boolean isFileType(java.io.File) -> a
    void <clinit>() -> <clinit>
baritone.utils.schematic.format.DefaultSchematicFormats$1 -> baritone.lj:
    void <init>(java.lang.String,java.lang.String) -> <init>
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> a
baritone.utils.schematic.format.DefaultSchematicFormats$2 -> baritone.lk:
    void <init>(java.lang.String,java.lang.String) -> <init>
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> a
baritone.utils.schematic.format.DefaultSchematicFormats$3 -> baritone.ll:
    void <init>(java.lang.String,java.lang.String) -> <init>
    baritone.api.schematic.IStaticSchematic parse(java.io.InputStream) -> a
baritone.utils.schematic.format.defaults.LitematicaSchematic -> baritone.lm:
    hy offsetMinCorner -> a
    qw nbt -> a
    void <init>(qw,boolean) -> <init>
    java.lang.String[] getRegions(qw) -> a
    int getMinOfSubregion(qw,java.lang.String,java.lang.String) -> a
    dfj getBlockState(csv,qw) -> a
    int getMinOfSchematic(java.lang.String) -> a
    void fillInSchematic() -> b
    void writeSubregionIntoSchematic(qw,java.lang.String,dfj[],baritone.utils.schematic.format.defaults.LitematicaSchematic$LitematicaBitArray) -> a
    int getX() -> d
    int getY() -> e
    int getZ() -> f
    void setDirect(int,int,int,dfj) -> a
baritone.utils.schematic.format.defaults.LitematicaSchematic$LitematicaBitArray -> baritone.lm$a:
    long[] longArray -> a
    int bitsPerEntry -> a
    long maxEntryValue -> a
    long arraySize -> b
    void <init>(int,long,long[]) -> <init>
baritone.utils.schematic.format.defaults.MCEditSchematic -> baritone.ln:
    void <init>(qw) -> <init>
baritone.utils.schematic.format.defaults.SpongeSchematic -> baritone.lo:
    void <init>(qw) -> <init>
baritone.utils.schematic.format.defaults.SpongeSchematic$SerializedBlockState -> baritone.lo$a:
    java.util.regex.Pattern REGEX -> a
    aew resourceLocation -> a
    java.util.Map properties -> a
    dfj blockState -> a
    void <init>(aew,java.util.Map) -> <init>
    dfj deserialize() -> a
    baritone.utils.schematic.format.defaults.SpongeSchematic$SerializedBlockState getFromString(java.lang.String) -> a
    void lambda$deserialize$0(csv,java.lang.String) -> a
    void <clinit>() -> <clinit>
baritone.utils.schematic.litematica.LitematicaHelper -> baritone.utils.schematic.litematica.LitematicaHelper:
    void <init>() -> <init>
    boolean isLitematicaPresent() -> a
    boolean hasLoadedSchematic() -> b
    java.lang.String getName(int) -> a
    hy getOrigin(int) -> a
    java.io.File getSchematicFile(int) -> a
    czh getRotation(int) -> a
    cxq getMirror(int) -> a
    hy getCorrectedOrigin(baritone.utils.schematic.format.defaults.LitematicaSchematic,int) -> a
    hy rotate(hy,int,int) -> a
    baritone.utils.schematic.format.defaults.LitematicaSchematic blackMagicFuckery(baritone.utils.schematic.format.defaults.LitematicaSchematic,int) -> a
baritone.utils.schematic.litematica.LitematicaHelper$1 -> baritone.utils.schematic.litematica.LitematicaHelper$1:
    int[] $SwitchMap$net$minecraft$world$level$block$Rotation -> a
    int[] $SwitchMap$net$minecraft$world$level$block$Mirror -> b
    void <clinit>() -> <clinit>
baritone.utils.schematic.schematica.SchematicAdapter -> baritone.utils.schematic.schematica.SchematicAdapter:
    com.github.lunatrius.schematica.client.world.SchematicWorld schematic -> a
    dfj desiredState(int,int,int,dfj,java.util.List) -> a
    dfj getDirect(int,int,int) -> a
    int widthX() -> a
    int heightY() -> b
    int lengthZ() -> c
baritone.utils.schematic.schematica.SchematicaHelper -> baritone.utils.schematic.schematica.SchematicaHelper:
    baritone.utils.schematic.schematica.SchematicaHelper[] $VALUES -> a
    baritone.utils.schematic.schematica.SchematicaHelper[] values() -> values
    baritone.utils.schematic.schematica.SchematicaHelper valueOf(java.lang.String) -> valueOf
    void <clinit>() -> <clinit>
baritone.utils.type.VarInt -> baritone.lp:
    int value -> a
    byte[] serialized -> a
    int size -> b
    void <init>(int) -> <init>
    byte[] serialize0(int) -> a
    baritone.utils.type.VarInt read(byte[],int) -> a
