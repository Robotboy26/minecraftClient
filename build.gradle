plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    mavenCentral()
    maven { url 'https://maven.fabricmc.net/' }
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven {
        name = "Meteor Development Libraries"
        url = "https://meteordev.org/repo/maven"
    }
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
    maven {
        name = "modrinth"
        url = "https://api.modrinth.com/maven"

        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
           name = "meteor"
           url = "https://maven.meteordev.org/"
   }
}

configurations {
    // include mods
    modImplementation.extendsFrom(modInclude)
    include.extendsFrom(modInclude)

    // include libraries
    implementation.extendsFrom(library)
    shadow.extendsFrom(library)
}

ext {
    lwjglVersion = '3.3.1'
    imguiVersion = '1.86.10'
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:1.10.10+kotlin.1.9.10"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // ImGui
    implementation("io.github.spair:imgui-java-binding:$imguiVersion")
    include("io.github.spair:imgui-java-binding:$imguiVersion")
    implementation("io.github.spair:imgui-java-lwjgl3:$imguiVersion") {
        exclude group: "org.lwjgl"
    }
    include("io.github.spair:imgui-java-lwjgl3:$imguiVersion")
    ["linux", "macos", "windows"].each {
        implementation("io.github.spair:imgui-java-natives-$it:$imguiVersion")
        include("io.github.spair:imgui-java-natives-$it:$imguiVersion")
    }

    // Baritone (https://github.com/MeteorDevelopment/baritone)
    //implementation "baritone:fabric:${project.minecraft_version}-SNAPSHOT"
    //include "baritone:fabric:${project.minecraft_version}-SNAPSHOT"

    // Orbit from meteor development
    implementation "meteordevelopment:orbit:${project.orbit_version}"
    include "meteordevelopment:orbit:${project.orbit_version}"
    implementation "meteordevelopment:starscript:${project.starscript_version}"
    include "meteordevelopment:starscript:${project.starscript_version}"

    implementation "com.github.LlamaLad7.MixinExtras:mixinextras-fabric:${project.mixin_extras_version}"
    include "com.github.LlamaLad7.MixinExtras:mixinextras-fabric:${project.mixin_extras_version}"
    annotationProcessor "com.github.LlamaLad7.MixinExtras:mixinextras-fabric:${project.mixin_extras_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.name}" }
    }
}

// configure the maven publication
// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             from components.java
//         }
//     }

//     // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//     repositories {
//         // Add repositories to publish to here.
//         // Notice: This block does NOT have the same function as the block in the top level.
//         // The repositories here will be used for publishing your artifact, not for
//         // retrieving dependencies.
//     }
// }
